// Package internal provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package internal

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
	OAuth2Scopes    = "OAuth2.Scopes"
)

// APIResourceCollectionItem defines model for APIResourceCollectionItem.
type APIResourceCollectionItem struct {
	Description *string          `json:"description,omitempty"`
	Id          string           `json:"id"`
	Identifier  *string          `json:"identifier,omitempty"`
	Name        string           `json:"name"`
	Scopes      *[]ScopeGetModel `json:"scopes,omitempty"`
	Self        string           `json:"self"`
	Type        *string          `json:"type,omitempty"`
}

// APIResourceCollectionListItem defines model for APIResourceCollectionListItem.
type APIResourceCollectionListItem struct {
	ApiResources *APIResourceMap `json:"apiResources,omitempty"`
	DisplayName  string          `json:"displayName"`
	Id           string          `json:"id"`
	Name         string          `json:"name"`
	Self         string          `json:"self"`
	Type         *string         `json:"type,omitempty"`
}

// APIResourceCollectionListResponse defines model for APIResourceCollectionListResponse.
type APIResourceCollectionListResponse struct {
	ApiResourceCollections []APIResourceCollectionListItem `json:"apiResourceCollections"`
	TotalResults           int                             `json:"totalResults"`
}

// APIResourceCollectionResponse defines model for APIResourceCollectionResponse.
type APIResourceCollectionResponse struct {
	ApiResources *APIResourceMap `json:"apiResources,omitempty"`
	DisplayName  string          `json:"displayName"`
	Id           string          `json:"id"`
	Name         string          `json:"name"`
	Type         *string         `json:"type,omitempty"`
}

// APIResourceCreationModel defines model for APIResourceCreationModel.
type APIResourceCreationModel struct {
	AuthorizationDetailsTypes *[]AuthorizationDetailsTypesCreationModel `json:"authorizationDetailsTypes,omitempty"`
	Description               *string                                   `json:"description,omitempty"`
	Identifier                string                                    `json:"identifier"`
	Name                      string                                    `json:"name"`
	RequiresAuthorization     *bool                                     `json:"requiresAuthorization,omitempty"`
	Scopes                    *[]ScopeCreationModel                     `json:"scopes,omitempty"`
}

// APIResourceListItem defines model for APIResourceListItem.
type APIResourceListItem struct {
	Id                    string      `json:"id"`
	Identifier            string      `json:"identifier"`
	Name                  string      `json:"name"`
	Properties            *[]Property `json:"properties,omitempty"`
	RequiresAuthorization *bool       `json:"requiresAuthorization,omitempty"`
	Self                  string      `json:"self"`
	Type                  *string     `json:"type,omitempty"`
}

// APIResourceListResponse defines model for APIResourceListResponse.
type APIResourceListResponse struct {
	APIResources *[]APIResourceListItem `json:"APIResources,omitempty"`
	Links        []PaginationLink       `json:"links"`
	TotalResults *int                   `json:"totalResults,omitempty"`
}

// APIResourceMap defines model for APIResourceMap.
type APIResourceMap struct {
	Read  *[]APIResourceCollectionItem `json:"read,omitempty"`
	Write *[]APIResourceCollectionItem `json:"write,omitempty"`
}

// APIResourcePatchModel defines model for APIResourcePatchModel.
type APIResourcePatchModel struct {
	AddedAuthorizationDetailsTypes   *[]AuthorizationDetailsTypesCreationModel `json:"addedAuthorizationDetailsTypes,omitempty"`
	AddedScopes                      *[]ScopeCreationModel                     `json:"addedScopes,omitempty"`
	Description                      *string                                   `json:"description,omitempty"`
	Name                             *string                                   `json:"name,omitempty"`
	RemovedAuthorizationDetailsTypes *[]string                                 `json:"removedAuthorizationDetailsTypes,omitempty"`

	// RemovedScopes This field is not supported yet.
	RemovedScopes *[]string `json:"removedScopes,omitempty"`
}

// APIResourceResponse defines model for APIResourceResponse.
type APIResourceResponse struct {
	AuthorizationDetailsTypes *[]AuthorizationDetailsTypesGetModel `json:"authorizationDetailsTypes,omitempty"`
	Description               *string                              `json:"description,omitempty"`
	Id                        string                               `json:"id"`
	Identifier                string                               `json:"identifier"`
	Name                      string                               `json:"name"`
	Properties                *[]Property                          `json:"properties,omitempty"`
	RequiresAuthorization     *bool                                `json:"requiresAuthorization,omitempty"`
	Scopes                    *[]ScopeGetModel                     `json:"scopes,omitempty"`
	Self                      string                               `json:"self"`
	SubscribedApplications    *[]SubscribedApplicationGetModel     `json:"subscribedApplications,omitempty"`
	Type                      *string                              `json:"type,omitempty"`
}

// AuthorizationDetailsTypesCreationModel defines model for AuthorizationDetailsTypesCreationModel.
type AuthorizationDetailsTypesCreationModel struct {
	// Description description of the authorization details type
	Description string `json:"description"`

	// Name display name of the authorization details type
	Name string `json:"name"`

	// Schema Accepts the [JSON Schema document](https://json-schema.org/draft/2020-12/json-schema-core#name-json-schema-documents) of the authorization details type
	Schema map[string]interface{} `json:"schema"`

	// Type an unique type of the authorization details type
	Type string `json:"type"`
}

// AuthorizationDetailsTypesGetModel defines model for AuthorizationDetailsTypesGetModel.
type AuthorizationDetailsTypesGetModel struct {
	// Description description of the authorization details type
	Description string `json:"description"`

	// Id an unique id of the registered authorization details type
	Id string `json:"id"`

	// Name display name of the authorization details type
	Name string `json:"name"`

	// Schema Accepts the [JSON Schema document](https://json-schema.org/draft/2020-12/json-schema-core#name-json-schema-documents) of the authorization details type
	Schema map[string]interface{} `json:"schema"`

	// Type an unique type of the authorization details type
	Type string `json:"type"`
}

// Error defines model for Error.
type Error struct {
	Code        *string `json:"code,omitempty"`
	Description *string `json:"description,omitempty"`
	Message     *string `json:"message,omitempty"`
	TraceId     *string `json:"traceId,omitempty"`
}

// PaginationLink defines model for PaginationLink.
type PaginationLink struct {
	Href *string `json:"href,omitempty"`
	Rel  *string `json:"rel,omitempty"`
}

// Property defines model for Property.
type Property struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// ScopeCreationModel defines model for ScopeCreationModel.
type ScopeCreationModel struct {
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Name        string  `json:"name"`
}

// ScopeGetModel defines model for ScopeGetModel.
type ScopeGetModel struct {
	Description *string `json:"description,omitempty"`
	DisplayName string  `json:"displayName"`
	Id          string  `json:"id"`
	Name        string  `json:"name"`
}

// ScopePatchModel defines model for ScopePatchModel.
type ScopePatchModel struct {
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
}

// SubscribedApplicationGetModel defines model for SubscribedApplicationGetModel.
type SubscribedApplicationGetModel struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// After defines model for after.
type After = string

// ApiResourceId defines model for apiResourceId.
type ApiResourceId = string

// Attributes defines model for attributes.
type Attributes = string

// AuthorizationDetailsTypeId defines model for authorizationDetailsTypeId.
type AuthorizationDetailsTypeId = string

// Before defines model for before.
type Before = string

// CollectionAttributes defines model for collectionAttributes.
type CollectionAttributes = string

// CollectionFilter defines model for collectionFilter.
type CollectionFilter = string

// CollectionId defines model for collectionId.
type CollectionId = string

// Filter defines model for filter.
type Filter = string

// Limit defines model for limit.
type Limit = int

// ScopeName defines model for scopeName.
type ScopeName = string

// GetAPIResourcesParams defines parameters for GetAPIResources.
type GetAPIResourcesParams struct {
	// Before Base64 encoded cursor value for backward pagination.
	Before *Before `form:"before,omitempty" json:"before,omitempty"`

	// After Base64 encoded cursor value for forward pagination.
	After *After `form:"after,omitempty" json:"after,omitempty"`

	// Filter Condition to filter the retrieval of records. Supports 'sw', 'co', 'ew' and 'eq' operations.
	Filter *Filter `form:"filter,omitempty" json:"filter,omitempty"`

	// Limit Maximum number of records to return.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Attributes Specifies the required attributes in the response. Only 'properties' attribute is currently supported.
	Attributes *Attributes `form:"attributes,omitempty" json:"attributes,omitempty"`
}

// AddAuthorizationDetailsTypesJSONBody defines parameters for AddAuthorizationDetailsTypes.
type AddAuthorizationDetailsTypesJSONBody = []AuthorizationDetailsTypesCreationModel

// PutApiResourcesApiResourceIdScopesJSONBody defines parameters for PutApiResourcesApiResourceIdScopes.
type PutApiResourcesApiResourceIdScopesJSONBody = []ScopeCreationModel

// GetAuthorizationDetailsTypesInTenantParams defines parameters for GetAuthorizationDetailsTypesInTenant.
type GetAuthorizationDetailsTypesInTenantParams struct {
	// Filter Condition to filter the retrieval of records. Supports 'sw', 'co', 'ew' and 'eq' operations.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`
}

// IsAuthorizationDetailsTypeExistsParams defines parameters for IsAuthorizationDetailsTypeExists.
type IsAuthorizationDetailsTypeExistsParams struct {
	// Filter Condition to filter the retrieval of records. Supports 'sw', 'co', 'ew' and 'eq' operations.
	Filter string `form:"filter" json:"filter"`
}

// GetAPIResourceCollectionsParams defines parameters for GetAPIResourceCollections.
type GetAPIResourceCollectionsParams struct {
	// Filter Condition to filter the retrieval of records. Supports 'sw', 'co', 'ew' and 'eq' operations.
	Filter *CollectionFilter `form:"filter,omitempty" json:"filter,omitempty"`

	// Attributes Specifies the required attributes in the response. Only 'apiResources' attribute is currently supported.
	Attributes *CollectionAttributes `form:"attributes,omitempty" json:"attributes,omitempty"`
}

// GetScopesParams defines parameters for GetScopes.
type GetScopesParams struct {
	// Filter Condition to filter the retrieval of records. Supports 'sw', 'co', 'ew' and 'eq' operations.
	Filter *Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// AddAPIResourceJSONRequestBody defines body for AddAPIResource for application/json ContentType.
type AddAPIResourceJSONRequestBody = APIResourceCreationModel

// PatchApiResourcesApiResourceIdJSONRequestBody defines body for PatchApiResourcesApiResourceId for application/json ContentType.
type PatchApiResourcesApiResourceIdJSONRequestBody = APIResourcePatchModel

// AddAuthorizationDetailsTypesJSONRequestBody defines body for AddAuthorizationDetailsTypes for application/json ContentType.
type AddAuthorizationDetailsTypesJSONRequestBody = AddAuthorizationDetailsTypesJSONBody

// UpdateAuthorizationDetailsTypeJSONRequestBody defines body for UpdateAuthorizationDetailsType for application/json ContentType.
type UpdateAuthorizationDetailsTypeJSONRequestBody = AuthorizationDetailsTypesCreationModel

// PutApiResourcesApiResourceIdScopesJSONRequestBody defines body for PutApiResourcesApiResourceIdScopes for application/json ContentType.
type PutApiResourcesApiResourceIdScopesJSONRequestBody = PutApiResourcesApiResourceIdScopesJSONBody

// PatchApiResourcesApiResourceIdScopesScopeNameJSONRequestBody defines body for PatchApiResourcesApiResourceIdScopesScopeName for application/json ContentType.
type PatchApiResourcesApiResourceIdScopesScopeNameJSONRequestBody = ScopePatchModel

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAPIResources request
	GetAPIResources(ctx context.Context, params *GetAPIResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddAPIResourceWithBody request with any body
	AddAPIResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddAPIResource(ctx context.Context, body AddAPIResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiResourcesApiResourceId request
	DeleteApiResourcesApiResourceId(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiResourcesApiResourceId request
	GetApiResourcesApiResourceId(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiResourcesApiResourceIdWithBody request with any body
	PatchApiResourcesApiResourceIdWithBody(ctx context.Context, apiResourceId ApiResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiResourcesApiResourceId(ctx context.Context, apiResourceId ApiResourceId, body PatchApiResourcesApiResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthorizationDetailsTypes request
	GetAuthorizationDetailsTypes(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddAuthorizationDetailsTypesWithBody request with any body
	AddAuthorizationDetailsTypesWithBody(ctx context.Context, apiResourceId ApiResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddAuthorizationDetailsTypes(ctx context.Context, apiResourceId ApiResourceId, body AddAuthorizationDetailsTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthorizationDetailsType request
	DeleteAuthorizationDetailsType(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthorizationDetailsType request
	GetAuthorizationDetailsType(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAuthorizationDetailsTypeWithBody request with any body
	UpdateAuthorizationDetailsTypeWithBody(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAuthorizationDetailsType(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, body UpdateAuthorizationDetailsTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiResourcesApiResourceIdScopes request
	GetApiResourcesApiResourceIdScopes(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiResourcesApiResourceIdScopesWithBody request with any body
	PutApiResourcesApiResourceIdScopesWithBody(ctx context.Context, apiResourceId ApiResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiResourcesApiResourceIdScopes(ctx context.Context, apiResourceId ApiResourceId, body PutApiResourcesApiResourceIdScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiResourcesApiResourceIdScopesScopeName request
	DeleteApiResourcesApiResourceIdScopesScopeName(ctx context.Context, apiResourceId ApiResourceId, scopeName ScopeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiResourcesApiResourceIdScopesScopeNameWithBody request with any body
	PatchApiResourcesApiResourceIdScopesScopeNameWithBody(ctx context.Context, apiResourceId ApiResourceId, scopeName ScopeName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiResourcesApiResourceIdScopesScopeName(ctx context.Context, apiResourceId ApiResourceId, scopeName ScopeName, body PatchApiResourcesApiResourceIdScopesScopeNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthorizationDetailsTypesInTenant request
	GetAuthorizationDetailsTypesInTenant(ctx context.Context, params *GetAuthorizationDetailsTypesInTenantParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IsAuthorizationDetailsTypeExists request
	IsAuthorizationDetailsTypeExists(ctx context.Context, params *IsAuthorizationDetailsTypeExistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIResourceCollections request
	GetAPIResourceCollections(ctx context.Context, params *GetAPIResourceCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIResourceCollectionByCollectionId request
	GetAPIResourceCollectionByCollectionId(ctx context.Context, collectionId CollectionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScopes request
	GetScopes(ctx context.Context, params *GetScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAPIResources(ctx context.Context, params *GetAPIResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIResourcesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAPIResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAPIResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAPIResource(ctx context.Context, body AddAPIResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAPIResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiResourcesApiResourceId(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiResourcesApiResourceIdRequest(c.Server, apiResourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiResourcesApiResourceId(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiResourcesApiResourceIdRequest(c.Server, apiResourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiResourcesApiResourceIdWithBody(ctx context.Context, apiResourceId ApiResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiResourcesApiResourceIdRequestWithBody(c.Server, apiResourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiResourcesApiResourceId(ctx context.Context, apiResourceId ApiResourceId, body PatchApiResourcesApiResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiResourcesApiResourceIdRequest(c.Server, apiResourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthorizationDetailsTypes(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthorizationDetailsTypesRequest(c.Server, apiResourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAuthorizationDetailsTypesWithBody(ctx context.Context, apiResourceId ApiResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAuthorizationDetailsTypesRequestWithBody(c.Server, apiResourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAuthorizationDetailsTypes(ctx context.Context, apiResourceId ApiResourceId, body AddAuthorizationDetailsTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAuthorizationDetailsTypesRequest(c.Server, apiResourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthorizationDetailsType(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthorizationDetailsTypeRequest(c.Server, apiResourceId, authorizationDetailsTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthorizationDetailsType(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthorizationDetailsTypeRequest(c.Server, apiResourceId, authorizationDetailsTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAuthorizationDetailsTypeWithBody(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAuthorizationDetailsTypeRequestWithBody(c.Server, apiResourceId, authorizationDetailsTypeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAuthorizationDetailsType(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, body UpdateAuthorizationDetailsTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAuthorizationDetailsTypeRequest(c.Server, apiResourceId, authorizationDetailsTypeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiResourcesApiResourceIdScopes(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiResourcesApiResourceIdScopesRequest(c.Server, apiResourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiResourcesApiResourceIdScopesWithBody(ctx context.Context, apiResourceId ApiResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiResourcesApiResourceIdScopesRequestWithBody(c.Server, apiResourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiResourcesApiResourceIdScopes(ctx context.Context, apiResourceId ApiResourceId, body PutApiResourcesApiResourceIdScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiResourcesApiResourceIdScopesRequest(c.Server, apiResourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiResourcesApiResourceIdScopesScopeName(ctx context.Context, apiResourceId ApiResourceId, scopeName ScopeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiResourcesApiResourceIdScopesScopeNameRequest(c.Server, apiResourceId, scopeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiResourcesApiResourceIdScopesScopeNameWithBody(ctx context.Context, apiResourceId ApiResourceId, scopeName ScopeName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiResourcesApiResourceIdScopesScopeNameRequestWithBody(c.Server, apiResourceId, scopeName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiResourcesApiResourceIdScopesScopeName(ctx context.Context, apiResourceId ApiResourceId, scopeName ScopeName, body PatchApiResourcesApiResourceIdScopesScopeNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiResourcesApiResourceIdScopesScopeNameRequest(c.Server, apiResourceId, scopeName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthorizationDetailsTypesInTenant(ctx context.Context, params *GetAuthorizationDetailsTypesInTenantParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthorizationDetailsTypesInTenantRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IsAuthorizationDetailsTypeExists(ctx context.Context, params *IsAuthorizationDetailsTypeExistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIsAuthorizationDetailsTypeExistsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIResourceCollections(ctx context.Context, params *GetAPIResourceCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIResourceCollectionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIResourceCollectionByCollectionId(ctx context.Context, collectionId CollectionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIResourceCollectionByCollectionIdRequest(c.Server, collectionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScopes(ctx context.Context, params *GetScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScopesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAPIResourcesRequest generates requests for GetAPIResources
func NewGetAPIResourcesRequest(server string, params *GetAPIResourcesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Attributes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attributes", runtime.ParamLocationQuery, *params.Attributes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddAPIResourceRequest calls the generic AddAPIResource builder with application/json body
func NewAddAPIResourceRequest(server string, body AddAPIResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddAPIResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewAddAPIResourceRequestWithBody generates requests for AddAPIResource with any type of body
func NewAddAPIResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiResourcesApiResourceIdRequest generates requests for DeleteApiResourcesApiResourceId
func NewDeleteApiResourcesApiResourceIdRequest(server string, apiResourceId ApiResourceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiResourceId", runtime.ParamLocationPath, apiResourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiResourcesApiResourceIdRequest generates requests for GetApiResourcesApiResourceId
func NewGetApiResourcesApiResourceIdRequest(server string, apiResourceId ApiResourceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiResourceId", runtime.ParamLocationPath, apiResourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiResourcesApiResourceIdRequest calls the generic PatchApiResourcesApiResourceId builder with application/json body
func NewPatchApiResourcesApiResourceIdRequest(server string, apiResourceId ApiResourceId, body PatchApiResourcesApiResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiResourcesApiResourceIdRequestWithBody(server, apiResourceId, "application/json", bodyReader)
}

// NewPatchApiResourcesApiResourceIdRequestWithBody generates requests for PatchApiResourcesApiResourceId with any type of body
func NewPatchApiResourcesApiResourceIdRequestWithBody(server string, apiResourceId ApiResourceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiResourceId", runtime.ParamLocationPath, apiResourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthorizationDetailsTypesRequest generates requests for GetAuthorizationDetailsTypes
func NewGetAuthorizationDetailsTypesRequest(server string, apiResourceId ApiResourceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiResourceId", runtime.ParamLocationPath, apiResourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-resources/%s/authorization-details-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddAuthorizationDetailsTypesRequest calls the generic AddAuthorizationDetailsTypes builder with application/json body
func NewAddAuthorizationDetailsTypesRequest(server string, apiResourceId ApiResourceId, body AddAuthorizationDetailsTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddAuthorizationDetailsTypesRequestWithBody(server, apiResourceId, "application/json", bodyReader)
}

// NewAddAuthorizationDetailsTypesRequestWithBody generates requests for AddAuthorizationDetailsTypes with any type of body
func NewAddAuthorizationDetailsTypesRequestWithBody(server string, apiResourceId ApiResourceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiResourceId", runtime.ParamLocationPath, apiResourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-resources/%s/authorization-details-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAuthorizationDetailsTypeRequest generates requests for DeleteAuthorizationDetailsType
func NewDeleteAuthorizationDetailsTypeRequest(server string, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiResourceId", runtime.ParamLocationPath, apiResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "authorizationDetailsTypeId", runtime.ParamLocationPath, authorizationDetailsTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-resources/%s/authorization-details-types/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthorizationDetailsTypeRequest generates requests for GetAuthorizationDetailsType
func NewGetAuthorizationDetailsTypeRequest(server string, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiResourceId", runtime.ParamLocationPath, apiResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "authorizationDetailsTypeId", runtime.ParamLocationPath, authorizationDetailsTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-resources/%s/authorization-details-types/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAuthorizationDetailsTypeRequest calls the generic UpdateAuthorizationDetailsType builder with application/json body
func NewUpdateAuthorizationDetailsTypeRequest(server string, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, body UpdateAuthorizationDetailsTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAuthorizationDetailsTypeRequestWithBody(server, apiResourceId, authorizationDetailsTypeId, "application/json", bodyReader)
}

// NewUpdateAuthorizationDetailsTypeRequestWithBody generates requests for UpdateAuthorizationDetailsType with any type of body
func NewUpdateAuthorizationDetailsTypeRequestWithBody(server string, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiResourceId", runtime.ParamLocationPath, apiResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "authorizationDetailsTypeId", runtime.ParamLocationPath, authorizationDetailsTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-resources/%s/authorization-details-types/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiResourcesApiResourceIdScopesRequest generates requests for GetApiResourcesApiResourceIdScopes
func NewGetApiResourcesApiResourceIdScopesRequest(server string, apiResourceId ApiResourceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiResourceId", runtime.ParamLocationPath, apiResourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-resources/%s/scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiResourcesApiResourceIdScopesRequest calls the generic PutApiResourcesApiResourceIdScopes builder with application/json body
func NewPutApiResourcesApiResourceIdScopesRequest(server string, apiResourceId ApiResourceId, body PutApiResourcesApiResourceIdScopesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiResourcesApiResourceIdScopesRequestWithBody(server, apiResourceId, "application/json", bodyReader)
}

// NewPutApiResourcesApiResourceIdScopesRequestWithBody generates requests for PutApiResourcesApiResourceIdScopes with any type of body
func NewPutApiResourcesApiResourceIdScopesRequestWithBody(server string, apiResourceId ApiResourceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiResourceId", runtime.ParamLocationPath, apiResourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-resources/%s/scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiResourcesApiResourceIdScopesScopeNameRequest generates requests for DeleteApiResourcesApiResourceIdScopesScopeName
func NewDeleteApiResourcesApiResourceIdScopesScopeNameRequest(server string, apiResourceId ApiResourceId, scopeName ScopeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiResourceId", runtime.ParamLocationPath, apiResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scopeName", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-resources/%s/scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiResourcesApiResourceIdScopesScopeNameRequest calls the generic PatchApiResourcesApiResourceIdScopesScopeName builder with application/json body
func NewPatchApiResourcesApiResourceIdScopesScopeNameRequest(server string, apiResourceId ApiResourceId, scopeName ScopeName, body PatchApiResourcesApiResourceIdScopesScopeNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiResourcesApiResourceIdScopesScopeNameRequestWithBody(server, apiResourceId, scopeName, "application/json", bodyReader)
}

// NewPatchApiResourcesApiResourceIdScopesScopeNameRequestWithBody generates requests for PatchApiResourcesApiResourceIdScopesScopeName with any type of body
func NewPatchApiResourcesApiResourceIdScopesScopeNameRequestWithBody(server string, apiResourceId ApiResourceId, scopeName ScopeName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiResourceId", runtime.ParamLocationPath, apiResourceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scopeName", runtime.ParamLocationPath, scopeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-resources/%s/scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthorizationDetailsTypesInTenantRequest generates requests for GetAuthorizationDetailsTypesInTenant
func NewGetAuthorizationDetailsTypesInTenantRequest(server string, params *GetAuthorizationDetailsTypesInTenantParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorization-details-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIsAuthorizationDetailsTypeExistsRequest generates requests for IsAuthorizationDetailsTypeExists
func NewIsAuthorizationDetailsTypeExistsRequest(server string, params *IsAuthorizationDetailsTypeExistsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorization-details-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIResourceCollectionsRequest generates requests for GetAPIResourceCollections
func NewGetAPIResourceCollectionsRequest(server string, params *GetAPIResourceCollectionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/meta/api-resource-collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Attributes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attributes", runtime.ParamLocationQuery, *params.Attributes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIResourceCollectionByCollectionIdRequest generates requests for GetAPIResourceCollectionByCollectionId
func NewGetAPIResourceCollectionByCollectionIdRequest(server string, collectionId CollectionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collectionId", runtime.ParamLocationPath, collectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/meta/api-resource-collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScopesRequest generates requests for GetScopes
func NewGetScopesRequest(server string, params *GetScopesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scopes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAPIResourcesWithResponse request
	GetAPIResourcesWithResponse(ctx context.Context, params *GetAPIResourcesParams, reqEditors ...RequestEditorFn) (*GetAPIResourcesResponse, error)

	// AddAPIResourceWithBodyWithResponse request with any body
	AddAPIResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAPIResourceResponse, error)

	AddAPIResourceWithResponse(ctx context.Context, body AddAPIResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAPIResourceResponse, error)

	// DeleteApiResourcesApiResourceIdWithResponse request
	DeleteApiResourcesApiResourceIdWithResponse(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*DeleteApiResourcesApiResourceIdResponse, error)

	// GetApiResourcesApiResourceIdWithResponse request
	GetApiResourcesApiResourceIdWithResponse(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*GetApiResourcesApiResourceIdResponse, error)

	// PatchApiResourcesApiResourceIdWithBodyWithResponse request with any body
	PatchApiResourcesApiResourceIdWithBodyWithResponse(ctx context.Context, apiResourceId ApiResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiResourcesApiResourceIdResponse, error)

	PatchApiResourcesApiResourceIdWithResponse(ctx context.Context, apiResourceId ApiResourceId, body PatchApiResourcesApiResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiResourcesApiResourceIdResponse, error)

	// GetAuthorizationDetailsTypesWithResponse request
	GetAuthorizationDetailsTypesWithResponse(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*GetAuthorizationDetailsTypesResponse, error)

	// AddAuthorizationDetailsTypesWithBodyWithResponse request with any body
	AddAuthorizationDetailsTypesWithBodyWithResponse(ctx context.Context, apiResourceId ApiResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAuthorizationDetailsTypesResponse, error)

	AddAuthorizationDetailsTypesWithResponse(ctx context.Context, apiResourceId ApiResourceId, body AddAuthorizationDetailsTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAuthorizationDetailsTypesResponse, error)

	// DeleteAuthorizationDetailsTypeWithResponse request
	DeleteAuthorizationDetailsTypeWithResponse(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, reqEditors ...RequestEditorFn) (*DeleteAuthorizationDetailsTypeResponse, error)

	// GetAuthorizationDetailsTypeWithResponse request
	GetAuthorizationDetailsTypeWithResponse(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, reqEditors ...RequestEditorFn) (*GetAuthorizationDetailsTypeResponse, error)

	// UpdateAuthorizationDetailsTypeWithBodyWithResponse request with any body
	UpdateAuthorizationDetailsTypeWithBodyWithResponse(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAuthorizationDetailsTypeResponse, error)

	UpdateAuthorizationDetailsTypeWithResponse(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, body UpdateAuthorizationDetailsTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAuthorizationDetailsTypeResponse, error)

	// GetApiResourcesApiResourceIdScopesWithResponse request
	GetApiResourcesApiResourceIdScopesWithResponse(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*GetApiResourcesApiResourceIdScopesResponse, error)

	// PutApiResourcesApiResourceIdScopesWithBodyWithResponse request with any body
	PutApiResourcesApiResourceIdScopesWithBodyWithResponse(ctx context.Context, apiResourceId ApiResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiResourcesApiResourceIdScopesResponse, error)

	PutApiResourcesApiResourceIdScopesWithResponse(ctx context.Context, apiResourceId ApiResourceId, body PutApiResourcesApiResourceIdScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiResourcesApiResourceIdScopesResponse, error)

	// DeleteApiResourcesApiResourceIdScopesScopeNameWithResponse request
	DeleteApiResourcesApiResourceIdScopesScopeNameWithResponse(ctx context.Context, apiResourceId ApiResourceId, scopeName ScopeName, reqEditors ...RequestEditorFn) (*DeleteApiResourcesApiResourceIdScopesScopeNameResponse, error)

	// PatchApiResourcesApiResourceIdScopesScopeNameWithBodyWithResponse request with any body
	PatchApiResourcesApiResourceIdScopesScopeNameWithBodyWithResponse(ctx context.Context, apiResourceId ApiResourceId, scopeName ScopeName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiResourcesApiResourceIdScopesScopeNameResponse, error)

	PatchApiResourcesApiResourceIdScopesScopeNameWithResponse(ctx context.Context, apiResourceId ApiResourceId, scopeName ScopeName, body PatchApiResourcesApiResourceIdScopesScopeNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiResourcesApiResourceIdScopesScopeNameResponse, error)

	// GetAuthorizationDetailsTypesInTenantWithResponse request
	GetAuthorizationDetailsTypesInTenantWithResponse(ctx context.Context, params *GetAuthorizationDetailsTypesInTenantParams, reqEditors ...RequestEditorFn) (*GetAuthorizationDetailsTypesInTenantResponse, error)

	// IsAuthorizationDetailsTypeExistsWithResponse request
	IsAuthorizationDetailsTypeExistsWithResponse(ctx context.Context, params *IsAuthorizationDetailsTypeExistsParams, reqEditors ...RequestEditorFn) (*IsAuthorizationDetailsTypeExistsResponse, error)

	// GetAPIResourceCollectionsWithResponse request
	GetAPIResourceCollectionsWithResponse(ctx context.Context, params *GetAPIResourceCollectionsParams, reqEditors ...RequestEditorFn) (*GetAPIResourceCollectionsResponse, error)

	// GetAPIResourceCollectionByCollectionIdWithResponse request
	GetAPIResourceCollectionByCollectionIdWithResponse(ctx context.Context, collectionId CollectionId, reqEditors ...RequestEditorFn) (*GetAPIResourceCollectionByCollectionIdResponse, error)

	// GetScopesWithResponse request
	GetScopesWithResponse(ctx context.Context, params *GetScopesParams, reqEditors ...RequestEditorFn) (*GetScopesResponse, error)
}

type GetAPIResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIResourceListResponse
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAPIResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddAPIResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *APIResourceResponse
	JSON400      *Error
	JSON404      *Error
	JSON409      *Error
	XML409       *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AddAPIResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddAPIResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiResourcesApiResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiResourcesApiResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiResourcesApiResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiResourcesApiResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIResourceResponse
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiResourcesApiResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiResourcesApiResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiResourcesApiResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON409      *Error
	XML409       *Error
	JSON500      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r PatchApiResourcesApiResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiResourcesApiResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthorizationDetailsTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuthorizationDetailsTypesGetModel
	JSON401      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAuthorizationDetailsTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthorizationDetailsTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddAuthorizationDetailsTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuthorizationDetailsTypesGetModel
	JSON401      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AddAuthorizationDetailsTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddAuthorizationDetailsTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthorizationDetailsTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteAuthorizationDetailsTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthorizationDetailsTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthorizationDetailsTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthorizationDetailsTypesGetModel
	JSON401      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAuthorizationDetailsTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthorizationDetailsTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAuthorizationDetailsTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateAuthorizationDetailsTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAuthorizationDetailsTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiResourcesApiResourceIdScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ScopeGetModel
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiResourcesApiResourceIdScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiResourcesApiResourceIdScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiResourcesApiResourceIdScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON409      *Error
	XML409       *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PutApiResourcesApiResourceIdScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiResourcesApiResourceIdScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiResourcesApiResourceIdScopesScopeNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiResourcesApiResourceIdScopesScopeNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiResourcesApiResourceIdScopesScopeNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiResourcesApiResourceIdScopesScopeNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PatchApiResourcesApiResourceIdScopesScopeNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiResourcesApiResourceIdScopesScopeNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthorizationDetailsTypesInTenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuthorizationDetailsTypesGetModel
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAuthorizationDetailsTypesInTenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthorizationDetailsTypesInTenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IsAuthorizationDetailsTypeExistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IsAuthorizationDetailsTypeExistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IsAuthorizationDetailsTypeExistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIResourceCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIResourceCollectionListResponse
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAPIResourceCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIResourceCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIResourceCollectionByCollectionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIResourceCollectionResponse
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAPIResourceCollectionByCollectionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIResourceCollectionByCollectionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ScopeGetModel
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAPIResourcesWithResponse request returning *GetAPIResourcesResponse
func (c *ClientWithResponses) GetAPIResourcesWithResponse(ctx context.Context, params *GetAPIResourcesParams, reqEditors ...RequestEditorFn) (*GetAPIResourcesResponse, error) {
	rsp, err := c.GetAPIResources(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIResourcesResponse(rsp)
}

// AddAPIResourceWithBodyWithResponse request with arbitrary body returning *AddAPIResourceResponse
func (c *ClientWithResponses) AddAPIResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAPIResourceResponse, error) {
	rsp, err := c.AddAPIResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAPIResourceResponse(rsp)
}

func (c *ClientWithResponses) AddAPIResourceWithResponse(ctx context.Context, body AddAPIResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAPIResourceResponse, error) {
	rsp, err := c.AddAPIResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAPIResourceResponse(rsp)
}

// DeleteApiResourcesApiResourceIdWithResponse request returning *DeleteApiResourcesApiResourceIdResponse
func (c *ClientWithResponses) DeleteApiResourcesApiResourceIdWithResponse(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*DeleteApiResourcesApiResourceIdResponse, error) {
	rsp, err := c.DeleteApiResourcesApiResourceId(ctx, apiResourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiResourcesApiResourceIdResponse(rsp)
}

// GetApiResourcesApiResourceIdWithResponse request returning *GetApiResourcesApiResourceIdResponse
func (c *ClientWithResponses) GetApiResourcesApiResourceIdWithResponse(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*GetApiResourcesApiResourceIdResponse, error) {
	rsp, err := c.GetApiResourcesApiResourceId(ctx, apiResourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiResourcesApiResourceIdResponse(rsp)
}

// PatchApiResourcesApiResourceIdWithBodyWithResponse request with arbitrary body returning *PatchApiResourcesApiResourceIdResponse
func (c *ClientWithResponses) PatchApiResourcesApiResourceIdWithBodyWithResponse(ctx context.Context, apiResourceId ApiResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiResourcesApiResourceIdResponse, error) {
	rsp, err := c.PatchApiResourcesApiResourceIdWithBody(ctx, apiResourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiResourcesApiResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiResourcesApiResourceIdWithResponse(ctx context.Context, apiResourceId ApiResourceId, body PatchApiResourcesApiResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiResourcesApiResourceIdResponse, error) {
	rsp, err := c.PatchApiResourcesApiResourceId(ctx, apiResourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiResourcesApiResourceIdResponse(rsp)
}

// GetAuthorizationDetailsTypesWithResponse request returning *GetAuthorizationDetailsTypesResponse
func (c *ClientWithResponses) GetAuthorizationDetailsTypesWithResponse(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*GetAuthorizationDetailsTypesResponse, error) {
	rsp, err := c.GetAuthorizationDetailsTypes(ctx, apiResourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthorizationDetailsTypesResponse(rsp)
}

// AddAuthorizationDetailsTypesWithBodyWithResponse request with arbitrary body returning *AddAuthorizationDetailsTypesResponse
func (c *ClientWithResponses) AddAuthorizationDetailsTypesWithBodyWithResponse(ctx context.Context, apiResourceId ApiResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAuthorizationDetailsTypesResponse, error) {
	rsp, err := c.AddAuthorizationDetailsTypesWithBody(ctx, apiResourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAuthorizationDetailsTypesResponse(rsp)
}

func (c *ClientWithResponses) AddAuthorizationDetailsTypesWithResponse(ctx context.Context, apiResourceId ApiResourceId, body AddAuthorizationDetailsTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAuthorizationDetailsTypesResponse, error) {
	rsp, err := c.AddAuthorizationDetailsTypes(ctx, apiResourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAuthorizationDetailsTypesResponse(rsp)
}

// DeleteAuthorizationDetailsTypeWithResponse request returning *DeleteAuthorizationDetailsTypeResponse
func (c *ClientWithResponses) DeleteAuthorizationDetailsTypeWithResponse(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, reqEditors ...RequestEditorFn) (*DeleteAuthorizationDetailsTypeResponse, error) {
	rsp, err := c.DeleteAuthorizationDetailsType(ctx, apiResourceId, authorizationDetailsTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthorizationDetailsTypeResponse(rsp)
}

// GetAuthorizationDetailsTypeWithResponse request returning *GetAuthorizationDetailsTypeResponse
func (c *ClientWithResponses) GetAuthorizationDetailsTypeWithResponse(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, reqEditors ...RequestEditorFn) (*GetAuthorizationDetailsTypeResponse, error) {
	rsp, err := c.GetAuthorizationDetailsType(ctx, apiResourceId, authorizationDetailsTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthorizationDetailsTypeResponse(rsp)
}

// UpdateAuthorizationDetailsTypeWithBodyWithResponse request with arbitrary body returning *UpdateAuthorizationDetailsTypeResponse
func (c *ClientWithResponses) UpdateAuthorizationDetailsTypeWithBodyWithResponse(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAuthorizationDetailsTypeResponse, error) {
	rsp, err := c.UpdateAuthorizationDetailsTypeWithBody(ctx, apiResourceId, authorizationDetailsTypeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAuthorizationDetailsTypeResponse(rsp)
}

func (c *ClientWithResponses) UpdateAuthorizationDetailsTypeWithResponse(ctx context.Context, apiResourceId ApiResourceId, authorizationDetailsTypeId AuthorizationDetailsTypeId, body UpdateAuthorizationDetailsTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAuthorizationDetailsTypeResponse, error) {
	rsp, err := c.UpdateAuthorizationDetailsType(ctx, apiResourceId, authorizationDetailsTypeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAuthorizationDetailsTypeResponse(rsp)
}

// GetApiResourcesApiResourceIdScopesWithResponse request returning *GetApiResourcesApiResourceIdScopesResponse
func (c *ClientWithResponses) GetApiResourcesApiResourceIdScopesWithResponse(ctx context.Context, apiResourceId ApiResourceId, reqEditors ...RequestEditorFn) (*GetApiResourcesApiResourceIdScopesResponse, error) {
	rsp, err := c.GetApiResourcesApiResourceIdScopes(ctx, apiResourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiResourcesApiResourceIdScopesResponse(rsp)
}

// PutApiResourcesApiResourceIdScopesWithBodyWithResponse request with arbitrary body returning *PutApiResourcesApiResourceIdScopesResponse
func (c *ClientWithResponses) PutApiResourcesApiResourceIdScopesWithBodyWithResponse(ctx context.Context, apiResourceId ApiResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiResourcesApiResourceIdScopesResponse, error) {
	rsp, err := c.PutApiResourcesApiResourceIdScopesWithBody(ctx, apiResourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiResourcesApiResourceIdScopesResponse(rsp)
}

func (c *ClientWithResponses) PutApiResourcesApiResourceIdScopesWithResponse(ctx context.Context, apiResourceId ApiResourceId, body PutApiResourcesApiResourceIdScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiResourcesApiResourceIdScopesResponse, error) {
	rsp, err := c.PutApiResourcesApiResourceIdScopes(ctx, apiResourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiResourcesApiResourceIdScopesResponse(rsp)
}

// DeleteApiResourcesApiResourceIdScopesScopeNameWithResponse request returning *DeleteApiResourcesApiResourceIdScopesScopeNameResponse
func (c *ClientWithResponses) DeleteApiResourcesApiResourceIdScopesScopeNameWithResponse(ctx context.Context, apiResourceId ApiResourceId, scopeName ScopeName, reqEditors ...RequestEditorFn) (*DeleteApiResourcesApiResourceIdScopesScopeNameResponse, error) {
	rsp, err := c.DeleteApiResourcesApiResourceIdScopesScopeName(ctx, apiResourceId, scopeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiResourcesApiResourceIdScopesScopeNameResponse(rsp)
}

// PatchApiResourcesApiResourceIdScopesScopeNameWithBodyWithResponse request with arbitrary body returning *PatchApiResourcesApiResourceIdScopesScopeNameResponse
func (c *ClientWithResponses) PatchApiResourcesApiResourceIdScopesScopeNameWithBodyWithResponse(ctx context.Context, apiResourceId ApiResourceId, scopeName ScopeName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiResourcesApiResourceIdScopesScopeNameResponse, error) {
	rsp, err := c.PatchApiResourcesApiResourceIdScopesScopeNameWithBody(ctx, apiResourceId, scopeName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiResourcesApiResourceIdScopesScopeNameResponse(rsp)
}

func (c *ClientWithResponses) PatchApiResourcesApiResourceIdScopesScopeNameWithResponse(ctx context.Context, apiResourceId ApiResourceId, scopeName ScopeName, body PatchApiResourcesApiResourceIdScopesScopeNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiResourcesApiResourceIdScopesScopeNameResponse, error) {
	rsp, err := c.PatchApiResourcesApiResourceIdScopesScopeName(ctx, apiResourceId, scopeName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiResourcesApiResourceIdScopesScopeNameResponse(rsp)
}

// GetAuthorizationDetailsTypesInTenantWithResponse request returning *GetAuthorizationDetailsTypesInTenantResponse
func (c *ClientWithResponses) GetAuthorizationDetailsTypesInTenantWithResponse(ctx context.Context, params *GetAuthorizationDetailsTypesInTenantParams, reqEditors ...RequestEditorFn) (*GetAuthorizationDetailsTypesInTenantResponse, error) {
	rsp, err := c.GetAuthorizationDetailsTypesInTenant(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthorizationDetailsTypesInTenantResponse(rsp)
}

// IsAuthorizationDetailsTypeExistsWithResponse request returning *IsAuthorizationDetailsTypeExistsResponse
func (c *ClientWithResponses) IsAuthorizationDetailsTypeExistsWithResponse(ctx context.Context, params *IsAuthorizationDetailsTypeExistsParams, reqEditors ...RequestEditorFn) (*IsAuthorizationDetailsTypeExistsResponse, error) {
	rsp, err := c.IsAuthorizationDetailsTypeExists(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIsAuthorizationDetailsTypeExistsResponse(rsp)
}

// GetAPIResourceCollectionsWithResponse request returning *GetAPIResourceCollectionsResponse
func (c *ClientWithResponses) GetAPIResourceCollectionsWithResponse(ctx context.Context, params *GetAPIResourceCollectionsParams, reqEditors ...RequestEditorFn) (*GetAPIResourceCollectionsResponse, error) {
	rsp, err := c.GetAPIResourceCollections(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIResourceCollectionsResponse(rsp)
}

// GetAPIResourceCollectionByCollectionIdWithResponse request returning *GetAPIResourceCollectionByCollectionIdResponse
func (c *ClientWithResponses) GetAPIResourceCollectionByCollectionIdWithResponse(ctx context.Context, collectionId CollectionId, reqEditors ...RequestEditorFn) (*GetAPIResourceCollectionByCollectionIdResponse, error) {
	rsp, err := c.GetAPIResourceCollectionByCollectionId(ctx, collectionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIResourceCollectionByCollectionIdResponse(rsp)
}

// GetScopesWithResponse request returning *GetScopesResponse
func (c *ClientWithResponses) GetScopesWithResponse(ctx context.Context, params *GetScopesParams, reqEditors ...RequestEditorFn) (*GetScopesResponse, error) {
	rsp, err := c.GetScopes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScopesResponse(rsp)
}

// ParseGetAPIResourcesResponse parses an HTTP response from a GetAPIResourcesWithResponse call
func ParseGetAPIResourcesResponse(rsp *http.Response) (*GetAPIResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIResourceListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddAPIResourceResponse parses an HTTP response from a AddAPIResourceWithResponse call
func ParseAddAPIResourceResponse(rsp *http.Response) (*AddAPIResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddAPIResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest APIResourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 409:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML409 = &dest

	}

	return response, nil
}

// ParseDeleteApiResourcesApiResourceIdResponse parses an HTTP response from a DeleteApiResourcesApiResourceIdWithResponse call
func ParseDeleteApiResourcesApiResourceIdResponse(rsp *http.Response) (*DeleteApiResourcesApiResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiResourcesApiResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiResourcesApiResourceIdResponse parses an HTTP response from a GetApiResourcesApiResourceIdWithResponse call
func ParseGetApiResourcesApiResourceIdResponse(rsp *http.Response) (*GetApiResourcesApiResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiResourcesApiResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIResourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApiResourcesApiResourceIdResponse parses an HTTP response from a PatchApiResourcesApiResourceIdWithResponse call
func ParsePatchApiResourcesApiResourceIdResponse(rsp *http.Response) (*PatchApiResourcesApiResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiResourcesApiResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 409:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML409 = &dest

	}

	return response, nil
}

// ParseGetAuthorizationDetailsTypesResponse parses an HTTP response from a GetAuthorizationDetailsTypesWithResponse call
func ParseGetAuthorizationDetailsTypesResponse(rsp *http.Response) (*GetAuthorizationDetailsTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthorizationDetailsTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuthorizationDetailsTypesGetModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddAuthorizationDetailsTypesResponse parses an HTTP response from a AddAuthorizationDetailsTypesWithResponse call
func ParseAddAuthorizationDetailsTypesResponse(rsp *http.Response) (*AddAuthorizationDetailsTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddAuthorizationDetailsTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuthorizationDetailsTypesGetModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAuthorizationDetailsTypeResponse parses an HTTP response from a DeleteAuthorizationDetailsTypeWithResponse call
func ParseDeleteAuthorizationDetailsTypeResponse(rsp *http.Response) (*DeleteAuthorizationDetailsTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthorizationDetailsTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAuthorizationDetailsTypeResponse parses an HTTP response from a GetAuthorizationDetailsTypeWithResponse call
func ParseGetAuthorizationDetailsTypeResponse(rsp *http.Response) (*GetAuthorizationDetailsTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthorizationDetailsTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthorizationDetailsTypesGetModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateAuthorizationDetailsTypeResponse parses an HTTP response from a UpdateAuthorizationDetailsTypeWithResponse call
func ParseUpdateAuthorizationDetailsTypeResponse(rsp *http.Response) (*UpdateAuthorizationDetailsTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAuthorizationDetailsTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiResourcesApiResourceIdScopesResponse parses an HTTP response from a GetApiResourcesApiResourceIdScopesWithResponse call
func ParseGetApiResourcesApiResourceIdScopesResponse(rsp *http.Response) (*GetApiResourcesApiResourceIdScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiResourcesApiResourceIdScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ScopeGetModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiResourcesApiResourceIdScopesResponse parses an HTTP response from a PutApiResourcesApiResourceIdScopesWithResponse call
func ParsePutApiResourcesApiResourceIdScopesResponse(rsp *http.Response) (*PutApiResourcesApiResourceIdScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiResourcesApiResourceIdScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 409:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML409 = &dest

	}

	return response, nil
}

// ParseDeleteApiResourcesApiResourceIdScopesScopeNameResponse parses an HTTP response from a DeleteApiResourcesApiResourceIdScopesScopeNameWithResponse call
func ParseDeleteApiResourcesApiResourceIdScopesScopeNameResponse(rsp *http.Response) (*DeleteApiResourcesApiResourceIdScopesScopeNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiResourcesApiResourceIdScopesScopeNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApiResourcesApiResourceIdScopesScopeNameResponse parses an HTTP response from a PatchApiResourcesApiResourceIdScopesScopeNameWithResponse call
func ParsePatchApiResourcesApiResourceIdScopesScopeNameResponse(rsp *http.Response) (*PatchApiResourcesApiResourceIdScopesScopeNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiResourcesApiResourceIdScopesScopeNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAuthorizationDetailsTypesInTenantResponse parses an HTTP response from a GetAuthorizationDetailsTypesInTenantWithResponse call
func ParseGetAuthorizationDetailsTypesInTenantResponse(rsp *http.Response) (*GetAuthorizationDetailsTypesInTenantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthorizationDetailsTypesInTenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuthorizationDetailsTypesGetModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseIsAuthorizationDetailsTypeExistsResponse parses an HTTP response from a IsAuthorizationDetailsTypeExistsWithResponse call
func ParseIsAuthorizationDetailsTypeExistsResponse(rsp *http.Response) (*IsAuthorizationDetailsTypeExistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IsAuthorizationDetailsTypeExistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIResourceCollectionsResponse parses an HTTP response from a GetAPIResourceCollectionsWithResponse call
func ParseGetAPIResourceCollectionsResponse(rsp *http.Response) (*GetAPIResourceCollectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIResourceCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIResourceCollectionListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAPIResourceCollectionByCollectionIdResponse parses an HTTP response from a GetAPIResourceCollectionByCollectionIdWithResponse call
func ParseGetAPIResourceCollectionByCollectionIdResponse(rsp *http.Response) (*GetAPIResourceCollectionByCollectionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIResourceCollectionByCollectionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIResourceCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetScopesResponse parses an HTTP response from a GetScopesWithResponse call
func ParseGetScopesResponse(rsp *http.Response) (*GetScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ScopeGetModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
