// Package claim provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package claim

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// Defines values for LocalClaimResSharedProfileValueResolvingMethod.
const (
	FromFirstFoundInHierarchy LocalClaimResSharedProfileValueResolvingMethod = "FromFirstFoundInHierarchy"
	FromOrigin                LocalClaimResSharedProfileValueResolvingMethod = "FromOrigin"
	FromSharedProfile         LocalClaimResSharedProfileValueResolvingMethod = "FromSharedProfile"
)

// Defines values for LocalClaimResUniquenessScope.
const (
	ACROSSUSERSTORES LocalClaimResUniquenessScope = "ACROSS_USERSTORES"
	NONE             LocalClaimResUniquenessScope = "NONE"
	WITHINUSERSTORE  LocalClaimResUniquenessScope = "WITHIN_USERSTORE"
)

// AttributeMapping Claim userstore attribute mapping.
type AttributeMapping struct {
	// MappedAttribute Userstore attribute to be mapped to.
	MappedAttribute string `json:"mappedAttribute"`

	// Userstore Userstore domain name.
	Userstore string `json:"userstore"`
}

// AttributeProfile defines model for AttributeProfile.
type AttributeProfile struct {
	ReadOnly           *bool `json:"readOnly,omitempty"`
	Required           *bool `json:"required,omitempty"`
	SupportedByDefault *bool `json:"supportedByDefault,omitempty"`
}

// ClaimRes Claim response.
type ClaimRes = map[string]interface{}

// Error defines model for Error.
type Error struct {
	Code        string  `json:"code"`
	Description *string `json:"description,omitempty"`
	Message     string  `json:"message"`
	TraceId     *string `json:"traceId,omitempty"`
}

// LocalClaimRes defines model for LocalClaimRes.
type LocalClaimRes struct {
	// AttributeMapping Userstore attribute mappings.
	AttributeMapping *[]AttributeMapping `json:"attributeMapping,omitempty"`

	// ClaimURI A unique URI specific to the claim.
	ClaimURI *string `json:"claimURI,omitempty"`

	// Description Description of the claim.
	Description *string `json:"description,omitempty"`

	// DialectURI URI of the claim dialect.
	DialectURI *string `json:"dialectURI,omitempty"`

	// DisplayName Name of the claim to be displayed in the UI.
	DisplayName *string `json:"displayName,omitempty"`

	// DisplayOrder The order in which the claim is displayed among other claims under the same dialect.
	DisplayOrder *int `json:"displayOrder,omitempty"`

	// Id claim ID.
	Id *string `json:"id,omitempty"`

	// MultiValued Specifies if the claim can hold multiple values.
	MultiValued *bool `json:"multiValued,omitempty"`

	// Profiles Attribute profiles.
	Profiles *Profiles `json:"profiles,omitempty"`

	// Properties Define any additional properties if required.
	Properties *[]Property `json:"properties,omitempty"`

	// ReadOnly Specifies if the claim is read-only.
	ReadOnly *bool `json:"readOnly,omitempty"`

	// RegEx Regular expression used to validate inputs.
	RegEx *string `json:"regEx,omitempty"`

	// Required Specifies if the claim is required for user registration.
	Required *bool `json:"required,omitempty"`

	// SharedProfileValueResolvingMethod Specifies claim value resolving method for shared user profile.
	SharedProfileValueResolvingMethod *LocalClaimResSharedProfileValueResolvingMethod `json:"sharedProfileValueResolvingMethod,omitempty"`

	// SupportedByDefault Specifies if the claim will be prompted during user registration and displayed on the user profile.
	SupportedByDefault *bool `json:"supportedByDefault,omitempty"`

	// UniquenessScope Specifies the scope of uniqueness validation for the claim value.
	UniquenessScope *LocalClaimResUniquenessScope `json:"uniquenessScope,omitempty"`
}

// LocalClaimResSharedProfileValueResolvingMethod Specifies claim value resolving method for shared user profile.
type LocalClaimResSharedProfileValueResolvingMethod string

// LocalClaimResUniquenessScope Specifies the scope of uniqueness validation for the claim value.
type LocalClaimResUniquenessScope string

// Profiles Attribute profiles.
type Profiles map[string]AttributeProfile

// Property defines model for Property.
type Property struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// NotImplemented defines model for NotImplemented.
type NotImplemented = Error

// ServerError defines model for ServerError.
type ServerError = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetLocalClaims request
	GetLocalClaims(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetLocalClaims(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocalClaimsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetLocalClaimsRequest generates requests for GetLocalClaims
func NewGetLocalClaimsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/claim-dialects/local/claims")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetLocalClaimsWithResponse request
	GetLocalClaimsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLocalClaimsResponse, error)
}

type GetLocalClaimsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LocalClaimRes
	JSON401      *Unauthorized
	JSON500      *ServerError
	JSON501      *NotImplemented
}

// Status returns HTTPResponse.Status
func (r GetLocalClaimsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocalClaimsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetLocalClaimsWithResponse request returning *GetLocalClaimsResponse
func (c *ClientWithResponses) GetLocalClaimsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLocalClaimsResponse, error) {
	rsp, err := c.GetLocalClaims(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocalClaimsResponse(rsp)
}

// ParseGetLocalClaimsResponse parses an HTTP response from a GetLocalClaimsWithResponse call
func ParseGetLocalClaimsResponse(rsp *http.Response) (*GetLocalClaimsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocalClaimsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LocalClaimRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}
