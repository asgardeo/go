// Package internal provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package internal

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"gopkg.in/yaml.v2"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
	OAuth2Scopes    = "OAuth2.Scopes"
)

// Defines values for AuthenticationTypeType.
const (
	AuthenticationTypeTypeAPIKEY AuthenticationTypeType = "API_KEY"
	AuthenticationTypeTypeBASIC  AuthenticationTypeType = "BASIC"
	AuthenticationTypeTypeBEARER AuthenticationTypeType = "BEARER"
	AuthenticationTypeTypeNONE   AuthenticationTypeType = "NONE"
)

// Defines values for FederatedAuthenticatorDefinedBy.
const (
	FederatedAuthenticatorDefinedBySYSTEM FederatedAuthenticatorDefinedBy = "SYSTEM"
	FederatedAuthenticatorDefinedByUSER   FederatedAuthenticatorDefinedBy = "USER"
)

// Defines values for FederatedAuthenticatorListItemDefinedBy.
const (
	FederatedAuthenticatorListItemDefinedBySYSTEM FederatedAuthenticatorListItemDefinedBy = "SYSTEM"
	FederatedAuthenticatorListItemDefinedByUSER   FederatedAuthenticatorListItemDefinedBy = "USER"
)

// Defines values for FederatedAuthenticatorPUTRequestDefinedBy.
const (
	FederatedAuthenticatorPUTRequestDefinedBySYSTEM FederatedAuthenticatorPUTRequestDefinedBy = "SYSTEM"
	FederatedAuthenticatorPUTRequestDefinedByUSER   FederatedAuthenticatorPUTRequestDefinedBy = "USER"
)

// Defines values for IdentityProviderTemplateCategory.
const (
	IdentityProviderTemplateCategoryCUSTOM  IdentityProviderTemplateCategory = "CUSTOM"
	IdentityProviderTemplateCategoryDEFAULT IdentityProviderTemplateCategory = "DEFAULT"
)

// Defines values for IdentityProviderTemplateListItemCategory.
const (
	IdentityProviderTemplateListItemCategoryCUSTOM  IdentityProviderTemplateListItemCategory = "CUSTOM"
	IdentityProviderTemplateListItemCategoryDEFAULT IdentityProviderTemplateListItemCategory = "DEFAULT"
)

// Defines values for JustInTimeProvisioningAttributeSyncMethod.
const (
	JustInTimeProvisioningAttributeSyncMethodNONE          JustInTimeProvisioningAttributeSyncMethod = "NONE"
	JustInTimeProvisioningAttributeSyncMethodOVERRIDEALL   JustInTimeProvisioningAttributeSyncMethod = "OVERRIDE_ALL"
	JustInTimeProvisioningAttributeSyncMethodPRESERVELOCAL JustInTimeProvisioningAttributeSyncMethod = "PRESERVE_LOCAL"
)

// Defines values for JustInTimeProvisioningScheme.
const (
	PROMPTCONSENT                 JustInTimeProvisioningScheme = "PROMPT_CONSENT"
	PROMPTPASSWORDCONSENT         JustInTimeProvisioningScheme = "PROMPT_PASSWORD_CONSENT"
	PROMPTUSERNAMEPASSWORDCONSENT JustInTimeProvisioningScheme = "PROMPT_USERNAME_PASSWORD_CONSENT"
	PROVISIONSILENTLY             JustInTimeProvisioningScheme = "PROVISION_SILENTLY"
)

// Defines values for MetaFederatedAuthenticatorDefinedBy.
const (
	MetaFederatedAuthenticatorDefinedBySYSTEM MetaFederatedAuthenticatorDefinedBy = "SYSTEM"
	MetaFederatedAuthenticatorDefinedByUSER   MetaFederatedAuthenticatorDefinedBy = "USER"
)

// Defines values for MetaFederatedAuthenticatorListItemDefinedBy.
const (
	SYSTEM MetaFederatedAuthenticatorListItemDefinedBy = "SYSTEM"
	USER   MetaFederatedAuthenticatorListItemDefinedBy = "USER"
)

// Defines values for MetaPropertyType.
const (
	BOOLEAN MetaPropertyType = "BOOLEAN"
	INTEGER MetaPropertyType = "INTEGER"
	STRING  MetaPropertyType = "STRING"
)

// Defines values for PatchOperation.
const (
	ADD     PatchOperation = "ADD"
	REMOVE  PatchOperation = "REMOVE"
	REPLACE PatchOperation = "REPLACE"
)

// Defines values for FileTypeHeaderParam.
const (
	FileTypeHeaderParamApplicationjson  FileTypeHeaderParam = "application/json"
	FileTypeHeaderParamApplicationxYaml FileTypeHeaderParam = "application/x-yaml"
	FileTypeHeaderParamApplicationxml   FileTypeHeaderParam = "application/xml"
	FileTypeHeaderParamApplicationyaml  FileTypeHeaderParam = "application/yaml"
	FileTypeHeaderParamTextjson         FileTypeHeaderParam = "text/json"
	FileTypeHeaderParamTextxml          FileTypeHeaderParam = "text/xml"
	FileTypeHeaderParamTextyaml         FileTypeHeaderParam = "text/yaml"
)

// Defines values for SortOrderQueryParam.
const (
	SortOrderQueryParamAsc  SortOrderQueryParam = "asc"
	SortOrderQueryParamDesc SortOrderQueryParam = "desc"
)

// Defines values for ExportIDPToFileParamsAccept.
const (
	ExportIDPToFileParamsAcceptApplicationjson  ExportIDPToFileParamsAccept = "application/json"
	ExportIDPToFileParamsAcceptApplicationxYaml ExportIDPToFileParamsAccept = "application/x-yaml"
	ExportIDPToFileParamsAcceptApplicationxml   ExportIDPToFileParamsAccept = "application/xml"
	ExportIDPToFileParamsAcceptApplicationyaml  ExportIDPToFileParamsAccept = "application/yaml"
	ExportIDPToFileParamsAcceptTextjson         ExportIDPToFileParamsAccept = "text/json"
	ExportIDPToFileParamsAcceptTextxml          ExportIDPToFileParamsAccept = "text/xml"
	ExportIDPToFileParamsAcceptTextyaml         ExportIDPToFileParamsAccept = "text/yaml"
)

// Defines values for GetTrustedTokenIssuersParamsSortOrder.
const (
	GetTrustedTokenIssuersParamsSortOrderAsc  GetTrustedTokenIssuersParamsSortOrder = "asc"
	GetTrustedTokenIssuersParamsSortOrderDesc GetTrustedTokenIssuersParamsSortOrder = "desc"
)

// AssociationRequest defines model for AssociationRequest.
type AssociationRequest struct {
	IsEnabled       *bool     `json:"isEnabled,omitempty"`
	LookupAttribute *[]string `json:"lookupAttribute,omitempty"`
}

// AssociationResponse defines model for AssociationResponse.
type AssociationResponse struct {
	IsEnabled       *bool     `json:"isEnabled,omitempty"`
	LookupAttribute *[]string `json:"lookupAttribute,omitempty"`
}

// AuthenticationType defines model for AuthenticationType.
type AuthenticationType struct {
	Properties *map[string]interface{} `json:"properties,omitempty"`
	Type       AuthenticationTypeType  `json:"type"`
}

// AuthenticationTypeType defines model for AuthenticationType.Type.
type AuthenticationTypeType string

// Certificate defines model for Certificate.
type Certificate struct {
	Certificates *[]string `json:"certificates,omitempty"`
	JwksUri      *string   `json:"jwksUri,omitempty"`
}

// Claim defines model for Claim.
type Claim struct {
	DisplayName *string `json:"displayName,omitempty"`
	Id          *string `json:"id,omitempty"`
	Uri         string  `json:"uri"`
}

// ClaimMapping defines model for ClaimMapping.
type ClaimMapping struct {
	IdpClaim   *string `json:"idpClaim,omitempty"`
	LocalClaim *Claim  `json:"localClaim,omitempty"`
}

// Claims defines model for Claims.
type Claims struct {
	Mappings           *[]ClaimMapping      `json:"mappings,omitempty"`
	ProvisioningClaims *[]ProvisioningClaim `json:"provisioningClaims,omitempty"`
	RoleClaim          *Claim               `json:"roleClaim,omitempty"`
	UserIdClaim        *Claim               `json:"userIdClaim,omitempty"`
}

// ConnectedApp defines model for ConnectedApp.
type ConnectedApp struct {
	AppId *string `json:"appId,omitempty"`
	Self  *string `json:"self,omitempty"`
}

// ConnectedApps defines model for ConnectedApps.
type ConnectedApps struct {
	ConnectedApps *[]ConnectedApp `json:"connectedApps,omitempty"`
	Count         *int            `json:"count,omitempty"`
	Links         *[]Link         `json:"links,omitempty"`
	StartIndex    *int            `json:"startIndex,omitempty"`
	TotalResults  *int            `json:"totalResults,omitempty"`
}

// Endpoint defines model for Endpoint.
type Endpoint struct {
	Authentication AuthenticationType `json:"authentication"`
	Uri            string             `json:"uri"`
}

// Error defines model for Error.
type Error struct {
	Code        *string `json:"code,omitempty"`
	Description *string `json:"description,omitempty"`
	Message     *string `json:"message,omitempty"`
	TraceId     *string `json:"traceId,omitempty"`
}

// FederatedAuthenticator defines model for FederatedAuthenticator.
type FederatedAuthenticator struct {
	AuthenticatorId string                           `json:"authenticatorId"`
	DefinedBy       *FederatedAuthenticatorDefinedBy `json:"definedBy,omitempty"`
	Endpoint        *Endpoint                        `json:"endpoint,omitempty"`
	IsDefault       *bool                            `json:"isDefault,omitempty"`
	IsEnabled       *bool                            `json:"isEnabled,omitempty"`
	Name            *string                          `json:"name,omitempty"`
	Properties      *[]Property                      `json:"properties,omitempty"`
	Tags            *[]string                        `json:"tags,omitempty"`
}

// FederatedAuthenticatorDefinedBy defines model for FederatedAuthenticator.DefinedBy.
type FederatedAuthenticatorDefinedBy string

// FederatedAuthenticatorListItem defines model for FederatedAuthenticatorListItem.
type FederatedAuthenticatorListItem struct {
	AuthenticatorId *string                                  `json:"authenticatorId,omitempty"`
	DefinedBy       *FederatedAuthenticatorListItemDefinedBy `json:"definedBy,omitempty"`
	IsEnabled       *bool                                    `json:"isEnabled,omitempty"`
	Name            *string                                  `json:"name,omitempty"`
	Self            *string                                  `json:"self,omitempty"`
	Tags            *[]string                                `json:"tags,omitempty"`
}

// FederatedAuthenticatorListItemDefinedBy defines model for FederatedAuthenticatorListItem.DefinedBy.
type FederatedAuthenticatorListItemDefinedBy string

// FederatedAuthenticatorListResponse defines model for FederatedAuthenticatorListResponse.
type FederatedAuthenticatorListResponse struct {
	Authenticators         *[]FederatedAuthenticatorListItem `json:"authenticators,omitempty"`
	DefaultAuthenticatorId *string                           `json:"defaultAuthenticatorId,omitempty"`
}

// FederatedAuthenticatorPUTRequest defines model for FederatedAuthenticatorPUTRequest.
type FederatedAuthenticatorPUTRequest struct {
	AuthenticatorId *string                                    `json:"authenticatorId,omitempty"`
	DefinedBy       *FederatedAuthenticatorPUTRequestDefinedBy `json:"definedBy,omitempty"`
	Endpoint        *Endpoint                                  `json:"endpoint,omitempty"`
	IsDefault       *bool                                      `json:"isDefault,omitempty"`
	IsEnabled       *bool                                      `json:"isEnabled,omitempty"`
	Name            *string                                    `json:"name,omitempty"`
	Properties      *[]Property                                `json:"properties,omitempty"`
}

// FederatedAuthenticatorPUTRequestDefinedBy defines model for FederatedAuthenticatorPUTRequest.DefinedBy.
type FederatedAuthenticatorPUTRequestDefinedBy string

// FederatedAuthenticatorRequest defines model for FederatedAuthenticatorRequest.
type FederatedAuthenticatorRequest struct {
	// Authenticators Includes the list of federated authenticators supported by the respective identity provider. This should include the authenticator specified as the defaultAuthenticator.
	Authenticators *[]FederatedAuthenticator `json:"authenticators,omitempty"`

	// DefaultAuthenticatorId ID of the federated authenticator to be used as the default authenticator for the respective identity provider.
	DefaultAuthenticatorId string `json:"defaultAuthenticatorId"`
}

// FileUpload defines model for FileUpload.
type FileUpload struct {
	// File file to upload
	File *openapi_types.File `json:"file,omitempty"`
}

// IdPGroup Represents an IdP group supported by an Identity Provider.
type IdPGroup struct {
	// Id UUID of the IdP group
	Id *string `json:"id,omitempty"`

	// Name Name of the IdP group
	Name string `json:"name"`
}

// IdPGroupsConfig IdP groups supported by the IdP.
type IdPGroupsConfig = []IdPGroup

// IdentityProviderListItem defines model for IdentityProviderListItem.
type IdentityProviderListItem struct {
	Alias                   *string                             `json:"alias,omitempty"`
	Certificate             *Certificate                        `json:"certificate,omitempty"`
	Claims                  *Claims                             `json:"claims,omitempty"`
	Description             *string                             `json:"description,omitempty"`
	FederatedAuthenticators *FederatedAuthenticatorListResponse `json:"federatedAuthenticators,omitempty"`

	// Groups IdP groups supported by the IdP.
	Groups              *IdPGroupsConfig      `json:"groups,omitempty"`
	HomeRealmIdentifier *string               `json:"homeRealmIdentifier,omitempty"`
	Id                  *string               `json:"id,omitempty"`
	Image               *string               `json:"image,omitempty"`
	IsEnabled           *bool                 `json:"isEnabled,omitempty"`
	IsFederationHub     *bool                 `json:"isFederationHub,omitempty"`
	IsPrimary           *bool                 `json:"isPrimary,omitempty"`
	Name                *string               `json:"name,omitempty"`
	Provisioning        *ProvisioningResponse `json:"provisioning,omitempty"`
	Roles               *Roles                `json:"roles,omitempty"`
	Self                *string               `json:"self,omitempty"`
}

// IdentityProviderListResponse defines model for IdentityProviderListResponse.
type IdentityProviderListResponse struct {
	Count             *int                        `json:"count,omitempty"`
	IdentityProviders *[]IdentityProviderListItem `json:"identityProviders,omitempty"`
	Links             *[]Link                     `json:"links,omitempty"`
	StartIndex        *int                        `json:"startIndex,omitempty"`
	TotalResults      *int                        `json:"totalResults,omitempty"`
}

// IdentityProviderPOSTRequest defines model for IdentityProviderPOSTRequest.
type IdentityProviderPOSTRequest struct {
	Alias                   *string                        `json:"alias,omitempty"`
	Certificate             *Certificate                   `json:"certificate,omitempty"`
	Claims                  *Claims                        `json:"claims,omitempty"`
	Description             *string                        `json:"description,omitempty"`
	FederatedAuthenticators *FederatedAuthenticatorRequest `json:"federatedAuthenticators,omitempty"`

	// Groups IdP groups supported by the IdP.
	Groups              *IdPGroupsConfig     `json:"groups,omitempty"`
	HomeRealmIdentifier *string              `json:"homeRealmIdentifier,omitempty"`
	IdpIssuerName       *string              `json:"idpIssuerName,omitempty"`
	Image               *string              `json:"image,omitempty"`
	ImplicitAssociation *AssociationRequest  `json:"implicitAssociation,omitempty"`
	IsFederationHub     *bool                `json:"isFederationHub,omitempty"`
	IsPrimary           *bool                `json:"isPrimary,omitempty"`
	Name                string               `json:"name"`
	Provisioning        *ProvisioningRequest `json:"provisioning,omitempty"`
	Roles               *Roles               `json:"roles,omitempty"`
	TemplateId          *string              `json:"templateId,omitempty"`
}

// IdentityProviderResponse defines model for IdentityProviderResponse.
type IdentityProviderResponse struct {
	Alias                   *string                             `json:"alias,omitempty"`
	Certificate             *Certificate                        `json:"certificate,omitempty"`
	Claims                  *Claims                             `json:"claims,omitempty"`
	Description             *string                             `json:"description,omitempty"`
	FederatedAuthenticators *FederatedAuthenticatorListResponse `json:"federatedAuthenticators,omitempty"`

	// Groups IdP groups supported by the IdP.
	Groups              *IdPGroupsConfig      `json:"groups,omitempty"`
	HomeRealmIdentifier *string               `json:"homeRealmIdentifier,omitempty"`
	Id                  *string               `json:"id,omitempty"`
	IdpIssuerName       *string               `json:"idpIssuerName,omitempty"`
	Image               *string               `json:"image,omitempty"`
	ImplicitAssociation *AssociationResponse  `json:"implicitAssociation,omitempty"`
	IsEnabled           *bool                 `json:"isEnabled,omitempty"`
	IsFederationHub     *bool                 `json:"isFederationHub,omitempty"`
	IsPrimary           *bool                 `json:"isPrimary,omitempty"`
	Name                *string               `json:"name,omitempty"`
	Provisioning        *ProvisioningResponse `json:"provisioning,omitempty"`
	Roles               *Roles                `json:"roles,omitempty"`
	TemplateId          *string               `json:"templateId,omitempty"`
}

// IdentityProviderTemplate defines model for IdentityProviderTemplate.
type IdentityProviderTemplate struct {
	Category     *IdentityProviderTemplateCategory `json:"category,omitempty"`
	Description  *string                           `json:"description,omitempty"`
	DisplayOrder *int                              `json:"displayOrder,omitempty"`
	Id           *string                           `json:"id,omitempty"`
	Idp          IdentityProviderPOSTRequest       `json:"idp"`
	Image        *string                           `json:"image,omitempty"`
	Name         string                            `json:"name"`
}

// IdentityProviderTemplateCategory defines model for IdentityProviderTemplate.Category.
type IdentityProviderTemplateCategory string

// IdentityProviderTemplateListItem defines model for IdentityProviderTemplateListItem.
type IdentityProviderTemplateListItem struct {
	Category     *IdentityProviderTemplateListItemCategory `json:"category,omitempty"`
	Description  *string                                   `json:"description,omitempty"`
	DisplayOrder *int                                      `json:"displayOrder,omitempty"`
	Id           *string                                   `json:"id,omitempty"`
	Image        *string                                   `json:"image,omitempty"`
	Name         *string                                   `json:"name,omitempty"`
	Self         *string                                   `json:"self,omitempty"`
	Services     *[]Service                                `json:"services,omitempty"`
}

// IdentityProviderTemplateListItemCategory defines model for IdentityProviderTemplateListItem.Category.
type IdentityProviderTemplateListItemCategory string

// IdentityProviderTemplateListResponse defines model for IdentityProviderTemplateListResponse.
type IdentityProviderTemplateListResponse struct {
	Count        *int                                `json:"count,omitempty"`
	Links        *[]Link                             `json:"links,omitempty"`
	StartIndex   *int                                `json:"startIndex,omitempty"`
	Templates    *[]IdentityProviderTemplateListItem `json:"templates,omitempty"`
	TotalResults *int                                `json:"totalResults,omitempty"`
}

// JustInTimeProvisioning defines model for JustInTimeProvisioning.
type JustInTimeProvisioning struct {
	AssociateLocalUser  *bool                                      `json:"associateLocalUser,omitempty"`
	AttributeSyncMethod *JustInTimeProvisioningAttributeSyncMethod `json:"attributeSyncMethod,omitempty"`
	IsEnabled           bool                                       `json:"isEnabled"`
	Scheme              *JustInTimeProvisioningScheme              `json:"scheme,omitempty"`
	Userstore           *string                                    `json:"userstore,omitempty"`
}

// JustInTimeProvisioningAttributeSyncMethod defines model for JustInTimeProvisioning.AttributeSyncMethod.
type JustInTimeProvisioningAttributeSyncMethod string

// JustInTimeProvisioningScheme defines model for JustInTimeProvisioning.Scheme.
type JustInTimeProvisioningScheme string

// Link defines model for Link.
type Link struct {
	// Href Path to the target resource.
	Href *string `json:"href,omitempty"`

	// Rel Describes how the current context is related to the target resource.
	Rel *string `json:"rel,omitempty"`
}

// MetaFederatedAuthenticator defines model for MetaFederatedAuthenticator.
type MetaFederatedAuthenticator struct {
	AuthenticatorId *string                              `json:"authenticatorId,omitempty"`
	DefinedBy       *MetaFederatedAuthenticatorDefinedBy `json:"definedBy,omitempty"`
	DisplayName     *string                              `json:"displayName,omitempty"`
	Name            *string                              `json:"name,omitempty"`
	Properties      *[]MetaProperty                      `json:"properties,omitempty"`
	Tags            *[]string                            `json:"tags,omitempty"`
}

// MetaFederatedAuthenticatorDefinedBy defines model for MetaFederatedAuthenticator.DefinedBy.
type MetaFederatedAuthenticatorDefinedBy string

// MetaFederatedAuthenticatorListItem defines model for MetaFederatedAuthenticatorListItem.
type MetaFederatedAuthenticatorListItem struct {
	AuthenticatorId *string                                      `json:"authenticatorId,omitempty"`
	DefinedBy       *MetaFederatedAuthenticatorListItemDefinedBy `json:"definedBy,omitempty"`
	Name            *string                                      `json:"name,omitempty"`
	Self            *string                                      `json:"self,omitempty"`
	Tags            *[]string                                    `json:"tags,omitempty"`
}

// MetaFederatedAuthenticatorListItemDefinedBy defines model for MetaFederatedAuthenticatorListItem.DefinedBy.
type MetaFederatedAuthenticatorListItemDefinedBy string

// MetaOutboundConnector defines model for MetaOutboundConnector.
type MetaOutboundConnector struct {
	BlockingEnabled *bool           `json:"blockingEnabled,omitempty"`
	ConnectorId     *string         `json:"connectorId,omitempty"`
	DisplayName     *string         `json:"displayName,omitempty"`
	Name            *string         `json:"name,omitempty"`
	Properties      *[]MetaProperty `json:"properties,omitempty"`
	RulesEnabled    *bool           `json:"rulesEnabled,omitempty"`
}

// MetaOutboundConnectorListItem defines model for MetaOutboundConnectorListItem.
type MetaOutboundConnectorListItem struct {
	ConnectorId *string `json:"connectorId,omitempty"`
	Name        *string `json:"name,omitempty"`
	Self        *string `json:"self,omitempty"`
}

// MetaProperty defines model for MetaProperty.
type MetaProperty struct {
	DefaultValue   *string           `json:"defaultValue,omitempty"`
	Description    *string           `json:"description,omitempty"`
	DisplayName    *string           `json:"displayName,omitempty"`
	DisplayOrder   *int              `json:"displayOrder,omitempty"`
	IsConfidential *bool             `json:"isConfidential,omitempty"`
	IsMandatory    *bool             `json:"isMandatory,omitempty"`
	Key            string            `json:"key"`
	Options        *[]string         `json:"options,omitempty"`
	Regex          *string           `json:"regex,omitempty"`
	SubProperties  *[]MetaProperty   `json:"subProperties,omitempty"`
	Type           *MetaPropertyType `json:"type,omitempty"`
}

// MetaPropertyType defines model for MetaProperty.Type.
type MetaPropertyType string

// OutboundConnector defines model for OutboundConnector.
type OutboundConnector struct {
	BlockingEnabled *bool       `json:"blockingEnabled,omitempty"`
	ConnectorId     string      `json:"connectorId"`
	IsDefault       *bool       `json:"isDefault,omitempty"`
	IsEnabled       *bool       `json:"isEnabled,omitempty"`
	Name            *string     `json:"name,omitempty"`
	Properties      *[]Property `json:"properties,omitempty"`
	RulesEnabled    *bool       `json:"rulesEnabled,omitempty"`
}

// OutboundConnectorListItem defines model for OutboundConnectorListItem.
type OutboundConnectorListItem struct {
	ConnectorId *string `json:"connectorId,omitempty"`
	IsEnabled   *bool   `json:"isEnabled,omitempty"`
	Name        *string `json:"name,omitempty"`
	Self        *string `json:"self,omitempty"`
}

// OutboundConnectorListResponse defines model for OutboundConnectorListResponse.
type OutboundConnectorListResponse struct {
	Connectors         *[]OutboundConnectorListItem `json:"connectors,omitempty"`
	DefaultConnectorId *string                      `json:"defaultConnectorId,omitempty"`
}

// OutboundConnectorPUTRequest defines model for OutboundConnectorPUTRequest.
type OutboundConnectorPUTRequest struct {
	BlockingEnabled *bool       `json:"blockingEnabled,omitempty"`
	ConnectorId     *string     `json:"connectorId,omitempty"`
	IsDefault       *bool       `json:"isDefault,omitempty"`
	IsEnabled       *bool       `json:"isEnabled,omitempty"`
	Name            *string     `json:"name,omitempty"`
	Properties      *[]Property `json:"properties,omitempty"`
	RulesEnabled    *bool       `json:"rulesEnabled,omitempty"`
}

// OutboundProvisioningRequest defines model for OutboundProvisioningRequest.
type OutboundProvisioningRequest struct {
	Connectors         *[]OutboundConnector `json:"connectors,omitempty"`
	DefaultConnectorId string               `json:"defaultConnectorId"`
}

// Patch A JSONPatch as defined by RFC 6902. Patch operation is supported only for root level attributes of an identity provider.
type Patch struct {
	// Operation The operation to be performed.
	Operation PatchOperation `json:"operation"`

	// Path A JSON-Pointer
	Path string `json:"path"`

	// Value The value to be used within the operations.
	Value *string `json:"value,omitempty"`
}

// PatchOperation The operation to be performed.
type PatchOperation string

// PatchRequest defines model for PatchRequest.
type PatchRequest = []Patch

// Property defines model for Property.
type Property struct {
	Key   string  `json:"key"`
	Value *string `json:"value,omitempty"`
}

// ProvisioningClaim defines model for ProvisioningClaim.
type ProvisioningClaim struct {
	Claim        *Claim  `json:"claim,omitempty"`
	DefaultValue *string `json:"defaultValue,omitempty"`
}

// ProvisioningRequest defines model for ProvisioningRequest.
type ProvisioningRequest struct {
	Jit                *JustInTimeProvisioning      `json:"jit,omitempty"`
	OutboundConnectors *OutboundProvisioningRequest `json:"outboundConnectors,omitempty"`
}

// ProvisioningResponse defines model for ProvisioningResponse.
type ProvisioningResponse struct {
	Jit                *JustInTimeProvisioning        `json:"jit,omitempty"`
	OutboundConnectors *OutboundConnectorListResponse `json:"outboundConnectors,omitempty"`
}

// RoleMapping defines model for RoleMapping.
type RoleMapping struct {
	IdpRole   *string `json:"idpRole,omitempty"`
	LocalRole *string `json:"localRole,omitempty"`
}

// Roles defines model for Roles.
type Roles struct {
	Mappings                  *[]RoleMapping `json:"mappings,omitempty"`
	OutboundProvisioningRoles *[]string      `json:"outboundProvisioningRoles,omitempty"`
}

// Service defines model for Service.
type Service = string

// TrustedTokenIssuerPOSTRequest defines model for TrustedTokenIssuerPOSTRequest.
type TrustedTokenIssuerPOSTRequest struct {
	Alias       *string     `json:"alias,omitempty"`
	Certificate Certificate `json:"certificate"`
	Claims      *Claims     `json:"claims,omitempty"`
	Description *string     `json:"description,omitempty"`
	Image       *string     `json:"image,omitempty"`
	Issuer      string      `json:"issuer"`
	Name        string      `json:"name"`
	TemplateId  *string     `json:"templateId,omitempty"`
}

// TrustedTokenIssuerResponse defines model for TrustedTokenIssuerResponse.
type TrustedTokenIssuerResponse struct {
	Alias                   *string                             `json:"alias,omitempty"`
	Certificate             *Certificate                        `json:"certificate,omitempty"`
	Claims                  *Claims                             `json:"claims,omitempty"`
	Description             *string                             `json:"description,omitempty"`
	FederatedAuthenticators *FederatedAuthenticatorListResponse `json:"federatedAuthenticators,omitempty"`

	// Groups IdP groups supported by the IdP.
	Groups              *IdPGroupsConfig      `json:"groups,omitempty"`
	HomeRealmIdentifier *string               `json:"homeRealmIdentifier,omitempty"`
	Id                  *string               `json:"id,omitempty"`
	Image               *string               `json:"image,omitempty"`
	IsEnabled           *bool                 `json:"isEnabled,omitempty"`
	IsFederationHub     *bool                 `json:"isFederationHub,omitempty"`
	IsPrimary           *bool                 `json:"isPrimary,omitempty"`
	Issuer              *string               `json:"issuer,omitempty"`
	Name                *string               `json:"name,omitempty"`
	Provisioning        *ProvisioningResponse `json:"provisioning,omitempty"`
	Roles               *Roles                `json:"roles,omitempty"`
	TemplateId          *string               `json:"templateId,omitempty"`
}

// ExcludeSecretsQueryParam defines model for excludeSecretsQueryParam.
type ExcludeSecretsQueryParam = bool

// FileTypeHeaderParam defines model for fileTypeHeaderParam.
type FileTypeHeaderParam string

// FilterQueryParam defines model for filterQueryParam.
type FilterQueryParam = string

// ForceQueryParam defines model for forceQueryParam.
type ForceQueryParam = bool

// LimitQueryParam defines model for limitQueryParam.
type LimitQueryParam = int32

// OffsetQueryParam defines model for offsetQueryParam.
type OffsetQueryParam = int32

// RequiredAttributesQueryParam defines model for requiredAttributesQueryParam.
type RequiredAttributesQueryParam = string

// SortByQueryParam defines model for sortByQueryParam.
type SortByQueryParam = string

// SortOrderQueryParam defines model for sortOrderQueryParam.
type SortOrderQueryParam string

// GetIDPsParams defines parameters for GetIDPs.
type GetIDPsParams struct {
	// Limit Maximum number of records to return.
	Limit *LimitQueryParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of records to skip for pagination.
	Offset *OffsetQueryParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Filter Condition to filter the retrieval of records. Supports 'sw', 'co', 'ew' and 'eq' operations and also complex queries with 'and' operations. E.g. /identity-providers?filter=name+sw+"google"+and+isEnabled+eq+"true"
	Filter *FilterQueryParam `form:"filter,omitempty" json:"filter,omitempty"`

	// RequiredAttributes Specifies the required parameters in the response.
	RequiredAttributes *RequiredAttributesQueryParam `form:"requiredAttributes,omitempty" json:"requiredAttributes,omitempty"`
}

// GetIDPTemplatesParams defines parameters for GetIDPTemplates.
type GetIDPTemplatesParams struct {
	// Limit Maximum number of records to return.
	Limit *LimitQueryParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of records to skip for pagination.
	Offset *OffsetQueryParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Filter Condition to filter the retrieval of records. Supports 'sw', 'co', 'ew' and 'eq' operations and also complex queries with 'and' operations. E.g. /identity-providers?filter=name+sw+"google"+and+isEnabled+eq+"true"
	Filter *FilterQueryParam `form:"filter,omitempty" json:"filter,omitempty"`
}

// DeleteIDPParams defines parameters for DeleteIDP.
type DeleteIDPParams struct {
	// Force Enforces the forceful deletion of an identity provider, federated authenticator or an outbound provisioning connector even though it is referred by a service provider.
	Force *ForceQueryParam `form:"force,omitempty" json:"force,omitempty"`
}

// GetConnectedAppsParams defines parameters for GetConnectedApps.
type GetConnectedAppsParams struct {
	// Limit Maximum number of records to return.
	Limit *LimitQueryParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of records to skip for pagination.
	Offset *OffsetQueryParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ExportIDPToFileParams defines parameters for ExportIDPToFile.
type ExportIDPToFileParams struct {
	// ExcludeSecrets Specifies whether to exclude secrets when exporting an identity provider.
	ExcludeSecrets *ExcludeSecretsQueryParam `form:"excludeSecrets,omitempty" json:"excludeSecrets,omitempty"`

	// Accept Content type of the file.
	Accept *ExportIDPToFileParamsAccept `json:"Accept,omitempty"`
}

// ExportIDPToFileParamsAccept defines parameters for ExportIDPToFile.
type ExportIDPToFileParamsAccept string

// GetTrustedTokenIssuersParams defines parameters for GetTrustedTokenIssuers.
type GetTrustedTokenIssuersParams struct {
	// Limit Maximum number of records to return.
	Limit *LimitQueryParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of records to skip for pagination.
	Offset *OffsetQueryParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Filter Condition to filter the retrieval of records. Supports 'sw', 'co', 'ew' and 'eq' operations and also complex queries with 'and' operations. E.g. /identity-providers?filter=name+sw+"google"+and+isEnabled+eq+"true"
	Filter *FilterQueryParam `form:"filter,omitempty" json:"filter,omitempty"`

	// SortBy Attribute by which the retrieved records should be sorted. Currently sorting through _<b>domainName<b>_ only supported.
	SortBy *SortByQueryParam `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// SortOrder Define the order in which the retrieved tenants should be sorted.
	SortOrder *GetTrustedTokenIssuersParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// RequiredAttributes Specifies the required parameters in the response.
	RequiredAttributes *RequiredAttributesQueryParam `form:"requiredAttributes,omitempty" json:"requiredAttributes,omitempty"`
}

// GetTrustedTokenIssuersParamsSortOrder defines parameters for GetTrustedTokenIssuers.
type GetTrustedTokenIssuersParamsSortOrder string

// DeleteTrustedTokenIssuerParams defines parameters for DeleteTrustedTokenIssuer.
type DeleteTrustedTokenIssuerParams struct {
	// Force Enforces the forceful deletion of an identity provider, federated authenticator or an outbound provisioning connector even though it is referred by a service provider.
	Force *ForceQueryParam `form:"force,omitempty" json:"force,omitempty"`
}

// AddIDPJSONRequestBody defines body for AddIDP for application/json ContentType.
type AddIDPJSONRequestBody = IdentityProviderPOSTRequest

// ImportIDPFromFileMultipartRequestBody defines body for ImportIDPFromFile for multipart/form-data ContentType.
type ImportIDPFromFileMultipartRequestBody = FileUpload

// AddIDPTemplateJSONRequestBody defines body for AddIDPTemplate for application/json ContentType.
type AddIDPTemplateJSONRequestBody = IdentityProviderTemplate

// UpdateIDPTemplateJSONRequestBody defines body for UpdateIDPTemplate for application/json ContentType.
type UpdateIDPTemplateJSONRequestBody = IdentityProviderTemplate

// PatchIDPJSONRequestBody defines body for PatchIDP for application/json ContentType.
type PatchIDPJSONRequestBody = PatchRequest

// UpdateClaimConfigJSONRequestBody defines body for UpdateClaimConfig for application/json ContentType.
type UpdateClaimConfigJSONRequestBody = Claims

// UpdateFederatedAuthenticatorsJSONRequestBody defines body for UpdateFederatedAuthenticators for application/json ContentType.
type UpdateFederatedAuthenticatorsJSONRequestBody = FederatedAuthenticatorRequest

// UpdateFederatedAuthenticatorJSONRequestBody defines body for UpdateFederatedAuthenticator for application/json ContentType.
type UpdateFederatedAuthenticatorJSONRequestBody = FederatedAuthenticatorPUTRequest

// UpdateGroupConfigJSONRequestBody defines body for UpdateGroupConfig for application/json ContentType.
type UpdateGroupConfigJSONRequestBody = IdPGroupsConfig

// UpdateFederatedAssociationConfigJSONRequestBody defines body for UpdateFederatedAssociationConfig for application/json ContentType.
type UpdateFederatedAssociationConfigJSONRequestBody = AssociationRequest

// UpdateIDPFromFileMultipartRequestBody defines body for UpdateIDPFromFile for multipart/form-data ContentType.
type UpdateIDPFromFileMultipartRequestBody = FileUpload

// UpdateJITConfigJSONRequestBody defines body for UpdateJITConfig for application/json ContentType.
type UpdateJITConfigJSONRequestBody = JustInTimeProvisioning

// UpdateOutboundConnectorsJSONRequestBody defines body for UpdateOutboundConnectors for application/json ContentType.
type UpdateOutboundConnectorsJSONRequestBody = OutboundProvisioningRequest

// UpdateOutboundConnectorJSONRequestBody defines body for UpdateOutboundConnector for application/json ContentType.
type UpdateOutboundConnectorJSONRequestBody = OutboundConnectorPUTRequest

// UpdateRoleConfigJSONRequestBody defines body for UpdateRoleConfig for application/json ContentType.
type UpdateRoleConfigJSONRequestBody = Roles

// AddTrustedTokenIssuerJSONRequestBody defines body for AddTrustedTokenIssuer for application/json ContentType.
type AddTrustedTokenIssuerJSONRequestBody = TrustedTokenIssuerPOSTRequest

// PatchTrustedTokenIssuerJSONRequestBody defines body for PatchTrustedTokenIssuer for application/json ContentType.
type PatchTrustedTokenIssuerJSONRequestBody = PatchRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetIDPs request
	GetIDPs(ctx context.Context, params *GetIDPsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddIDPWithBody request with any body
	AddIDPWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddIDP(ctx context.Context, body AddIDPJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportIDPFromFileWithBody request with any body
	ImportIDPFromFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetaFederatedAuthenticators request
	GetMetaFederatedAuthenticators(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetaFederatedAuthenticator request
	GetMetaFederatedAuthenticator(ctx context.Context, federatedAuthenticatorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetaOutboundConnectors request
	GetMetaOutboundConnectors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetaOutboundConnector request
	GetMetaOutboundConnector(ctx context.Context, outboundProvisioningConnectorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIDPTemplates request
	GetIDPTemplates(ctx context.Context, params *GetIDPTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddIDPTemplateWithBody request with any body
	AddIDPTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddIDPTemplate(ctx context.Context, body AddIDPTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIDPTemplate request
	DeleteIDPTemplate(ctx context.Context, templateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIDPTemplate request
	GetIDPTemplate(ctx context.Context, templateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIDPTemplateWithBody request with any body
	UpdateIDPTemplateWithBody(ctx context.Context, templateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIDPTemplate(ctx context.Context, templateId string, body UpdateIDPTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIDP request
	DeleteIDP(ctx context.Context, identityProviderId string, params *DeleteIDPParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIDP request
	GetIDP(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchIDPWithBody request with any body
	PatchIDPWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchIDP(ctx context.Context, identityProviderId string, body PatchIDPJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClaimConfig request
	GetClaimConfig(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateClaimConfigWithBody request with any body
	UpdateClaimConfigWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateClaimConfig(ctx context.Context, identityProviderId string, body UpdateClaimConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectedApps request
	GetConnectedApps(ctx context.Context, identityProviderId string, params *GetConnectedAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportIDPToFile request
	ExportIDPToFile(ctx context.Context, identityProviderId string, params *ExportIDPToFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFederatedAuthenticators request
	GetFederatedAuthenticators(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFederatedAuthenticatorsWithBody request with any body
	UpdateFederatedAuthenticatorsWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFederatedAuthenticators(ctx context.Context, identityProviderId string, body UpdateFederatedAuthenticatorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFederatedAuthenticator request
	GetFederatedAuthenticator(ctx context.Context, identityProviderId string, federatedAuthenticatorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFederatedAuthenticatorWithBody request with any body
	UpdateFederatedAuthenticatorWithBody(ctx context.Context, identityProviderId string, federatedAuthenticatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFederatedAuthenticator(ctx context.Context, identityProviderId string, federatedAuthenticatorId string, body UpdateFederatedAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupConfig request
	GetGroupConfig(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGroupConfigWithBody request with any body
	UpdateGroupConfigWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGroupConfig(ctx context.Context, identityProviderId string, body UpdateGroupConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFederatedAssociationConfig request
	GetFederatedAssociationConfig(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFederatedAssociationConfigWithBody request with any body
	UpdateFederatedAssociationConfigWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFederatedAssociationConfig(ctx context.Context, identityProviderId string, body UpdateFederatedAssociationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIDPFromFileWithBody request with any body
	UpdateIDPFromFileWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProvisioningConfig request
	GetProvisioningConfig(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJITConfig request
	GetJITConfig(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateJITConfigWithBody request with any body
	UpdateJITConfigWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateJITConfig(ctx context.Context, identityProviderId string, body UpdateJITConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOutboundConnectors request
	GetOutboundConnectors(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOutboundConnectorsWithBody request with any body
	UpdateOutboundConnectorsWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOutboundConnectors(ctx context.Context, identityProviderId string, body UpdateOutboundConnectorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOutboundConnector request
	GetOutboundConnector(ctx context.Context, identityProviderId string, outboundProvisioningConnectorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOutboundConnectorWithBody request with any body
	UpdateOutboundConnectorWithBody(ctx context.Context, identityProviderId string, outboundProvisioningConnectorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOutboundConnector(ctx context.Context, identityProviderId string, outboundProvisioningConnectorId string, body UpdateOutboundConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoleConfig request
	GetRoleConfig(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRoleConfigWithBody request with any body
	UpdateRoleConfigWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRoleConfig(ctx context.Context, identityProviderId string, body UpdateRoleConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrustedTokenIssuers request
	GetTrustedTokenIssuers(ctx context.Context, params *GetTrustedTokenIssuersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddTrustedTokenIssuerWithBody request with any body
	AddTrustedTokenIssuerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddTrustedTokenIssuer(ctx context.Context, body AddTrustedTokenIssuerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTrustedTokenIssuer request
	DeleteTrustedTokenIssuer(ctx context.Context, trustedTokenIssuerId string, params *DeleteTrustedTokenIssuerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrustedTokenIssuer request
	GetTrustedTokenIssuer(ctx context.Context, trustedTokenIssuerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchTrustedTokenIssuerWithBody request with any body
	PatchTrustedTokenIssuerWithBody(ctx context.Context, trustedTokenIssuerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchTrustedTokenIssuer(ctx context.Context, trustedTokenIssuerId string, body PatchTrustedTokenIssuerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetIDPs(ctx context.Context, params *GetIDPsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIDPsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddIDPWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddIDPRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddIDP(ctx context.Context, body AddIDPJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddIDPRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportIDPFromFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportIDPFromFileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetaFederatedAuthenticators(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetaFederatedAuthenticatorsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetaFederatedAuthenticator(ctx context.Context, federatedAuthenticatorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetaFederatedAuthenticatorRequest(c.Server, federatedAuthenticatorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetaOutboundConnectors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetaOutboundConnectorsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetaOutboundConnector(ctx context.Context, outboundProvisioningConnectorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetaOutboundConnectorRequest(c.Server, outboundProvisioningConnectorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIDPTemplates(ctx context.Context, params *GetIDPTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIDPTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddIDPTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddIDPTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddIDPTemplate(ctx context.Context, body AddIDPTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddIDPTemplateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIDPTemplate(ctx context.Context, templateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIDPTemplateRequest(c.Server, templateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIDPTemplate(ctx context.Context, templateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIDPTemplateRequest(c.Server, templateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIDPTemplateWithBody(ctx context.Context, templateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIDPTemplateRequestWithBody(c.Server, templateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIDPTemplate(ctx context.Context, templateId string, body UpdateIDPTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIDPTemplateRequest(c.Server, templateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIDP(ctx context.Context, identityProviderId string, params *DeleteIDPParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIDPRequest(c.Server, identityProviderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIDP(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIDPRequest(c.Server, identityProviderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchIDPWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchIDPRequestWithBody(c.Server, identityProviderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchIDP(ctx context.Context, identityProviderId string, body PatchIDPJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchIDPRequest(c.Server, identityProviderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClaimConfig(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClaimConfigRequest(c.Server, identityProviderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateClaimConfigWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClaimConfigRequestWithBody(c.Server, identityProviderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateClaimConfig(ctx context.Context, identityProviderId string, body UpdateClaimConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClaimConfigRequest(c.Server, identityProviderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectedApps(ctx context.Context, identityProviderId string, params *GetConnectedAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectedAppsRequest(c.Server, identityProviderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportIDPToFile(ctx context.Context, identityProviderId string, params *ExportIDPToFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportIDPToFileRequest(c.Server, identityProviderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFederatedAuthenticators(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFederatedAuthenticatorsRequest(c.Server, identityProviderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFederatedAuthenticatorsWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFederatedAuthenticatorsRequestWithBody(c.Server, identityProviderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFederatedAuthenticators(ctx context.Context, identityProviderId string, body UpdateFederatedAuthenticatorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFederatedAuthenticatorsRequest(c.Server, identityProviderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFederatedAuthenticator(ctx context.Context, identityProviderId string, federatedAuthenticatorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFederatedAuthenticatorRequest(c.Server, identityProviderId, federatedAuthenticatorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFederatedAuthenticatorWithBody(ctx context.Context, identityProviderId string, federatedAuthenticatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFederatedAuthenticatorRequestWithBody(c.Server, identityProviderId, federatedAuthenticatorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFederatedAuthenticator(ctx context.Context, identityProviderId string, federatedAuthenticatorId string, body UpdateFederatedAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFederatedAuthenticatorRequest(c.Server, identityProviderId, federatedAuthenticatorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupConfig(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupConfigRequest(c.Server, identityProviderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGroupConfigWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGroupConfigRequestWithBody(c.Server, identityProviderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGroupConfig(ctx context.Context, identityProviderId string, body UpdateGroupConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGroupConfigRequest(c.Server, identityProviderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFederatedAssociationConfig(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFederatedAssociationConfigRequest(c.Server, identityProviderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFederatedAssociationConfigWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFederatedAssociationConfigRequestWithBody(c.Server, identityProviderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFederatedAssociationConfig(ctx context.Context, identityProviderId string, body UpdateFederatedAssociationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFederatedAssociationConfigRequest(c.Server, identityProviderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIDPFromFileWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIDPFromFileRequestWithBody(c.Server, identityProviderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProvisioningConfig(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProvisioningConfigRequest(c.Server, identityProviderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJITConfig(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJITConfigRequest(c.Server, identityProviderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJITConfigWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJITConfigRequestWithBody(c.Server, identityProviderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJITConfig(ctx context.Context, identityProviderId string, body UpdateJITConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJITConfigRequest(c.Server, identityProviderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOutboundConnectors(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOutboundConnectorsRequest(c.Server, identityProviderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOutboundConnectorsWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOutboundConnectorsRequestWithBody(c.Server, identityProviderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOutboundConnectors(ctx context.Context, identityProviderId string, body UpdateOutboundConnectorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOutboundConnectorsRequest(c.Server, identityProviderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOutboundConnector(ctx context.Context, identityProviderId string, outboundProvisioningConnectorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOutboundConnectorRequest(c.Server, identityProviderId, outboundProvisioningConnectorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOutboundConnectorWithBody(ctx context.Context, identityProviderId string, outboundProvisioningConnectorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOutboundConnectorRequestWithBody(c.Server, identityProviderId, outboundProvisioningConnectorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOutboundConnector(ctx context.Context, identityProviderId string, outboundProvisioningConnectorId string, body UpdateOutboundConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOutboundConnectorRequest(c.Server, identityProviderId, outboundProvisioningConnectorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoleConfig(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleConfigRequest(c.Server, identityProviderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoleConfigWithBody(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleConfigRequestWithBody(c.Server, identityProviderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoleConfig(ctx context.Context, identityProviderId string, body UpdateRoleConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleConfigRequest(c.Server, identityProviderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrustedTokenIssuers(ctx context.Context, params *GetTrustedTokenIssuersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrustedTokenIssuersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTrustedTokenIssuerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTrustedTokenIssuerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTrustedTokenIssuer(ctx context.Context, body AddTrustedTokenIssuerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTrustedTokenIssuerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTrustedTokenIssuer(ctx context.Context, trustedTokenIssuerId string, params *DeleteTrustedTokenIssuerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTrustedTokenIssuerRequest(c.Server, trustedTokenIssuerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrustedTokenIssuer(ctx context.Context, trustedTokenIssuerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrustedTokenIssuerRequest(c.Server, trustedTokenIssuerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTrustedTokenIssuerWithBody(ctx context.Context, trustedTokenIssuerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTrustedTokenIssuerRequestWithBody(c.Server, trustedTokenIssuerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTrustedTokenIssuer(ctx context.Context, trustedTokenIssuerId string, body PatchTrustedTokenIssuerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTrustedTokenIssuerRequest(c.Server, trustedTokenIssuerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetIDPsRequest generates requests for GetIDPs
func NewGetIDPsRequest(server string, params *GetIDPsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RequiredAttributes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requiredAttributes", runtime.ParamLocationQuery, *params.RequiredAttributes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddIDPRequest calls the generic AddIDP builder with application/json body
func NewAddIDPRequest(server string, body AddIDPJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddIDPRequestWithBody(server, "application/json", bodyReader)
}

// NewAddIDPRequestWithBody generates requests for AddIDP with any type of body
func NewAddIDPRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImportIDPFromFileRequestWithBody generates requests for ImportIDPFromFile with any type of body
func NewImportIDPFromFileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMetaFederatedAuthenticatorsRequest generates requests for GetMetaFederatedAuthenticators
func NewGetMetaFederatedAuthenticatorsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/meta/federated-authenticators")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetaFederatedAuthenticatorRequest generates requests for GetMetaFederatedAuthenticator
func NewGetMetaFederatedAuthenticatorRequest(server string, federatedAuthenticatorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "federated-authenticator-id", runtime.ParamLocationPath, federatedAuthenticatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/meta/federated-authenticators/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetaOutboundConnectorsRequest generates requests for GetMetaOutboundConnectors
func NewGetMetaOutboundConnectorsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/meta/outbound-provisioning-connectors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetaOutboundConnectorRequest generates requests for GetMetaOutboundConnector
func NewGetMetaOutboundConnectorRequest(server string, outboundProvisioningConnectorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "outbound-provisioning-connector-id", runtime.ParamLocationPath, outboundProvisioningConnectorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/meta/outbound-provisioning-connectors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIDPTemplatesRequest generates requests for GetIDPTemplates
func NewGetIDPTemplatesRequest(server string, params *GetIDPTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddIDPTemplateRequest calls the generic AddIDPTemplate builder with application/json body
func NewAddIDPTemplateRequest(server string, body AddIDPTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddIDPTemplateRequestWithBody(server, "application/json", bodyReader)
}

// NewAddIDPTemplateRequestWithBody generates requests for AddIDPTemplate with any type of body
func NewAddIDPTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIDPTemplateRequest generates requests for DeleteIDPTemplate
func NewDeleteIDPTemplateRequest(server string, templateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "template-id", runtime.ParamLocationPath, templateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIDPTemplateRequest generates requests for GetIDPTemplate
func NewGetIDPTemplateRequest(server string, templateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "template-id", runtime.ParamLocationPath, templateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIDPTemplateRequest calls the generic UpdateIDPTemplate builder with application/json body
func NewUpdateIDPTemplateRequest(server string, templateId string, body UpdateIDPTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIDPTemplateRequestWithBody(server, templateId, "application/json", bodyReader)
}

// NewUpdateIDPTemplateRequestWithBody generates requests for UpdateIDPTemplate with any type of body
func NewUpdateIDPTemplateRequestWithBody(server string, templateId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "template-id", runtime.ParamLocationPath, templateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIDPRequest generates requests for DeleteIDP
func NewDeleteIDPRequest(server string, identityProviderId string, params *DeleteIDPParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIDPRequest generates requests for GetIDP
func NewGetIDPRequest(server string, identityProviderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchIDPRequest calls the generic PatchIDP builder with application/json body
func NewPatchIDPRequest(server string, identityProviderId string, body PatchIDPJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchIDPRequestWithBody(server, identityProviderId, "application/json", bodyReader)
}

// NewPatchIDPRequestWithBody generates requests for PatchIDP with any type of body
func NewPatchIDPRequestWithBody(server string, identityProviderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClaimConfigRequest generates requests for GetClaimConfig
func NewGetClaimConfigRequest(server string, identityProviderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/claims", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateClaimConfigRequest calls the generic UpdateClaimConfig builder with application/json body
func NewUpdateClaimConfigRequest(server string, identityProviderId string, body UpdateClaimConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateClaimConfigRequestWithBody(server, identityProviderId, "application/json", bodyReader)
}

// NewUpdateClaimConfigRequestWithBody generates requests for UpdateClaimConfig with any type of body
func NewUpdateClaimConfigRequestWithBody(server string, identityProviderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/claims", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConnectedAppsRequest generates requests for GetConnectedApps
func NewGetConnectedAppsRequest(server string, identityProviderId string, params *GetConnectedAppsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/connected-apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportIDPToFileRequest generates requests for ExportIDPToFile
func NewExportIDPToFileRequest(server string, identityProviderId string, params *ExportIDPToFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/export", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExcludeSecrets != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeSecrets", runtime.ParamLocationQuery, *params.ExcludeSecrets); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewGetFederatedAuthenticatorsRequest generates requests for GetFederatedAuthenticators
func NewGetFederatedAuthenticatorsRequest(server string, identityProviderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/federated-authenticators", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFederatedAuthenticatorsRequest calls the generic UpdateFederatedAuthenticators builder with application/json body
func NewUpdateFederatedAuthenticatorsRequest(server string, identityProviderId string, body UpdateFederatedAuthenticatorsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFederatedAuthenticatorsRequestWithBody(server, identityProviderId, "application/json", bodyReader)
}

// NewUpdateFederatedAuthenticatorsRequestWithBody generates requests for UpdateFederatedAuthenticators with any type of body
func NewUpdateFederatedAuthenticatorsRequestWithBody(server string, identityProviderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/federated-authenticators", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFederatedAuthenticatorRequest generates requests for GetFederatedAuthenticator
func NewGetFederatedAuthenticatorRequest(server string, identityProviderId string, federatedAuthenticatorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "federated-authenticator-id", runtime.ParamLocationPath, federatedAuthenticatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/federated-authenticators/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFederatedAuthenticatorRequest calls the generic UpdateFederatedAuthenticator builder with application/json body
func NewUpdateFederatedAuthenticatorRequest(server string, identityProviderId string, federatedAuthenticatorId string, body UpdateFederatedAuthenticatorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFederatedAuthenticatorRequestWithBody(server, identityProviderId, federatedAuthenticatorId, "application/json", bodyReader)
}

// NewUpdateFederatedAuthenticatorRequestWithBody generates requests for UpdateFederatedAuthenticator with any type of body
func NewUpdateFederatedAuthenticatorRequestWithBody(server string, identityProviderId string, federatedAuthenticatorId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "federated-authenticator-id", runtime.ParamLocationPath, federatedAuthenticatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/federated-authenticators/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupConfigRequest generates requests for GetGroupConfig
func NewGetGroupConfigRequest(server string, identityProviderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateGroupConfigRequest calls the generic UpdateGroupConfig builder with application/json body
func NewUpdateGroupConfigRequest(server string, identityProviderId string, body UpdateGroupConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGroupConfigRequestWithBody(server, identityProviderId, "application/json", bodyReader)
}

// NewUpdateGroupConfigRequestWithBody generates requests for UpdateGroupConfig with any type of body
func NewUpdateGroupConfigRequestWithBody(server string, identityProviderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFederatedAssociationConfigRequest generates requests for GetFederatedAssociationConfig
func NewGetFederatedAssociationConfigRequest(server string, identityProviderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/implicit-association", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFederatedAssociationConfigRequest calls the generic UpdateFederatedAssociationConfig builder with application/json body
func NewUpdateFederatedAssociationConfigRequest(server string, identityProviderId string, body UpdateFederatedAssociationConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFederatedAssociationConfigRequestWithBody(server, identityProviderId, "application/json", bodyReader)
}

// NewUpdateFederatedAssociationConfigRequestWithBody generates requests for UpdateFederatedAssociationConfig with any type of body
func NewUpdateFederatedAssociationConfigRequestWithBody(server string, identityProviderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/implicit-association", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateIDPFromFileRequestWithBody generates requests for UpdateIDPFromFile with any type of body
func NewUpdateIDPFromFileRequestWithBody(server string, identityProviderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/import", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProvisioningConfigRequest generates requests for GetProvisioningConfig
func NewGetProvisioningConfigRequest(server string, identityProviderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/provisioning", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJITConfigRequest generates requests for GetJITConfig
func NewGetJITConfigRequest(server string, identityProviderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/provisioning/jit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateJITConfigRequest calls the generic UpdateJITConfig builder with application/json body
func NewUpdateJITConfigRequest(server string, identityProviderId string, body UpdateJITConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateJITConfigRequestWithBody(server, identityProviderId, "application/json", bodyReader)
}

// NewUpdateJITConfigRequestWithBody generates requests for UpdateJITConfig with any type of body
func NewUpdateJITConfigRequestWithBody(server string, identityProviderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/provisioning/jit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOutboundConnectorsRequest generates requests for GetOutboundConnectors
func NewGetOutboundConnectorsRequest(server string, identityProviderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/provisioning/outbound-connectors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOutboundConnectorsRequest calls the generic UpdateOutboundConnectors builder with application/json body
func NewUpdateOutboundConnectorsRequest(server string, identityProviderId string, body UpdateOutboundConnectorsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOutboundConnectorsRequestWithBody(server, identityProviderId, "application/json", bodyReader)
}

// NewUpdateOutboundConnectorsRequestWithBody generates requests for UpdateOutboundConnectors with any type of body
func NewUpdateOutboundConnectorsRequestWithBody(server string, identityProviderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/provisioning/outbound-connectors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOutboundConnectorRequest generates requests for GetOutboundConnector
func NewGetOutboundConnectorRequest(server string, identityProviderId string, outboundProvisioningConnectorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "outbound-provisioning-connector-id", runtime.ParamLocationPath, outboundProvisioningConnectorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/provisioning/outbound-connectors/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOutboundConnectorRequest calls the generic UpdateOutboundConnector builder with application/json body
func NewUpdateOutboundConnectorRequest(server string, identityProviderId string, outboundProvisioningConnectorId string, body UpdateOutboundConnectorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOutboundConnectorRequestWithBody(server, identityProviderId, outboundProvisioningConnectorId, "application/json", bodyReader)
}

// NewUpdateOutboundConnectorRequestWithBody generates requests for UpdateOutboundConnector with any type of body
func NewUpdateOutboundConnectorRequestWithBody(server string, identityProviderId string, outboundProvisioningConnectorId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "outbound-provisioning-connector-id", runtime.ParamLocationPath, outboundProvisioningConnectorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/provisioning/outbound-connectors/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRoleConfigRequest generates requests for GetRoleConfig
func NewGetRoleConfigRequest(server string, identityProviderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRoleConfigRequest calls the generic UpdateRoleConfig builder with application/json body
func NewUpdateRoleConfigRequest(server string, identityProviderId string, body UpdateRoleConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRoleConfigRequestWithBody(server, identityProviderId, "application/json", bodyReader)
}

// NewUpdateRoleConfigRequestWithBody generates requests for UpdateRoleConfig with any type of body
func NewUpdateRoleConfigRequestWithBody(server string, identityProviderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity-provider-id", runtime.ParamLocationPath, identityProviderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-providers/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTrustedTokenIssuersRequest generates requests for GetTrustedTokenIssuers
func NewGetTrustedTokenIssuersRequest(server string, params *GetTrustedTokenIssuersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trusted-token-issuers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RequiredAttributes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requiredAttributes", runtime.ParamLocationQuery, *params.RequiredAttributes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddTrustedTokenIssuerRequest calls the generic AddTrustedTokenIssuer builder with application/json body
func NewAddTrustedTokenIssuerRequest(server string, body AddTrustedTokenIssuerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddTrustedTokenIssuerRequestWithBody(server, "application/json", bodyReader)
}

// NewAddTrustedTokenIssuerRequestWithBody generates requests for AddTrustedTokenIssuer with any type of body
func NewAddTrustedTokenIssuerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trusted-token-issuers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTrustedTokenIssuerRequest generates requests for DeleteTrustedTokenIssuer
func NewDeleteTrustedTokenIssuerRequest(server string, trustedTokenIssuerId string, params *DeleteTrustedTokenIssuerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trusted-token-issuer-id", runtime.ParamLocationPath, trustedTokenIssuerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trusted-token-issuers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTrustedTokenIssuerRequest generates requests for GetTrustedTokenIssuer
func NewGetTrustedTokenIssuerRequest(server string, trustedTokenIssuerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trusted-token-issuer-id", runtime.ParamLocationPath, trustedTokenIssuerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trusted-token-issuers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchTrustedTokenIssuerRequest calls the generic PatchTrustedTokenIssuer builder with application/json body
func NewPatchTrustedTokenIssuerRequest(server string, trustedTokenIssuerId string, body PatchTrustedTokenIssuerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchTrustedTokenIssuerRequestWithBody(server, trustedTokenIssuerId, "application/json", bodyReader)
}

// NewPatchTrustedTokenIssuerRequestWithBody generates requests for PatchTrustedTokenIssuer with any type of body
func NewPatchTrustedTokenIssuerRequestWithBody(server string, trustedTokenIssuerId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trusted-token-issuer-id", runtime.ParamLocationPath, trustedTokenIssuerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trusted-token-issuers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetIDPsWithResponse request
	GetIDPsWithResponse(ctx context.Context, params *GetIDPsParams, reqEditors ...RequestEditorFn) (*GetIDPsResponse, error)

	// AddIDPWithBodyWithResponse request with any body
	AddIDPWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddIDPResponse, error)

	AddIDPWithResponse(ctx context.Context, body AddIDPJSONRequestBody, reqEditors ...RequestEditorFn) (*AddIDPResponse, error)

	// ImportIDPFromFileWithBodyWithResponse request with any body
	ImportIDPFromFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportIDPFromFileResponse, error)

	// GetMetaFederatedAuthenticatorsWithResponse request
	GetMetaFederatedAuthenticatorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetaFederatedAuthenticatorsResponse, error)

	// GetMetaFederatedAuthenticatorWithResponse request
	GetMetaFederatedAuthenticatorWithResponse(ctx context.Context, federatedAuthenticatorId string, reqEditors ...RequestEditorFn) (*GetMetaFederatedAuthenticatorResponse, error)

	// GetMetaOutboundConnectorsWithResponse request
	GetMetaOutboundConnectorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetaOutboundConnectorsResponse, error)

	// GetMetaOutboundConnectorWithResponse request
	GetMetaOutboundConnectorWithResponse(ctx context.Context, outboundProvisioningConnectorId string, reqEditors ...RequestEditorFn) (*GetMetaOutboundConnectorResponse, error)

	// GetIDPTemplatesWithResponse request
	GetIDPTemplatesWithResponse(ctx context.Context, params *GetIDPTemplatesParams, reqEditors ...RequestEditorFn) (*GetIDPTemplatesResponse, error)

	// AddIDPTemplateWithBodyWithResponse request with any body
	AddIDPTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddIDPTemplateResponse, error)

	AddIDPTemplateWithResponse(ctx context.Context, body AddIDPTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*AddIDPTemplateResponse, error)

	// DeleteIDPTemplateWithResponse request
	DeleteIDPTemplateWithResponse(ctx context.Context, templateId string, reqEditors ...RequestEditorFn) (*DeleteIDPTemplateResponse, error)

	// GetIDPTemplateWithResponse request
	GetIDPTemplateWithResponse(ctx context.Context, templateId string, reqEditors ...RequestEditorFn) (*GetIDPTemplateResponse, error)

	// UpdateIDPTemplateWithBodyWithResponse request with any body
	UpdateIDPTemplateWithBodyWithResponse(ctx context.Context, templateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIDPTemplateResponse, error)

	UpdateIDPTemplateWithResponse(ctx context.Context, templateId string, body UpdateIDPTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIDPTemplateResponse, error)

	// DeleteIDPWithResponse request
	DeleteIDPWithResponse(ctx context.Context, identityProviderId string, params *DeleteIDPParams, reqEditors ...RequestEditorFn) (*DeleteIDPResponse, error)

	// GetIDPWithResponse request
	GetIDPWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetIDPResponse, error)

	// PatchIDPWithBodyWithResponse request with any body
	PatchIDPWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchIDPResponse, error)

	PatchIDPWithResponse(ctx context.Context, identityProviderId string, body PatchIDPJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchIDPResponse, error)

	// GetClaimConfigWithResponse request
	GetClaimConfigWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetClaimConfigResponse, error)

	// UpdateClaimConfigWithBodyWithResponse request with any body
	UpdateClaimConfigWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClaimConfigResponse, error)

	UpdateClaimConfigWithResponse(ctx context.Context, identityProviderId string, body UpdateClaimConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateClaimConfigResponse, error)

	// GetConnectedAppsWithResponse request
	GetConnectedAppsWithResponse(ctx context.Context, identityProviderId string, params *GetConnectedAppsParams, reqEditors ...RequestEditorFn) (*GetConnectedAppsResponse, error)

	// ExportIDPToFileWithResponse request
	ExportIDPToFileWithResponse(ctx context.Context, identityProviderId string, params *ExportIDPToFileParams, reqEditors ...RequestEditorFn) (*ExportIDPToFileResponse, error)

	// GetFederatedAuthenticatorsWithResponse request
	GetFederatedAuthenticatorsWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetFederatedAuthenticatorsResponse, error)

	// UpdateFederatedAuthenticatorsWithBodyWithResponse request with any body
	UpdateFederatedAuthenticatorsWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFederatedAuthenticatorsResponse, error)

	UpdateFederatedAuthenticatorsWithResponse(ctx context.Context, identityProviderId string, body UpdateFederatedAuthenticatorsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFederatedAuthenticatorsResponse, error)

	// GetFederatedAuthenticatorWithResponse request
	GetFederatedAuthenticatorWithResponse(ctx context.Context, identityProviderId string, federatedAuthenticatorId string, reqEditors ...RequestEditorFn) (*GetFederatedAuthenticatorResponse, error)

	// UpdateFederatedAuthenticatorWithBodyWithResponse request with any body
	UpdateFederatedAuthenticatorWithBodyWithResponse(ctx context.Context, identityProviderId string, federatedAuthenticatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFederatedAuthenticatorResponse, error)

	UpdateFederatedAuthenticatorWithResponse(ctx context.Context, identityProviderId string, federatedAuthenticatorId string, body UpdateFederatedAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFederatedAuthenticatorResponse, error)

	// GetGroupConfigWithResponse request
	GetGroupConfigWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetGroupConfigResponse, error)

	// UpdateGroupConfigWithBodyWithResponse request with any body
	UpdateGroupConfigWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGroupConfigResponse, error)

	UpdateGroupConfigWithResponse(ctx context.Context, identityProviderId string, body UpdateGroupConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGroupConfigResponse, error)

	// GetFederatedAssociationConfigWithResponse request
	GetFederatedAssociationConfigWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetFederatedAssociationConfigResponse, error)

	// UpdateFederatedAssociationConfigWithBodyWithResponse request with any body
	UpdateFederatedAssociationConfigWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFederatedAssociationConfigResponse, error)

	UpdateFederatedAssociationConfigWithResponse(ctx context.Context, identityProviderId string, body UpdateFederatedAssociationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFederatedAssociationConfigResponse, error)

	// UpdateIDPFromFileWithBodyWithResponse request with any body
	UpdateIDPFromFileWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIDPFromFileResponse, error)

	// GetProvisioningConfigWithResponse request
	GetProvisioningConfigWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetProvisioningConfigResponse, error)

	// GetJITConfigWithResponse request
	GetJITConfigWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetJITConfigResponse, error)

	// UpdateJITConfigWithBodyWithResponse request with any body
	UpdateJITConfigWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJITConfigResponse, error)

	UpdateJITConfigWithResponse(ctx context.Context, identityProviderId string, body UpdateJITConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJITConfigResponse, error)

	// GetOutboundConnectorsWithResponse request
	GetOutboundConnectorsWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetOutboundConnectorsResponse, error)

	// UpdateOutboundConnectorsWithBodyWithResponse request with any body
	UpdateOutboundConnectorsWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOutboundConnectorsResponse, error)

	UpdateOutboundConnectorsWithResponse(ctx context.Context, identityProviderId string, body UpdateOutboundConnectorsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOutboundConnectorsResponse, error)

	// GetOutboundConnectorWithResponse request
	GetOutboundConnectorWithResponse(ctx context.Context, identityProviderId string, outboundProvisioningConnectorId string, reqEditors ...RequestEditorFn) (*GetOutboundConnectorResponse, error)

	// UpdateOutboundConnectorWithBodyWithResponse request with any body
	UpdateOutboundConnectorWithBodyWithResponse(ctx context.Context, identityProviderId string, outboundProvisioningConnectorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOutboundConnectorResponse, error)

	UpdateOutboundConnectorWithResponse(ctx context.Context, identityProviderId string, outboundProvisioningConnectorId string, body UpdateOutboundConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOutboundConnectorResponse, error)

	// GetRoleConfigWithResponse request
	GetRoleConfigWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetRoleConfigResponse, error)

	// UpdateRoleConfigWithBodyWithResponse request with any body
	UpdateRoleConfigWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleConfigResponse, error)

	UpdateRoleConfigWithResponse(ctx context.Context, identityProviderId string, body UpdateRoleConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleConfigResponse, error)

	// GetTrustedTokenIssuersWithResponse request
	GetTrustedTokenIssuersWithResponse(ctx context.Context, params *GetTrustedTokenIssuersParams, reqEditors ...RequestEditorFn) (*GetTrustedTokenIssuersResponse, error)

	// AddTrustedTokenIssuerWithBodyWithResponse request with any body
	AddTrustedTokenIssuerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTrustedTokenIssuerResponse, error)

	AddTrustedTokenIssuerWithResponse(ctx context.Context, body AddTrustedTokenIssuerJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTrustedTokenIssuerResponse, error)

	// DeleteTrustedTokenIssuerWithResponse request
	DeleteTrustedTokenIssuerWithResponse(ctx context.Context, trustedTokenIssuerId string, params *DeleteTrustedTokenIssuerParams, reqEditors ...RequestEditorFn) (*DeleteTrustedTokenIssuerResponse, error)

	// GetTrustedTokenIssuerWithResponse request
	GetTrustedTokenIssuerWithResponse(ctx context.Context, trustedTokenIssuerId string, reqEditors ...RequestEditorFn) (*GetTrustedTokenIssuerResponse, error)

	// PatchTrustedTokenIssuerWithBodyWithResponse request with any body
	PatchTrustedTokenIssuerWithBodyWithResponse(ctx context.Context, trustedTokenIssuerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTrustedTokenIssuerResponse, error)

	PatchTrustedTokenIssuerWithResponse(ctx context.Context, trustedTokenIssuerId string, body PatchTrustedTokenIssuerJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTrustedTokenIssuerResponse, error)
}

type GetIDPsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProviderListResponse
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r GetIDPsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIDPsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddIDPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IdentityProviderResponse
	XML201       *IdentityProviderResponse
	JSON400      *Error
	XML400       *Error
	JSON409      *Error
	XML409       *Error
	JSON500      *Error
	XML500       *Error
}

// Status returns HTTPResponse.Status
func (r AddIDPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddIDPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportIDPFromFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ImportIDPFromFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportIDPFromFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetaFederatedAuthenticatorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MetaFederatedAuthenticatorListItem
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetMetaFederatedAuthenticatorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetaFederatedAuthenticatorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetaFederatedAuthenticatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetaFederatedAuthenticator
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetMetaFederatedAuthenticatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetaFederatedAuthenticatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetaOutboundConnectorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MetaOutboundConnectorListItem
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetMetaOutboundConnectorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetaOutboundConnectorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetaOutboundConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetaOutboundConnector
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetMetaOutboundConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetaOutboundConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIDPTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProviderTemplateListResponse
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetIDPTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIDPTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddIDPTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	XML400       *Error
	JSON409      *Error
	XML409       *Error
	JSON500      *Error
	XML500       *Error
}

// Status returns HTTPResponse.Status
func (r AddIDPTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddIDPTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIDPTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteIDPTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIDPTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIDPTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProviderTemplate
	XML200       *IdentityProviderTemplate
	JSON400      *Error
	XML400       *Error
	JSON404      *Error
	XML404       *Error
	JSON500      *Error
	XML500       *Error
}

// Status returns HTTPResponse.Status
func (r GetIDPTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIDPTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIDPTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON409      *Error
	XML409       *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateIDPTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIDPTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIDPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteIDPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIDPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIDPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProviderResponse
	XML200       *IdentityProviderResponse
	JSON400      *Error
	XML400       *Error
	JSON404      *Error
	XML404       *Error
	JSON500      *Error
	XML500       *Error
}

// Status returns HTTPResponse.Status
func (r GetIDPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIDPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchIDPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProviderResponse
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PatchIDPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchIDPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClaimConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Claims
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetClaimConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClaimConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateClaimConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Claims
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateClaimConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateClaimConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectedAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectedApps
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetConnectedAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectedAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportIDPToFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	YAML200      *string
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ExportIDPToFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportIDPToFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFederatedAuthenticatorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FederatedAuthenticatorListResponse
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetFederatedAuthenticatorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFederatedAuthenticatorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFederatedAuthenticatorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FederatedAuthenticatorListResponse
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateFederatedAuthenticatorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFederatedAuthenticatorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFederatedAuthenticatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FederatedAuthenticator
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetFederatedAuthenticatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFederatedAuthenticatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFederatedAuthenticatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FederatedAuthenticator
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateFederatedAuthenticatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFederatedAuthenticatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdPGroupsConfig
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetGroupConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGroupConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdPGroupsConfig
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateGroupConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGroupConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFederatedAssociationConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssociationResponse
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetFederatedAssociationConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFederatedAssociationConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFederatedAssociationConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssociationResponse
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateFederatedAssociationConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFederatedAssociationConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIDPFromFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateIDPFromFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIDPFromFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProvisioningConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProvisioningResponse
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetProvisioningConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProvisioningConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJITConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JustInTimeProvisioning
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetJITConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJITConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateJITConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JustInTimeProvisioning
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateJITConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateJITConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOutboundConnectorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OutboundConnectorListResponse
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetOutboundConnectorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOutboundConnectorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOutboundConnectorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OutboundConnectorListResponse
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateOutboundConnectorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOutboundConnectorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOutboundConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OutboundConnector
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetOutboundConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOutboundConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOutboundConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OutboundConnector
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateOutboundConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOutboundConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Roles
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetRoleConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRoleConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Roles
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateRoleConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRoleConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrustedTokenIssuersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProviderListResponse
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetTrustedTokenIssuersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrustedTokenIssuersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddTrustedTokenIssuerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TrustedTokenIssuerResponse
	XML201       *TrustedTokenIssuerResponse
	JSON400      *Error
	XML400       *Error
	JSON409      *Error
	XML409       *Error
	JSON500      *Error
	XML500       *Error
}

// Status returns HTTPResponse.Status
func (r AddTrustedTokenIssuerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddTrustedTokenIssuerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTrustedTokenIssuerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteTrustedTokenIssuerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTrustedTokenIssuerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrustedTokenIssuerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrustedTokenIssuerResponse
	XML200       *TrustedTokenIssuerResponse
	JSON400      *Error
	XML400       *Error
	JSON404      *Error
	XML404       *Error
	JSON500      *Error
	XML500       *Error
}

// Status returns HTTPResponse.Status
func (r GetTrustedTokenIssuerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrustedTokenIssuerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchTrustedTokenIssuerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrustedTokenIssuerResponse
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PatchTrustedTokenIssuerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchTrustedTokenIssuerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetIDPsWithResponse request returning *GetIDPsResponse
func (c *ClientWithResponses) GetIDPsWithResponse(ctx context.Context, params *GetIDPsParams, reqEditors ...RequestEditorFn) (*GetIDPsResponse, error) {
	rsp, err := c.GetIDPs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIDPsResponse(rsp)
}

// AddIDPWithBodyWithResponse request with arbitrary body returning *AddIDPResponse
func (c *ClientWithResponses) AddIDPWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddIDPResponse, error) {
	rsp, err := c.AddIDPWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddIDPResponse(rsp)
}

func (c *ClientWithResponses) AddIDPWithResponse(ctx context.Context, body AddIDPJSONRequestBody, reqEditors ...RequestEditorFn) (*AddIDPResponse, error) {
	rsp, err := c.AddIDP(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddIDPResponse(rsp)
}

// ImportIDPFromFileWithBodyWithResponse request with arbitrary body returning *ImportIDPFromFileResponse
func (c *ClientWithResponses) ImportIDPFromFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportIDPFromFileResponse, error) {
	rsp, err := c.ImportIDPFromFileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportIDPFromFileResponse(rsp)
}

// GetMetaFederatedAuthenticatorsWithResponse request returning *GetMetaFederatedAuthenticatorsResponse
func (c *ClientWithResponses) GetMetaFederatedAuthenticatorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetaFederatedAuthenticatorsResponse, error) {
	rsp, err := c.GetMetaFederatedAuthenticators(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetaFederatedAuthenticatorsResponse(rsp)
}

// GetMetaFederatedAuthenticatorWithResponse request returning *GetMetaFederatedAuthenticatorResponse
func (c *ClientWithResponses) GetMetaFederatedAuthenticatorWithResponse(ctx context.Context, federatedAuthenticatorId string, reqEditors ...RequestEditorFn) (*GetMetaFederatedAuthenticatorResponse, error) {
	rsp, err := c.GetMetaFederatedAuthenticator(ctx, federatedAuthenticatorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetaFederatedAuthenticatorResponse(rsp)
}

// GetMetaOutboundConnectorsWithResponse request returning *GetMetaOutboundConnectorsResponse
func (c *ClientWithResponses) GetMetaOutboundConnectorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetaOutboundConnectorsResponse, error) {
	rsp, err := c.GetMetaOutboundConnectors(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetaOutboundConnectorsResponse(rsp)
}

// GetMetaOutboundConnectorWithResponse request returning *GetMetaOutboundConnectorResponse
func (c *ClientWithResponses) GetMetaOutboundConnectorWithResponse(ctx context.Context, outboundProvisioningConnectorId string, reqEditors ...RequestEditorFn) (*GetMetaOutboundConnectorResponse, error) {
	rsp, err := c.GetMetaOutboundConnector(ctx, outboundProvisioningConnectorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetaOutboundConnectorResponse(rsp)
}

// GetIDPTemplatesWithResponse request returning *GetIDPTemplatesResponse
func (c *ClientWithResponses) GetIDPTemplatesWithResponse(ctx context.Context, params *GetIDPTemplatesParams, reqEditors ...RequestEditorFn) (*GetIDPTemplatesResponse, error) {
	rsp, err := c.GetIDPTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIDPTemplatesResponse(rsp)
}

// AddIDPTemplateWithBodyWithResponse request with arbitrary body returning *AddIDPTemplateResponse
func (c *ClientWithResponses) AddIDPTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddIDPTemplateResponse, error) {
	rsp, err := c.AddIDPTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddIDPTemplateResponse(rsp)
}

func (c *ClientWithResponses) AddIDPTemplateWithResponse(ctx context.Context, body AddIDPTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*AddIDPTemplateResponse, error) {
	rsp, err := c.AddIDPTemplate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddIDPTemplateResponse(rsp)
}

// DeleteIDPTemplateWithResponse request returning *DeleteIDPTemplateResponse
func (c *ClientWithResponses) DeleteIDPTemplateWithResponse(ctx context.Context, templateId string, reqEditors ...RequestEditorFn) (*DeleteIDPTemplateResponse, error) {
	rsp, err := c.DeleteIDPTemplate(ctx, templateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIDPTemplateResponse(rsp)
}

// GetIDPTemplateWithResponse request returning *GetIDPTemplateResponse
func (c *ClientWithResponses) GetIDPTemplateWithResponse(ctx context.Context, templateId string, reqEditors ...RequestEditorFn) (*GetIDPTemplateResponse, error) {
	rsp, err := c.GetIDPTemplate(ctx, templateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIDPTemplateResponse(rsp)
}

// UpdateIDPTemplateWithBodyWithResponse request with arbitrary body returning *UpdateIDPTemplateResponse
func (c *ClientWithResponses) UpdateIDPTemplateWithBodyWithResponse(ctx context.Context, templateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIDPTemplateResponse, error) {
	rsp, err := c.UpdateIDPTemplateWithBody(ctx, templateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIDPTemplateResponse(rsp)
}

func (c *ClientWithResponses) UpdateIDPTemplateWithResponse(ctx context.Context, templateId string, body UpdateIDPTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIDPTemplateResponse, error) {
	rsp, err := c.UpdateIDPTemplate(ctx, templateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIDPTemplateResponse(rsp)
}

// DeleteIDPWithResponse request returning *DeleteIDPResponse
func (c *ClientWithResponses) DeleteIDPWithResponse(ctx context.Context, identityProviderId string, params *DeleteIDPParams, reqEditors ...RequestEditorFn) (*DeleteIDPResponse, error) {
	rsp, err := c.DeleteIDP(ctx, identityProviderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIDPResponse(rsp)
}

// GetIDPWithResponse request returning *GetIDPResponse
func (c *ClientWithResponses) GetIDPWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetIDPResponse, error) {
	rsp, err := c.GetIDP(ctx, identityProviderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIDPResponse(rsp)
}

// PatchIDPWithBodyWithResponse request with arbitrary body returning *PatchIDPResponse
func (c *ClientWithResponses) PatchIDPWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchIDPResponse, error) {
	rsp, err := c.PatchIDPWithBody(ctx, identityProviderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchIDPResponse(rsp)
}

func (c *ClientWithResponses) PatchIDPWithResponse(ctx context.Context, identityProviderId string, body PatchIDPJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchIDPResponse, error) {
	rsp, err := c.PatchIDP(ctx, identityProviderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchIDPResponse(rsp)
}

// GetClaimConfigWithResponse request returning *GetClaimConfigResponse
func (c *ClientWithResponses) GetClaimConfigWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetClaimConfigResponse, error) {
	rsp, err := c.GetClaimConfig(ctx, identityProviderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClaimConfigResponse(rsp)
}

// UpdateClaimConfigWithBodyWithResponse request with arbitrary body returning *UpdateClaimConfigResponse
func (c *ClientWithResponses) UpdateClaimConfigWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClaimConfigResponse, error) {
	rsp, err := c.UpdateClaimConfigWithBody(ctx, identityProviderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClaimConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateClaimConfigWithResponse(ctx context.Context, identityProviderId string, body UpdateClaimConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateClaimConfigResponse, error) {
	rsp, err := c.UpdateClaimConfig(ctx, identityProviderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClaimConfigResponse(rsp)
}

// GetConnectedAppsWithResponse request returning *GetConnectedAppsResponse
func (c *ClientWithResponses) GetConnectedAppsWithResponse(ctx context.Context, identityProviderId string, params *GetConnectedAppsParams, reqEditors ...RequestEditorFn) (*GetConnectedAppsResponse, error) {
	rsp, err := c.GetConnectedApps(ctx, identityProviderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectedAppsResponse(rsp)
}

// ExportIDPToFileWithResponse request returning *ExportIDPToFileResponse
func (c *ClientWithResponses) ExportIDPToFileWithResponse(ctx context.Context, identityProviderId string, params *ExportIDPToFileParams, reqEditors ...RequestEditorFn) (*ExportIDPToFileResponse, error) {
	rsp, err := c.ExportIDPToFile(ctx, identityProviderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportIDPToFileResponse(rsp)
}

// GetFederatedAuthenticatorsWithResponse request returning *GetFederatedAuthenticatorsResponse
func (c *ClientWithResponses) GetFederatedAuthenticatorsWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetFederatedAuthenticatorsResponse, error) {
	rsp, err := c.GetFederatedAuthenticators(ctx, identityProviderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFederatedAuthenticatorsResponse(rsp)
}

// UpdateFederatedAuthenticatorsWithBodyWithResponse request with arbitrary body returning *UpdateFederatedAuthenticatorsResponse
func (c *ClientWithResponses) UpdateFederatedAuthenticatorsWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFederatedAuthenticatorsResponse, error) {
	rsp, err := c.UpdateFederatedAuthenticatorsWithBody(ctx, identityProviderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFederatedAuthenticatorsResponse(rsp)
}

func (c *ClientWithResponses) UpdateFederatedAuthenticatorsWithResponse(ctx context.Context, identityProviderId string, body UpdateFederatedAuthenticatorsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFederatedAuthenticatorsResponse, error) {
	rsp, err := c.UpdateFederatedAuthenticators(ctx, identityProviderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFederatedAuthenticatorsResponse(rsp)
}

// GetFederatedAuthenticatorWithResponse request returning *GetFederatedAuthenticatorResponse
func (c *ClientWithResponses) GetFederatedAuthenticatorWithResponse(ctx context.Context, identityProviderId string, federatedAuthenticatorId string, reqEditors ...RequestEditorFn) (*GetFederatedAuthenticatorResponse, error) {
	rsp, err := c.GetFederatedAuthenticator(ctx, identityProviderId, federatedAuthenticatorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFederatedAuthenticatorResponse(rsp)
}

// UpdateFederatedAuthenticatorWithBodyWithResponse request with arbitrary body returning *UpdateFederatedAuthenticatorResponse
func (c *ClientWithResponses) UpdateFederatedAuthenticatorWithBodyWithResponse(ctx context.Context, identityProviderId string, federatedAuthenticatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFederatedAuthenticatorResponse, error) {
	rsp, err := c.UpdateFederatedAuthenticatorWithBody(ctx, identityProviderId, federatedAuthenticatorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFederatedAuthenticatorResponse(rsp)
}

func (c *ClientWithResponses) UpdateFederatedAuthenticatorWithResponse(ctx context.Context, identityProviderId string, federatedAuthenticatorId string, body UpdateFederatedAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFederatedAuthenticatorResponse, error) {
	rsp, err := c.UpdateFederatedAuthenticator(ctx, identityProviderId, federatedAuthenticatorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFederatedAuthenticatorResponse(rsp)
}

// GetGroupConfigWithResponse request returning *GetGroupConfigResponse
func (c *ClientWithResponses) GetGroupConfigWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetGroupConfigResponse, error) {
	rsp, err := c.GetGroupConfig(ctx, identityProviderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupConfigResponse(rsp)
}

// UpdateGroupConfigWithBodyWithResponse request with arbitrary body returning *UpdateGroupConfigResponse
func (c *ClientWithResponses) UpdateGroupConfigWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGroupConfigResponse, error) {
	rsp, err := c.UpdateGroupConfigWithBody(ctx, identityProviderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGroupConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateGroupConfigWithResponse(ctx context.Context, identityProviderId string, body UpdateGroupConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGroupConfigResponse, error) {
	rsp, err := c.UpdateGroupConfig(ctx, identityProviderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGroupConfigResponse(rsp)
}

// GetFederatedAssociationConfigWithResponse request returning *GetFederatedAssociationConfigResponse
func (c *ClientWithResponses) GetFederatedAssociationConfigWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetFederatedAssociationConfigResponse, error) {
	rsp, err := c.GetFederatedAssociationConfig(ctx, identityProviderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFederatedAssociationConfigResponse(rsp)
}

// UpdateFederatedAssociationConfigWithBodyWithResponse request with arbitrary body returning *UpdateFederatedAssociationConfigResponse
func (c *ClientWithResponses) UpdateFederatedAssociationConfigWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFederatedAssociationConfigResponse, error) {
	rsp, err := c.UpdateFederatedAssociationConfigWithBody(ctx, identityProviderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFederatedAssociationConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateFederatedAssociationConfigWithResponse(ctx context.Context, identityProviderId string, body UpdateFederatedAssociationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFederatedAssociationConfigResponse, error) {
	rsp, err := c.UpdateFederatedAssociationConfig(ctx, identityProviderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFederatedAssociationConfigResponse(rsp)
}

// UpdateIDPFromFileWithBodyWithResponse request with arbitrary body returning *UpdateIDPFromFileResponse
func (c *ClientWithResponses) UpdateIDPFromFileWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIDPFromFileResponse, error) {
	rsp, err := c.UpdateIDPFromFileWithBody(ctx, identityProviderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIDPFromFileResponse(rsp)
}

// GetProvisioningConfigWithResponse request returning *GetProvisioningConfigResponse
func (c *ClientWithResponses) GetProvisioningConfigWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetProvisioningConfigResponse, error) {
	rsp, err := c.GetProvisioningConfig(ctx, identityProviderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProvisioningConfigResponse(rsp)
}

// GetJITConfigWithResponse request returning *GetJITConfigResponse
func (c *ClientWithResponses) GetJITConfigWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetJITConfigResponse, error) {
	rsp, err := c.GetJITConfig(ctx, identityProviderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJITConfigResponse(rsp)
}

// UpdateJITConfigWithBodyWithResponse request with arbitrary body returning *UpdateJITConfigResponse
func (c *ClientWithResponses) UpdateJITConfigWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJITConfigResponse, error) {
	rsp, err := c.UpdateJITConfigWithBody(ctx, identityProviderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJITConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateJITConfigWithResponse(ctx context.Context, identityProviderId string, body UpdateJITConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJITConfigResponse, error) {
	rsp, err := c.UpdateJITConfig(ctx, identityProviderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJITConfigResponse(rsp)
}

// GetOutboundConnectorsWithResponse request returning *GetOutboundConnectorsResponse
func (c *ClientWithResponses) GetOutboundConnectorsWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetOutboundConnectorsResponse, error) {
	rsp, err := c.GetOutboundConnectors(ctx, identityProviderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOutboundConnectorsResponse(rsp)
}

// UpdateOutboundConnectorsWithBodyWithResponse request with arbitrary body returning *UpdateOutboundConnectorsResponse
func (c *ClientWithResponses) UpdateOutboundConnectorsWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOutboundConnectorsResponse, error) {
	rsp, err := c.UpdateOutboundConnectorsWithBody(ctx, identityProviderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOutboundConnectorsResponse(rsp)
}

func (c *ClientWithResponses) UpdateOutboundConnectorsWithResponse(ctx context.Context, identityProviderId string, body UpdateOutboundConnectorsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOutboundConnectorsResponse, error) {
	rsp, err := c.UpdateOutboundConnectors(ctx, identityProviderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOutboundConnectorsResponse(rsp)
}

// GetOutboundConnectorWithResponse request returning *GetOutboundConnectorResponse
func (c *ClientWithResponses) GetOutboundConnectorWithResponse(ctx context.Context, identityProviderId string, outboundProvisioningConnectorId string, reqEditors ...RequestEditorFn) (*GetOutboundConnectorResponse, error) {
	rsp, err := c.GetOutboundConnector(ctx, identityProviderId, outboundProvisioningConnectorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOutboundConnectorResponse(rsp)
}

// UpdateOutboundConnectorWithBodyWithResponse request with arbitrary body returning *UpdateOutboundConnectorResponse
func (c *ClientWithResponses) UpdateOutboundConnectorWithBodyWithResponse(ctx context.Context, identityProviderId string, outboundProvisioningConnectorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOutboundConnectorResponse, error) {
	rsp, err := c.UpdateOutboundConnectorWithBody(ctx, identityProviderId, outboundProvisioningConnectorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOutboundConnectorResponse(rsp)
}

func (c *ClientWithResponses) UpdateOutboundConnectorWithResponse(ctx context.Context, identityProviderId string, outboundProvisioningConnectorId string, body UpdateOutboundConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOutboundConnectorResponse, error) {
	rsp, err := c.UpdateOutboundConnector(ctx, identityProviderId, outboundProvisioningConnectorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOutboundConnectorResponse(rsp)
}

// GetRoleConfigWithResponse request returning *GetRoleConfigResponse
func (c *ClientWithResponses) GetRoleConfigWithResponse(ctx context.Context, identityProviderId string, reqEditors ...RequestEditorFn) (*GetRoleConfigResponse, error) {
	rsp, err := c.GetRoleConfig(ctx, identityProviderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleConfigResponse(rsp)
}

// UpdateRoleConfigWithBodyWithResponse request with arbitrary body returning *UpdateRoleConfigResponse
func (c *ClientWithResponses) UpdateRoleConfigWithBodyWithResponse(ctx context.Context, identityProviderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleConfigResponse, error) {
	rsp, err := c.UpdateRoleConfigWithBody(ctx, identityProviderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateRoleConfigWithResponse(ctx context.Context, identityProviderId string, body UpdateRoleConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleConfigResponse, error) {
	rsp, err := c.UpdateRoleConfig(ctx, identityProviderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleConfigResponse(rsp)
}

// GetTrustedTokenIssuersWithResponse request returning *GetTrustedTokenIssuersResponse
func (c *ClientWithResponses) GetTrustedTokenIssuersWithResponse(ctx context.Context, params *GetTrustedTokenIssuersParams, reqEditors ...RequestEditorFn) (*GetTrustedTokenIssuersResponse, error) {
	rsp, err := c.GetTrustedTokenIssuers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrustedTokenIssuersResponse(rsp)
}

// AddTrustedTokenIssuerWithBodyWithResponse request with arbitrary body returning *AddTrustedTokenIssuerResponse
func (c *ClientWithResponses) AddTrustedTokenIssuerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTrustedTokenIssuerResponse, error) {
	rsp, err := c.AddTrustedTokenIssuerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTrustedTokenIssuerResponse(rsp)
}

func (c *ClientWithResponses) AddTrustedTokenIssuerWithResponse(ctx context.Context, body AddTrustedTokenIssuerJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTrustedTokenIssuerResponse, error) {
	rsp, err := c.AddTrustedTokenIssuer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTrustedTokenIssuerResponse(rsp)
}

// DeleteTrustedTokenIssuerWithResponse request returning *DeleteTrustedTokenIssuerResponse
func (c *ClientWithResponses) DeleteTrustedTokenIssuerWithResponse(ctx context.Context, trustedTokenIssuerId string, params *DeleteTrustedTokenIssuerParams, reqEditors ...RequestEditorFn) (*DeleteTrustedTokenIssuerResponse, error) {
	rsp, err := c.DeleteTrustedTokenIssuer(ctx, trustedTokenIssuerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTrustedTokenIssuerResponse(rsp)
}

// GetTrustedTokenIssuerWithResponse request returning *GetTrustedTokenIssuerResponse
func (c *ClientWithResponses) GetTrustedTokenIssuerWithResponse(ctx context.Context, trustedTokenIssuerId string, reqEditors ...RequestEditorFn) (*GetTrustedTokenIssuerResponse, error) {
	rsp, err := c.GetTrustedTokenIssuer(ctx, trustedTokenIssuerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrustedTokenIssuerResponse(rsp)
}

// PatchTrustedTokenIssuerWithBodyWithResponse request with arbitrary body returning *PatchTrustedTokenIssuerResponse
func (c *ClientWithResponses) PatchTrustedTokenIssuerWithBodyWithResponse(ctx context.Context, trustedTokenIssuerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTrustedTokenIssuerResponse, error) {
	rsp, err := c.PatchTrustedTokenIssuerWithBody(ctx, trustedTokenIssuerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTrustedTokenIssuerResponse(rsp)
}

func (c *ClientWithResponses) PatchTrustedTokenIssuerWithResponse(ctx context.Context, trustedTokenIssuerId string, body PatchTrustedTokenIssuerJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTrustedTokenIssuerResponse, error) {
	rsp, err := c.PatchTrustedTokenIssuer(ctx, trustedTokenIssuerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTrustedTokenIssuerResponse(rsp)
}

// ParseGetIDPsResponse parses an HTTP response from a GetIDPsWithResponse call
func ParseGetIDPsResponse(rsp *http.Response) (*GetIDPsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIDPsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProviderListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseAddIDPResponse parses an HTTP response from a AddIDPWithResponse call
func ParseAddIDPResponse(rsp *http.Response) (*AddIDPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddIDPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IdentityProviderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest IdentityProviderResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 409:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseImportIDPFromFileResponse parses an HTTP response from a ImportIDPFromFileWithResponse call
func ParseImportIDPFromFileResponse(rsp *http.Response) (*ImportIDPFromFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportIDPFromFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMetaFederatedAuthenticatorsResponse parses an HTTP response from a GetMetaFederatedAuthenticatorsWithResponse call
func ParseGetMetaFederatedAuthenticatorsResponse(rsp *http.Response) (*GetMetaFederatedAuthenticatorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetaFederatedAuthenticatorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MetaFederatedAuthenticatorListItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMetaFederatedAuthenticatorResponse parses an HTTP response from a GetMetaFederatedAuthenticatorWithResponse call
func ParseGetMetaFederatedAuthenticatorResponse(rsp *http.Response) (*GetMetaFederatedAuthenticatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetaFederatedAuthenticatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetaFederatedAuthenticator
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMetaOutboundConnectorsResponse parses an HTTP response from a GetMetaOutboundConnectorsWithResponse call
func ParseGetMetaOutboundConnectorsResponse(rsp *http.Response) (*GetMetaOutboundConnectorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetaOutboundConnectorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MetaOutboundConnectorListItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMetaOutboundConnectorResponse parses an HTTP response from a GetMetaOutboundConnectorWithResponse call
func ParseGetMetaOutboundConnectorResponse(rsp *http.Response) (*GetMetaOutboundConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetaOutboundConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetaOutboundConnector
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIDPTemplatesResponse parses an HTTP response from a GetIDPTemplatesWithResponse call
func ParseGetIDPTemplatesResponse(rsp *http.Response) (*GetIDPTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIDPTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProviderTemplateListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddIDPTemplateResponse parses an HTTP response from a AddIDPTemplateWithResponse call
func ParseAddIDPTemplateResponse(rsp *http.Response) (*AddIDPTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddIDPTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 409:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDeleteIDPTemplateResponse parses an HTTP response from a DeleteIDPTemplateWithResponse call
func ParseDeleteIDPTemplateResponse(rsp *http.Response) (*DeleteIDPTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIDPTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIDPTemplateResponse parses an HTTP response from a GetIDPTemplateWithResponse call
func ParseGetIDPTemplateResponse(rsp *http.Response) (*GetIDPTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIDPTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProviderTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest IdentityProviderTemplate
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateIDPTemplateResponse parses an HTTP response from a UpdateIDPTemplateWithResponse call
func ParseUpdateIDPTemplateResponse(rsp *http.Response) (*UpdateIDPTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIDPTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 409:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML409 = &dest

	}

	return response, nil
}

// ParseDeleteIDPResponse parses an HTTP response from a DeleteIDPWithResponse call
func ParseDeleteIDPResponse(rsp *http.Response) (*DeleteIDPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIDPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIDPResponse parses an HTTP response from a GetIDPWithResponse call
func ParseGetIDPResponse(rsp *http.Response) (*GetIDPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIDPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProviderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest IdentityProviderResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePatchIDPResponse parses an HTTP response from a PatchIDPWithResponse call
func ParsePatchIDPResponse(rsp *http.Response) (*PatchIDPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchIDPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProviderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetClaimConfigResponse parses an HTTP response from a GetClaimConfigWithResponse call
func ParseGetClaimConfigResponse(rsp *http.Response) (*GetClaimConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClaimConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Claims
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateClaimConfigResponse parses an HTTP response from a UpdateClaimConfigWithResponse call
func ParseUpdateClaimConfigResponse(rsp *http.Response) (*UpdateClaimConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateClaimConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Claims
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetConnectedAppsResponse parses an HTTP response from a GetConnectedAppsWithResponse call
func ParseGetConnectedAppsResponse(rsp *http.Response) (*GetConnectedAppsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectedAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectedApps
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseExportIDPToFileResponse parses an HTTP response from a ExportIDPToFileWithResponse call
func ParseExportIDPToFileResponse(rsp *http.Response) (*ExportIDPToFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportIDPToFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest string
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/octet-stream) unsupported

	}

	return response, nil
}

// ParseGetFederatedAuthenticatorsResponse parses an HTTP response from a GetFederatedAuthenticatorsWithResponse call
func ParseGetFederatedAuthenticatorsResponse(rsp *http.Response) (*GetFederatedAuthenticatorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFederatedAuthenticatorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FederatedAuthenticatorListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateFederatedAuthenticatorsResponse parses an HTTP response from a UpdateFederatedAuthenticatorsWithResponse call
func ParseUpdateFederatedAuthenticatorsResponse(rsp *http.Response) (*UpdateFederatedAuthenticatorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFederatedAuthenticatorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FederatedAuthenticatorListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFederatedAuthenticatorResponse parses an HTTP response from a GetFederatedAuthenticatorWithResponse call
func ParseGetFederatedAuthenticatorResponse(rsp *http.Response) (*GetFederatedAuthenticatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFederatedAuthenticatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FederatedAuthenticator
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateFederatedAuthenticatorResponse parses an HTTP response from a UpdateFederatedAuthenticatorWithResponse call
func ParseUpdateFederatedAuthenticatorResponse(rsp *http.Response) (*UpdateFederatedAuthenticatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFederatedAuthenticatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FederatedAuthenticator
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGroupConfigResponse parses an HTTP response from a GetGroupConfigWithResponse call
func ParseGetGroupConfigResponse(rsp *http.Response) (*GetGroupConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdPGroupsConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateGroupConfigResponse parses an HTTP response from a UpdateGroupConfigWithResponse call
func ParseUpdateGroupConfigResponse(rsp *http.Response) (*UpdateGroupConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateGroupConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdPGroupsConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFederatedAssociationConfigResponse parses an HTTP response from a GetFederatedAssociationConfigWithResponse call
func ParseGetFederatedAssociationConfigResponse(rsp *http.Response) (*GetFederatedAssociationConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFederatedAssociationConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssociationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateFederatedAssociationConfigResponse parses an HTTP response from a UpdateFederatedAssociationConfigWithResponse call
func ParseUpdateFederatedAssociationConfigResponse(rsp *http.Response) (*UpdateFederatedAssociationConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFederatedAssociationConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssociationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateIDPFromFileResponse parses an HTTP response from a UpdateIDPFromFileWithResponse call
func ParseUpdateIDPFromFileResponse(rsp *http.Response) (*UpdateIDPFromFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIDPFromFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProvisioningConfigResponse parses an HTTP response from a GetProvisioningConfigWithResponse call
func ParseGetProvisioningConfigResponse(rsp *http.Response) (*GetProvisioningConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProvisioningConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProvisioningResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetJITConfigResponse parses an HTTP response from a GetJITConfigWithResponse call
func ParseGetJITConfigResponse(rsp *http.Response) (*GetJITConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJITConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JustInTimeProvisioning
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateJITConfigResponse parses an HTTP response from a UpdateJITConfigWithResponse call
func ParseUpdateJITConfigResponse(rsp *http.Response) (*UpdateJITConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateJITConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JustInTimeProvisioning
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOutboundConnectorsResponse parses an HTTP response from a GetOutboundConnectorsWithResponse call
func ParseGetOutboundConnectorsResponse(rsp *http.Response) (*GetOutboundConnectorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOutboundConnectorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OutboundConnectorListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateOutboundConnectorsResponse parses an HTTP response from a UpdateOutboundConnectorsWithResponse call
func ParseUpdateOutboundConnectorsResponse(rsp *http.Response) (*UpdateOutboundConnectorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOutboundConnectorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OutboundConnectorListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOutboundConnectorResponse parses an HTTP response from a GetOutboundConnectorWithResponse call
func ParseGetOutboundConnectorResponse(rsp *http.Response) (*GetOutboundConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOutboundConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OutboundConnector
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateOutboundConnectorResponse parses an HTTP response from a UpdateOutboundConnectorWithResponse call
func ParseUpdateOutboundConnectorResponse(rsp *http.Response) (*UpdateOutboundConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOutboundConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OutboundConnector
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRoleConfigResponse parses an HTTP response from a GetRoleConfigWithResponse call
func ParseGetRoleConfigResponse(rsp *http.Response) (*GetRoleConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Roles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateRoleConfigResponse parses an HTTP response from a UpdateRoleConfigWithResponse call
func ParseUpdateRoleConfigResponse(rsp *http.Response) (*UpdateRoleConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRoleConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Roles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTrustedTokenIssuersResponse parses an HTTP response from a GetTrustedTokenIssuersWithResponse call
func ParseGetTrustedTokenIssuersResponse(rsp *http.Response) (*GetTrustedTokenIssuersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrustedTokenIssuersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProviderListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddTrustedTokenIssuerResponse parses an HTTP response from a AddTrustedTokenIssuerWithResponse call
func ParseAddTrustedTokenIssuerResponse(rsp *http.Response) (*AddTrustedTokenIssuerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddTrustedTokenIssuerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TrustedTokenIssuerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest TrustedTokenIssuerResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 409:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDeleteTrustedTokenIssuerResponse parses an HTTP response from a DeleteTrustedTokenIssuerWithResponse call
func ParseDeleteTrustedTokenIssuerResponse(rsp *http.Response) (*DeleteTrustedTokenIssuerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTrustedTokenIssuerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTrustedTokenIssuerResponse parses an HTTP response from a GetTrustedTokenIssuerWithResponse call
func ParseGetTrustedTokenIssuerResponse(rsp *http.Response) (*GetTrustedTokenIssuerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrustedTokenIssuerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrustedTokenIssuerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest TrustedTokenIssuerResponse
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePatchTrustedTokenIssuerResponse parses an HTTP response from a PatchTrustedTokenIssuerWithResponse call
func ParsePatchTrustedTokenIssuerResponse(rsp *http.Response) (*PatchTrustedTokenIssuerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchTrustedTokenIssuerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrustedTokenIssuerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
