// Package internal provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package internal

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"gopkg.in/yaml.v2"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
	OAuth2Scopes    = "OAuth2.Scopes"
)

// Defines values for ApplicationListItemAccess.
const (
	ApplicationListItemAccessREAD  ApplicationListItemAccess = "READ"
	ApplicationListItemAccessWRITE ApplicationListItemAccess = "WRITE"
)

// Defines values for ApplicationResponseModelAccess.
const (
	ApplicationResponseModelAccessREAD  ApplicationResponseModelAccess = "READ"
	ApplicationResponseModelAccessWRITE ApplicationResponseModelAccess = "WRITE"
)

// Defines values for ApplicationTemplateModelCategory.
const (
	ApplicationTemplateModelCategoryDEFAULT ApplicationTemplateModelCategory = "DEFAULT"
	ApplicationTemplateModelCategoryVENDOR  ApplicationTemplateModelCategory = "VENDOR"
)

// Defines values for ApplicationTemplatesListItemCategory.
const (
	ApplicationTemplatesListItemCategoryDEFAULT ApplicationTemplatesListItemCategory = "DEFAULT"
	ApplicationTemplatesListItemCategoryVENDOR  ApplicationTemplatesListItemCategory = "VENDOR"
)

// Defines values for AssociatedRolesConfigAllowedAudience.
const (
	APPLICATION  AssociatedRolesConfigAllowedAudience = "APPLICATION"
	ORGANIZATION AssociatedRolesConfigAllowedAudience = "ORGANIZATION"
)

// Defines values for AuthenticationSequenceType.
const (
	DEFAULT     AuthenticationSequenceType = "DEFAULT"
	USERDEFINED AuthenticationSequenceType = "USER_DEFINED"
)

// Defines values for BasicOrganizationResponseStatus.
const (
	BasicOrganizationResponseStatusACTIVE   BasicOrganizationResponseStatus = "ACTIVE"
	BasicOrganizationResponseStatusDISABLED BasicOrganizationResponseStatus = "DISABLED"
)

// Defines values for ClaimConfigurationDialect.
const (
	CUSTOM ClaimConfigurationDialect = "CUSTOM"
	LOCAL  ClaimConfigurationDialect = "LOCAL"
)

// Defines values for CustomInboundProtocolPropertyType.
const (
	BOOLEAN CustomInboundProtocolPropertyType = "BOOLEAN"
	INTEGER CustomInboundProtocolPropertyType = "INTEGER"
	STRING  CustomInboundProtocolPropertyType = "STRING"
)

// Defines values for OpenIDConnectConfigurationState.
const (
	OpenIDConnectConfigurationStateACTIVE  OpenIDConnectConfigurationState = "ACTIVE"
	OpenIDConnectConfigurationStateREVOKED OpenIDConnectConfigurationState = "REVOKED"
)

// Defines values for SingleLogoutProfileLogoutMethod.
const (
	BACKCHANNEL              SingleLogoutProfileLogoutMethod = "BACKCHANNEL"
	FRONTCHANNELHTTPPOST     SingleLogoutProfileLogoutMethod = "FRONTCHANNEL_HTTP_POST"
	FRONTCHANNELHTTPREDIRECT SingleLogoutProfileLogoutMethod = "FRONTCHANNEL_HTTP_REDIRECT"
)

// Defines values for SingleSignOnProfileBindings.
const (
	ARTIFACT     SingleSignOnProfileBindings = "ARTIFACT"
	HTTPPOST     SingleSignOnProfileBindings = "HTTP_POST"
	HTTPREDIRECT SingleSignOnProfileBindings = "HTTP_REDIRECT"
)

// Defines values for StatusEnum.
const (
	COMPLETED  StatusEnum = "COMPLETED"
	FAILED     StatusEnum = "FAILED"
	INPROGRESS StatusEnum = "IN_PROGRESS"
)

// Defines values for FileTypeHeaderParam.
const (
	FileTypeHeaderParamApplicationjson  FileTypeHeaderParam = "application/json"
	FileTypeHeaderParamApplicationxYaml FileTypeHeaderParam = "application/x-yaml"
	FileTypeHeaderParamApplicationxml   FileTypeHeaderParam = "application/xml"
	FileTypeHeaderParamApplicationyaml  FileTypeHeaderParam = "application/yaml"
	FileTypeHeaderParamTextyaml         FileTypeHeaderParam = "text/yaml"
)

// Defines values for SortOrderQueryParam.
const (
	SortOrderQueryParamASC  SortOrderQueryParam = "ASC"
	SortOrderQueryParamDESC SortOrderQueryParam = "DESC"
)

// Defines values for GetAllApplicationsParamsSortOrder.
const (
	GetAllApplicationsParamsSortOrderASC  GetAllApplicationsParamsSortOrder = "ASC"
	GetAllApplicationsParamsSortOrderDESC GetAllApplicationsParamsSortOrder = "DESC"
)

// Defines values for ExportApplicationAsFileParamsAccept.
const (
	ExportApplicationAsFileParamsAcceptApplicationjson  ExportApplicationAsFileParamsAccept = "application/json"
	ExportApplicationAsFileParamsAcceptApplicationxYaml ExportApplicationAsFileParamsAccept = "application/x-yaml"
	ExportApplicationAsFileParamsAcceptApplicationxml   ExportApplicationAsFileParamsAccept = "application/xml"
	ExportApplicationAsFileParamsAcceptApplicationyaml  ExportApplicationAsFileParamsAccept = "application/yaml"
	ExportApplicationAsFileParamsAcceptTextyaml         ExportApplicationAsFileParamsAccept = "text/yaml"
)

// AccessTokenConfiguration defines model for AccessTokenConfiguration.
type AccessTokenConfiguration struct {
	AccessTokenAttributes                 *[]string `json:"accessTokenAttributes,omitempty"`
	ApplicationAccessTokenExpiryInSeconds *int64    `json:"applicationAccessTokenExpiryInSeconds,omitempty"`

	// BindingType OAuth2 access token and refresh token can be bound to an external attribute during the token generation so that it can be optionally validated during the API invocation.
	BindingType *string `json:"bindingType,omitempty"`

	// RevokeTokensWhenIDPSessionTerminated If enabled, when the IDP session is terminated, all the access tokens bound to the session will get revoked.
	RevokeTokensWhenIDPSessionTerminated *bool   `json:"revokeTokensWhenIDPSessionTerminated,omitempty"`
	Type                                 *string `json:"type,omitempty"`
	UserAccessTokenExpiryInSeconds       *int64  `json:"userAccessTokenExpiryInSeconds,omitempty"`

	// ValidateTokenBinding If enabled, both access token and the token binding needs to be present for a successful API invocation.
	ValidateTokenBinding *bool `json:"validateTokenBinding,omitempty"`
}

// AdaptiveAuthTemplates defines model for AdaptiveAuthTemplates.
type AdaptiveAuthTemplates struct {
	TemplatesJSON *string `json:"templatesJSON,omitempty"`
}

// AdditionalProperties Denotes additional properties of the application. It is only supported by getApplication and getAllApplications request.
type AdditionalProperties = []AdditionalSpProperty

// AdditionalSpProperty defines model for AdditionalSpProperty.
type AdditionalSpProperty struct {
	DisplayName *string `json:"displayName,omitempty"`
	Name        string  `json:"name"`
	Value       string  `json:"value"`
}

// AdvancedApplicationConfiguration defines model for AdvancedApplicationConfiguration.
type AdvancedApplicationConfiguration struct {
	// AdditionalSpProperties Denotes additional properties of the application. It is only supported by getApplication and getAllApplications request.
	AdditionalSpProperties *AdditionalProperties `json:"additionalSpProperties,omitempty"`

	// AttestationMetaData Decides the client attestation meta data for the application.
	AttestationMetaData *struct {
		// AndroidAttestationServiceCredentials Decides the credentials for the service account to access Google Play Integrity Service.
		AndroidAttestationServiceCredentials *map[string]interface{} `json:"androidAttestationServiceCredentials,omitempty"`

		// AndroidPackageName Decides the android package name of the application.
		AndroidPackageName *string `json:"androidPackageName,omitempty"`

		// AppleAppId Decides the apple app id which denotes {apple-teamId}.{bundleId}.
		AppleAppId *string `json:"appleAppId,omitempty"`

		// EnableClientAttestation Decides whether client attestation enabled for this application.
		EnableClientAttestation *bool `json:"enableClientAttestation,omitempty"`
	} `json:"attestationMetaData,omitempty"`
	Certificate *Certificate `json:"certificate,omitempty"`

	// DiscoverableByEndUsers Decides whether the application is visible for end users.
	DiscoverableByEndUsers *bool `json:"discoverableByEndUsers,omitempty"`

	// DiscoverableGroups List of groups from user stores where users in those groups can discover the application.
	DiscoverableGroups *[]DiscoverableGroup `json:"discoverableGroups,omitempty"`

	// EnableAPIBasedAuthentication Decides whether API Based Authentication is enabled for this application.
	EnableAPIBasedAuthentication *bool `json:"enableAPIBasedAuthentication,omitempty"`

	// EnableAuthorization Decides whether authorization policies needs to be engaged during authentication flows.
	EnableAuthorization *bool `json:"enableAuthorization,omitempty"`

	// Fragment Decides whether application is a fragment application.
	Fragment *bool `json:"fragment,omitempty"`

	// ReturnAuthenticatedIdpList Decides whether the list of authenticated identity providers need to be returned in the authentication response.
	ReturnAuthenticatedIdpList *bool `json:"returnAuthenticatedIdpList,omitempty"`

	// Saas Decides whether the application is accessible across tenants.
	Saas *bool `json:"saas,omitempty"`

	// SkipLoginConsent Decides whether user consent needs to be skipped during login flows.
	SkipLoginConsent *bool `json:"skipLoginConsent,omitempty"`

	// SkipLogoutConsent Decides whether user consent needs to be skipped during logout flows.
	SkipLogoutConsent *bool `json:"skipLogoutConsent,omitempty"`

	// TrustedAppConfiguration Decides the trusted app configurations for the application.
	TrustedAppConfiguration *TrustedAppConfiguration `json:"trustedAppConfiguration,omitempty"`

	// UseExternalConsentPage Decides whether users should be presented with an external consent page.
	UseExternalConsentPage *bool `json:"useExternalConsentPage,omitempty"`
}

// ApplicationListItem defines model for ApplicationListItem.
type ApplicationListItem struct {
	Access                 *ApplicationListItemAccess        `json:"access,omitempty"`
	AccessUrl              *string                           `json:"accessUrl,omitempty"`
	AdvancedConfigurations *AdvancedApplicationConfiguration `json:"advancedConfigurations,omitempty"`
	ApplicationEnabled     *bool                             `json:"applicationEnabled,omitempty"`
	ApplicationVersion     *string                           `json:"applicationVersion,omitempty"`
	AssociatedRoles        *AssociatedRolesConfig            `json:"associatedRoles,omitempty"`
	ClientId               *string                           `json:"clientId,omitempty"`
	Description            *string                           `json:"description,omitempty"`
	Id                     *string                           `json:"id,omitempty"`
	Image                  *string                           `json:"image,omitempty"`
	Issuer                 *string                           `json:"issuer,omitempty"`
	Name                   *string                           `json:"name,omitempty"`
	Realm                  *string                           `json:"realm,omitempty"`
	Self                   *string                           `json:"self,omitempty"`
	TemplateId             *string                           `json:"templateId,omitempty"`

	// TemplateVersion Version of the template used to create the application.
	TemplateVersion *string `json:"templateVersion,omitempty"`
}

// ApplicationListItemAccess defines model for ApplicationListItem.Access.
type ApplicationListItemAccess string

// ApplicationListResponse defines model for ApplicationListResponse.
type ApplicationListResponse struct {
	Applications *[]ApplicationListItem `json:"applications,omitempty"`

	// Count Number of elements in the returned page.
	Count *int    `json:"count,omitempty"`
	Links *[]Link `json:"links,omitempty"`

	// StartIndex Index of the first element of the page, which will be equal to offset + 1.
	StartIndex *int `json:"startIndex,omitempty"`

	// TotalResults Number of results that match the listing operation.
	TotalResults *int `json:"totalResults,omitempty"`
}

// ApplicationModel defines model for ApplicationModel.
type ApplicationModel struct {
	AccessUrl              *string                           `json:"accessUrl,omitempty"`
	AdvancedConfigurations *AdvancedApplicationConfiguration `json:"advancedConfigurations,omitempty"`

	// ApplicationEnabled Decides whether the application is enabled.
	ApplicationEnabled           *bool                   `json:"applicationEnabled,omitempty"`
	AssociatedRoles              *AssociatedRolesConfig  `json:"associatedRoles,omitempty"`
	AuthenticationSequence       *AuthenticationSequence `json:"authenticationSequence,omitempty"`
	ClaimConfiguration           *ClaimConfiguration     `json:"claimConfiguration,omitempty"`
	Description                  *string                 `json:"description,omitempty"`
	Id                           *string                 `json:"id,omitempty"`
	ImageUrl                     *string                 `json:"imageUrl,omitempty"`
	InboundProtocolConfiguration *InboundProtocols       `json:"inboundProtocolConfiguration,omitempty"`

	// IsB2BSelfServiceApp Decides whether the application used to for B2B self service
	IsB2BSelfServiceApp *bool `json:"isB2BSelfServiceApp,omitempty"`

	// IsManagementApp Decides whether the application used to access System APIs
	IsManagementApp            *bool                      `json:"isManagementApp,omitempty"`
	LogoutReturnUrl            *string                    `json:"logoutReturnUrl,omitempty"`
	Name                       string                     `json:"name"`
	ProvisioningConfigurations *ProvisioningConfiguration `json:"provisioningConfigurations,omitempty"`
	TemplateId                 *string                    `json:"templateId,omitempty"`

	// TemplateVersion Version of the template used to create the application.
	TemplateVersion *string `json:"templateVersion,omitempty"`
}

// ApplicationOwner defines model for ApplicationOwner.
type ApplicationOwner struct {
	Id string `json:"id"`
}

// ApplicationPatchModel defines model for ApplicationPatchModel.
type ApplicationPatchModel struct {
	AccessUrl              *string                           `json:"accessUrl,omitempty"`
	AdvancedConfigurations *AdvancedApplicationConfiguration `json:"advancedConfigurations,omitempty"`

	// ApplicationEnabled Decides whether the application is enabled.
	ApplicationEnabled         *bool                      `json:"applicationEnabled,omitempty"`
	ApplicationVersion         *string                    `json:"applicationVersion,omitempty"`
	AssociatedRoles            *AssociatedRolesConfig     `json:"associatedRoles,omitempty"`
	AuthenticationSequence     *AuthenticationSequence    `json:"authenticationSequence,omitempty"`
	ClaimConfiguration         *ClaimConfiguration        `json:"claimConfiguration,omitempty"`
	Description                *string                    `json:"description,omitempty"`
	ImageUrl                   *string                    `json:"imageUrl,omitempty"`
	LogoutReturnUrl            *string                    `json:"logoutReturnUrl,omitempty"`
	Name                       *string                    `json:"name,omitempty"`
	ProvisioningConfigurations *ProvisioningConfiguration `json:"provisioningConfigurations,omitempty"`
	TemplateId                 *string                    `json:"templateId,omitempty"`

	// TemplateVersion Version of the template used to create the application.
	TemplateVersion *string `json:"templateVersion,omitempty"`
}

// ApplicationResponseModel defines model for ApplicationResponseModel.
type ApplicationResponseModel struct {
	Access                 *ApplicationResponseModelAccess   `json:"access,omitempty"`
	AccessUrl              *string                           `json:"accessUrl,omitempty"`
	AdvancedConfigurations *AdvancedApplicationConfiguration `json:"advancedConfigurations,omitempty"`

	// ApplicationEnabled Decides whether the application is enabled.
	ApplicationEnabled     *bool                         `json:"applicationEnabled,omitempty"`
	ApplicationVersion     *string                       `json:"applicationVersion,omitempty"`
	AssociatedRoles        *AssociatedRolesConfig        `json:"associatedRoles,omitempty"`
	AuthenticationSequence *AuthenticationSequence       `json:"authenticationSequence,omitempty"`
	ClaimConfiguration     *ClaimConfiguration           `json:"claimConfiguration,omitempty"`
	ClientId               *string                       `json:"clientId,omitempty"`
	Description            *string                       `json:"description,omitempty"`
	Id                     *string                       `json:"id,omitempty"`
	ImageUrl               *string                       `json:"imageUrl,omitempty"`
	InboundProtocols       *InboundProtocolsListResponse `json:"inboundProtocols,omitempty"`

	// IsB2BSelfServiceApp Decides whether the application used to for B2B self service
	IsB2BSelfServiceApp *bool `json:"isB2BSelfServiceApp,omitempty"`

	// IsManagementApp Decides whether the application used to access System APIs
	IsManagementApp            *bool                      `json:"isManagementApp,omitempty"`
	Issuer                     *string                    `json:"issuer,omitempty"`
	LogoutReturnUrl            *string                    `json:"logoutReturnUrl,omitempty"`
	Name                       string                     `json:"name"`
	ProvisioningConfigurations *ProvisioningConfiguration `json:"provisioningConfigurations,omitempty"`
	Realm                      *string                    `json:"realm,omitempty"`
	TemplateId                 *string                    `json:"templateId,omitempty"`

	// TemplateVersion Version of the template used to create the application.
	TemplateVersion *string `json:"templateVersion,omitempty"`
}

// ApplicationResponseModelAccess defines model for ApplicationResponseModel.Access.
type ApplicationResponseModelAccess string

// ApplicationSharePOSTRequest defines model for ApplicationSharePOSTRequest.
type ApplicationSharePOSTRequest struct {
	ShareWithAllChildren *bool     `json:"shareWithAllChildren,omitempty"`
	SharedOrganizations  *[]string `json:"sharedOrganizations,omitempty"`
}

// ApplicationTemplateModel defines model for ApplicationTemplateModel.
type ApplicationTemplateModel struct {
	Application            ApplicationModel                  `json:"application"`
	AuthenticationProtocol *string                           `json:"authenticationProtocol,omitempty"`
	Category               *ApplicationTemplateModelCategory `json:"category,omitempty"`
	Description            *string                           `json:"description,omitempty"`
	DisplayOrder           *int                              `json:"displayOrder,omitempty"`
	Id                     *string                           `json:"id,omitempty"`
	Image                  *string                           `json:"image,omitempty"`
	Name                   string                            `json:"name"`
	TemplateGroup          *string                           `json:"templateGroup,omitempty"`
	Types                  *[]string                         `json:"types,omitempty"`
}

// ApplicationTemplateModelCategory defines model for ApplicationTemplateModel.Category.
type ApplicationTemplateModelCategory string

// ApplicationTemplatesList defines model for ApplicationTemplatesList.
type ApplicationTemplatesList struct {
	Templates *[]ApplicationTemplatesListItem `json:"templates,omitempty"`
}

// ApplicationTemplatesListItem defines model for ApplicationTemplatesListItem.
type ApplicationTemplatesListItem struct {
	AuthenticationProtocol *string                               `json:"authenticationProtocol,omitempty"`
	Category               *ApplicationTemplatesListItemCategory `json:"category,omitempty"`
	Description            *string                               `json:"description,omitempty"`
	DisplayOrder           *int                                  `json:"displayOrder,omitempty"`
	Id                     *string                               `json:"id,omitempty"`
	Image                  *string                               `json:"image,omitempty"`
	Name                   *string                               `json:"name,omitempty"`
	Self                   *string                               `json:"self,omitempty"`
	TemplateGroup          *string                               `json:"templateGroup,omitempty"`
	Types                  *[]string                             `json:"types,omitempty"`
}

// ApplicationTemplatesListItemCategory defines model for ApplicationTemplatesListItem.Category.
type ApplicationTemplatesListItemCategory string

// AssertionEncryptionConfiguration defines model for AssertionEncryptionConfiguration.
type AssertionEncryptionConfiguration struct {
	AssertionEncryptionAlgorithm *string `json:"assertionEncryptionAlgorithm,omitempty"`
	Enabled                      *bool   `json:"enabled,omitempty"`
	KeyEncryptionAlgorithm       *string `json:"keyEncryptionAlgorithm,omitempty"`
}

// AssociatedRolesConfig defines model for AssociatedRolesConfig.
type AssociatedRolesConfig struct {
	AllowedAudience AssociatedRolesConfigAllowedAudience `json:"allowedAudience"`
	Roles           *[]Role                              `json:"roles,omitempty"`
}

// AssociatedRolesConfigAllowedAudience defines model for AssociatedRolesConfig.AllowedAudience.
type AssociatedRolesConfigAllowedAudience string

// AuthProtocolMetadata defines model for AuthProtocolMetadata.
type AuthProtocolMetadata struct {
	DisplayName *string `json:"displayName,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// AuthenticationSequence defines model for AuthenticationSequence.
type AuthenticationSequence struct {
	AttributeStepId           *int                       `json:"attributeStepId,omitempty"`
	RequestPathAuthenticators *[]string                  `json:"requestPathAuthenticators,omitempty"`
	Script                    *string                    `json:"script,omitempty"`
	Steps                     *[]AuthenticationStepModel `json:"steps,omitempty"`
	SubjectStepId             *int                       `json:"subjectStepId,omitempty"`

	// Type  - DEFAULT type indicates that the application will use the default authentication sequence specified at the tenant level. When the DEFAULT type is used, the information given in the other fields of the AuthenticationSequence will be ignored and overriden with values defined at the tenant level.
	// - USER_DEFINED type indicates that the application will use a user-defined authentication sequence.
	Type *AuthenticationSequenceType `json:"type,omitempty"`
}

// AuthenticationSequenceType  - DEFAULT type indicates that the application will use the default authentication sequence specified at the tenant level. When the DEFAULT type is used, the information given in the other fields of the AuthenticationSequence will be ignored and overriden with values defined at the tenant level.
// - USER_DEFINED type indicates that the application will use a user-defined authentication sequence.
type AuthenticationSequenceType string

// AuthenticationStepModel defines model for AuthenticationStepModel.
type AuthenticationStepModel struct {
	Id      int             `json:"id"`
	Options []Authenticator `json:"options"`
}

// Authenticator defines model for Authenticator.
type Authenticator struct {
	Authenticator string `json:"authenticator"`
	Idp           string `json:"idp"`
}

// AuthorizedAPICreationModel defines model for AuthorizedAPICreationModel.
type AuthorizedAPICreationModel struct {
	AuthorizationDetailsTypes *[]string `json:"authorizationDetailsTypes,omitempty"`
	Id                        *string   `json:"id,omitempty"`
	PolicyIdentifier          *string   `json:"policyIdentifier,omitempty"`
	Scopes                    *[]string `json:"scopes,omitempty"`
}

// AuthorizedAPIPatchModel defines model for AuthorizedAPIPatchModel.
type AuthorizedAPIPatchModel struct {
	AddedAuthorizationDetailsTypes   *[]string `json:"addedAuthorizationDetailsTypes,omitempty"`
	AddedScopes                      *[]string `json:"addedScopes,omitempty"`
	RemovedAuthorizationDetailsTypes *[]string `json:"removedAuthorizationDetailsTypes,omitempty"`
	RemovedScopes                    *[]string `json:"removedScopes,omitempty"`
}

// AuthorizedAPIResponse defines model for AuthorizedAPIResponse.
type AuthorizedAPIResponse struct {
	AuthorizedAuthorizationDetailsTypes *[]AuthorizedAuthorizationDetailsTypes `json:"authorizedAuthorizationDetailsTypes,omitempty"`
	AuthorizedScopes                    *[]AuthorizedScope                     `json:"authorizedScopes,omitempty"`
	DisplayName                         *string                                `json:"displayName,omitempty"`
	Id                                  *string                                `json:"id,omitempty"`
	Identifier                          *string                                `json:"identifier,omitempty"`
	PolicyId                            *string                                `json:"policyId,omitempty"`
	Type                                *string                                `json:"type,omitempty"`
}

// AuthorizedAuthorizationDetailsTypes defines model for AuthorizedAuthorizationDetailsTypes.
type AuthorizedAuthorizationDetailsTypes struct {
	// Id an unique id of the registered authorization details type
	Id *string `json:"id,omitempty"`

	// Name display name of the authorization details type
	Name string `json:"name"`

	// Type an unique type of the authorization details type
	Type string `json:"type"`
}

// AuthorizedScope defines model for AuthorizedScope.
type AuthorizedScope struct {
	DisplayName *string `json:"displayName,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// BasicOrganizationResponse defines model for BasicOrganizationResponse.
type BasicOrganizationResponse struct {
	Id     string                          `json:"id"`
	Name   string                          `json:"name"`
	Ref    string                          `json:"ref"`
	Status BasicOrganizationResponseStatus `json:"status"`
}

// BasicOrganizationResponseStatus defines model for BasicOrganizationResponse.Status.
type BasicOrganizationResponseStatus string

// Certificate defines model for Certificate.
type Certificate struct {
	// Type Certificate type. This should be either JWKS or PEM.
	Type *string `json:"type,omitempty"`

	// Value Certificate value. If type is JWKS, value should be jwks URL. If type is PEM, value should be the certificate in PEM format.
	Value *string `json:"value,omitempty"`
}

// Claim defines model for Claim.
type Claim struct {
	DisplayName *string `json:"displayName,omitempty"`
	Id          *string `json:"id,omitempty"`
	Uri         string  `json:"uri"`
}

// ClaimConfiguration defines model for ClaimConfiguration.
type ClaimConfiguration struct {
	ClaimMappings   *[]ClaimMappings               `json:"claimMappings,omitempty"`
	Dialect         *ClaimConfigurationDialect     `json:"dialect,omitempty"`
	RequestedClaims *[]RequestedClaimConfiguration `json:"requestedClaims,omitempty"`
	Role            *RoleConfig                    `json:"role,omitempty"`
	Subject         *SubjectConfig                 `json:"subject,omitempty"`
}

// ClaimConfigurationDialect defines model for ClaimConfiguration.Dialect.
type ClaimConfigurationDialect string

// ClaimMappings defines model for ClaimMappings.
type ClaimMappings struct {
	// ApplicationClaim Claim URI recieved by the application
	ApplicationClaim string `json:"applicationClaim"`
	LocalClaim       Claim  `json:"localClaim"`
}

// ClientAuthenticationConfiguration defines model for ClientAuthenticationConfiguration.
type ClientAuthenticationConfiguration struct {
	TlsClientAuthSubjectDn           *string `json:"tlsClientAuthSubjectDn,omitempty"`
	TokenEndpointAllowReusePvtKeyJwt *bool   `json:"tokenEndpointAllowReusePvtKeyJwt,omitempty"`
	TokenEndpointAuthMethod          *string `json:"tokenEndpointAuthMethod,omitempty"`
	TokenEndpointAuthSigningAlg      *string `json:"tokenEndpointAuthSigningAlg,omitempty"`
}

// ClientAuthenticationMethod defines model for ClientAuthenticationMethod.
type ClientAuthenticationMethod struct {
	DisplayName *string `json:"displayName,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ClientAuthenticationMethodMetadata defines model for ClientAuthenticationMethodMetadata.
type ClientAuthenticationMethodMetadata struct {
	Options *[]ClientAuthenticationMethod `json:"options,omitempty"`
}

// ConfiguredAuthenticator defines model for ConfiguredAuthenticator.
type ConfiguredAuthenticator struct {
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// ConfiguredAuthenticatorsModal defines model for ConfiguredAuthenticatorsModal.
type ConfiguredAuthenticatorsModal struct {
	FederatedAuthenticators *[]ConfiguredAuthenticator `json:"federatedAuthenticators,omitempty"`
	LocalAuthenticators     *[]ConfiguredAuthenticator `json:"localAuthenticators,omitempty"`
	StepId                  *int                       `json:"stepId,omitempty"`
}

// CustomInboundProtocolConfiguration defines model for CustomInboundProtocolConfiguration.
type CustomInboundProtocolConfiguration struct {
	ConfigName string           `json:"configName"`
	Name       string           `json:"name"`
	Properties *[]PropertyModel `json:"properties,omitempty"`
}

// CustomInboundProtocolMetaData defines model for CustomInboundProtocolMetaData.
type CustomInboundProtocolMetaData struct {
	ConfigName  *string                          `json:"configName,omitempty"`
	DisplayName *string                          `json:"displayName,omitempty"`
	Properties  *[]CustomInboundProtocolProperty `json:"properties,omitempty"`
}

// CustomInboundProtocolProperty defines model for CustomInboundProtocolProperty.
type CustomInboundProtocolProperty struct {
	AvailableValues *[]string                          `json:"availableValues,omitempty"`
	DefaultValue    *string                            `json:"defaultValue,omitempty"`
	DisplayName     *string                            `json:"displayName,omitempty"`
	DisplayOrder    *int                               `json:"displayOrder,omitempty"`
	IsConfidential  *bool                              `json:"isConfidential,omitempty"`
	Name            *string                            `json:"name,omitempty"`
	Required        *bool                              `json:"required,omitempty"`
	Type            *CustomInboundProtocolPropertyType `json:"type,omitempty"`
	ValidationRegex *string                            `json:"validationRegex,omitempty"`
}

// CustomInboundProtocolPropertyType defines model for CustomInboundProtocolProperty.Type.
type CustomInboundProtocolPropertyType string

// DiscoverableGroup defines model for DiscoverableGroup.
type DiscoverableGroup struct {
	// Groups List of groups configured for discoverability.
	Groups []GroupBasicInfo `json:"groups"`

	// UserStore The user store domain to which the groups belong.
	UserStore string `json:"userStore"`
}

// Error defines model for Error.
type Error struct {
	Code        *string `json:"code,omitempty"`
	Description *string `json:"description,omitempty"`
	Message     *string `json:"message,omitempty"`
	TraceId     *string `json:"traceId,omitempty"`
}

// FapiMetadata defines model for FapiMetadata.
type FapiMetadata struct {
	AllowedEncryptionAlgorithms *MetadataProperty                   `json:"allowedEncryptionAlgorithms,omitempty"`
	AllowedSignatureAlgorithms  *MetadataProperty                   `json:"allowedSignatureAlgorithms,omitempty"`
	TokenEndpointAuthMethod     *ClientAuthenticationMethodMetadata `json:"tokenEndpointAuthMethod,omitempty"`
}

// FileUpload defines model for FileUpload.
type FileUpload struct {
	// File file to upload
	File *openapi_types.File `json:"file,omitempty"`
}

// GrantType defines model for GrantType.
type GrantType struct {
	DisplayName *string `json:"displayName,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// GrantTypeMetaData defines model for GrantTypeMetaData.
type GrantTypeMetaData struct {
	Options *[]GrantType `json:"options,omitempty"`
}

// GroupBasicInfo defines model for GroupBasicInfo.
type GroupBasicInfo struct {
	// Id The unique identifier of the group.
	Id string `json:"id"`

	// Name The name of the group.
	Name *string `json:"name,omitempty"`
}

// HybridFlowConfiguration defines model for HybridFlowConfiguration.
type HybridFlowConfiguration struct {
	// Enable Indicates whether the hybrid flow is enabled.
	Enable *bool `json:"enable,omitempty"`

	// ResponseType Specifies the allowed response types for the hybrid flow, provided as a comma-separated string. The supported combinations are: 'code token', 'code id_token token', and 'code id_token'.
	ResponseType *string `json:"responseType,omitempty"`
}

// IdTokenConfiguration defines model for IdTokenConfiguration.
type IdTokenConfiguration struct {
	Audience                 *[]string                       `json:"audience,omitempty"`
	Encryption               *IdTokenEncryptionConfiguration `json:"encryption,omitempty"`
	ExpiryInSeconds          *int64                          `json:"expiryInSeconds,omitempty"`
	IdTokenSignedResponseAlg *string                         `json:"idTokenSignedResponseAlg,omitempty"`
}

// IdTokenEncryptionConfiguration defines model for IdTokenEncryptionConfiguration.
type IdTokenEncryptionConfiguration struct {
	Algorithm *string `json:"algorithm,omitempty"`
	Enabled   *bool   `json:"enabled,omitempty"`
	Method    *string `json:"method,omitempty"`
}

// IdpInitiatedSingleLogout defines model for IdpInitiatedSingleLogout.
type IdpInitiatedSingleLogout struct {
	Enabled      *bool     `json:"enabled,omitempty"`
	ReturnToUrls *[]string `json:"returnToUrls,omitempty"`
}

// InboundProtocolListItem defines model for InboundProtocolListItem.
type InboundProtocolListItem struct {
	Name string `json:"name"`
	Self string `json:"self"`
	Type string `json:"type"`
}

// InboundProtocols defines model for InboundProtocols.
type InboundProtocols struct {
	Custom     *[]CustomInboundProtocolConfiguration `json:"custom,omitempty"`
	Oidc       *OpenIDConnectConfiguration           `json:"oidc,omitempty"`
	PassiveSts *PassiveStsConfiguration              `json:"passiveSts,omitempty"`
	Saml       *SAML2Configuration                   `json:"saml,omitempty"`
	WsTrust    *WSTrustConfiguration                 `json:"wsTrust,omitempty"`
}

// InboundProtocolsListResponse defines model for InboundProtocolsListResponse.
type InboundProtocolsListResponse = []InboundProtocolListItem

// InboundSCIMProvisioningConfiguration defines model for InboundSCIMProvisioningConfiguration.
type InboundSCIMProvisioningConfiguration struct {
	// ProvisioningUserstoreDomain This property becomes only applicable if the proxy-mode config is set to false
	ProvisioningUserstoreDomain *string `json:"provisioningUserstoreDomain,omitempty"`
	ProxyMode                   *bool   `json:"proxyMode,omitempty"`
}

// Link defines model for Link.
type Link struct {
	Href *string `json:"href,omitempty"`
	Rel  *string `json:"rel,omitempty"`
}

// LoginFlowGenerateRequest defines model for LoginFlowGenerateRequest.
type LoginFlowGenerateRequest struct {
	// AvailableAuthenticators Available authenticators of the organization.
	// It's expected to provide the authenticator name, description, and the IDP.
	AvailableAuthenticators *map[string]interface{} `json:"available_authenticators,omitempty"`

	// UserClaims Metadata of the available user claims for the organization.
	// Provide the claim URI and a human-readable description of the claim.
	UserClaims *[]map[string]interface{} `json:"user_claims,omitempty"`
	UserQuery  *string                   `json:"user_query,omitempty"`
}

// LoginFlowGenerateResponse defines model for LoginFlowGenerateResponse.
type LoginFlowGenerateResponse struct {
	OperationId *string `json:"operation_id,omitempty"`
}

// LoginFlowResultResponse defines model for LoginFlowResultResponse.
type LoginFlowResultResponse struct {
	// Data The payload of the response, which varies based on the operation status.
	// - For IN_PROGRESS status, an empty JSON object is returned.
	// - For COMPLETED status, the authentication sequence is returned.
	// - For FAILED status, an error message is returned.
	Data   *map[string]interface{} `json:"data,omitempty"`
	Status *StatusEnum             `json:"status,omitempty"`
}

// LoginFlowStatusResponse defines model for LoginFlowStatusResponse.
type LoginFlowStatusResponse struct {
	OperationId *string `json:"operation_id,omitempty"`

	// Status A generic object representing the status
	Status *map[string]interface{} `json:"status,omitempty"`
}

// MetadataProperty defines model for MetadataProperty.
type MetadataProperty struct {
	DefaultValue *string   `json:"defaultValue,omitempty"`
	Options      *[]string `json:"options,omitempty"`
}

// OAuth2PKCEConfiguration defines model for OAuth2PKCEConfiguration.
type OAuth2PKCEConfiguration struct {
	Mandatory                      *bool `json:"mandatory,omitempty"`
	SupportPlainTransformAlgorithm *bool `json:"supportPlainTransformAlgorithm,omitempty"`
}

// OIDCLogoutConfiguration defines model for OIDCLogoutConfiguration.
type OIDCLogoutConfiguration struct {
	BackChannelLogoutUrl  *string `json:"backChannelLogoutUrl,omitempty"`
	FrontChannelLogoutUrl *string `json:"frontChannelLogoutUrl,omitempty"`
}

// OIDCMetaData defines model for OIDCMetaData.
type OIDCMetaData struct {
	AccessTokenBindingType                  *MetadataProperty                   `json:"accessTokenBindingType,omitempty"`
	AccessTokenType                         *MetadataProperty                   `json:"accessTokenType,omitempty"`
	AllowedGrantTypes                       *GrantTypeMetaData                  `json:"allowedGrantTypes,omitempty"`
	DefaultApplicationAccessTokenExpiryTime *string                             `json:"defaultApplicationAccessTokenExpiryTime,omitempty"`
	DefaultIdTokenExpiryTime                *string                             `json:"defaultIdTokenExpiryTime,omitempty"`
	DefaultRefreshTokenExpiryTime           *string                             `json:"defaultRefreshTokenExpiryTime,omitempty"`
	DefaultUserAccessTokenExpiryTime        *string                             `json:"defaultUserAccessTokenExpiryTime,omitempty"`
	FapiMetadata                            *FapiMetadata                       `json:"fapiMetadata,omitempty"`
	IdTokenEncryptionAlgorithm              *MetadataProperty                   `json:"idTokenEncryptionAlgorithm,omitempty"`
	IdTokenEncryptionMethod                 *MetadataProperty                   `json:"idTokenEncryptionMethod,omitempty"`
	IdTokenSignatureAlgorithm               *MetadataProperty                   `json:"idTokenSignatureAlgorithm,omitempty"`
	RequestObjectEncryptionAlgorithm        *MetadataProperty                   `json:"requestObjectEncryptionAlgorithm,omitempty"`
	RequestObjectEncryptionMethod           *MetadataProperty                   `json:"requestObjectEncryptionMethod,omitempty"`
	RequestObjectSignatureAlgorithm         *MetadataProperty                   `json:"requestObjectSignatureAlgorithm,omitempty"`
	ScopeValidators                         *MetadataProperty                   `json:"scopeValidators,omitempty"`
	SubjectType                             *MetadataProperty                   `json:"subjectType,omitempty"`
	TokenEndpointAllowReusePvtKeyJwt        *bool                               `json:"tokenEndpointAllowReusePvtKeyJwt,omitempty"`
	TokenEndpointAuthMethod                 *ClientAuthenticationMethodMetadata `json:"tokenEndpointAuthMethod,omitempty"`
	TokenEndpointSignatureAlgorithm         *MetadataProperty                   `json:"tokenEndpointSignatureAlgorithm,omitempty"`
}

// OpenIDConnectConfiguration defines model for OpenIDConnectConfiguration.
type OpenIDConnectConfiguration struct {
	AccessToken *AccessTokenConfiguration `json:"accessToken,omitempty"`

	// AllowedOrigins Authorized JavaScript origins. CORS requests will be allowed to these origins.
	AllowedOrigins *[]string `json:"allowedOrigins,omitempty"`

	// CallbackURLs Authorized redirect URIs
	CallbackURLs         *[]string                          `json:"callbackURLs,omitempty"`
	ClientAuthentication *ClientAuthenticationConfiguration `json:"clientAuthentication,omitempty"`
	ClientId             *string                            `json:"clientId,omitempty"`
	ClientSecret         *string                            `json:"clientSecret,omitempty"`
	GrantTypes           []string                           `json:"grantTypes"`
	HybridFlow           *HybridFlowConfiguration           `json:"hybridFlow,omitempty"`
	IdToken              *IdTokenConfiguration              `json:"idToken,omitempty"`

	// IsFAPIApplication Enabling this option will make the application FAPI conformant.
	IsFAPIApplication *bool                    `json:"isFAPIApplication,omitempty"`
	Logout            *OIDCLogoutConfiguration `json:"logout,omitempty"`
	Pkce              *OAuth2PKCEConfiguration `json:"pkce,omitempty"`

	// PublicClient Enabling this option will allow the client to authenticate without a client secret.
	PublicClient                   *bool                                  `json:"publicClient,omitempty"`
	PushAuthorizationRequest       *PushAuthorizationRequestConfiguration `json:"pushAuthorizationRequest,omitempty"`
	RefreshToken                   *RefreshTokenConfiguration             `json:"refreshToken,omitempty"`
	RequestObject                  *RequestObjectConfiguration            `json:"requestObject,omitempty"`
	ScopeValidators                *[]string                              `json:"scopeValidators,omitempty"`
	State                          *OpenIDConnectConfigurationState       `json:"state,omitempty"`
	Subject                        *SubjectConfiguration                  `json:"subject,omitempty"`
	SubjectToken                   *SubjectTokenConfiguration             `json:"subjectToken,omitempty"`
	ValidateRequestObjectSignature *bool                                  `json:"validateRequestObjectSignature,omitempty"`
}

// OpenIDConnectConfigurationState defines model for OpenIDConnectConfiguration.State.
type OpenIDConnectConfigurationState string

// OutboundProvisioningConfiguration This property is disabled by default as of Identity Server version 7.0 onwards.
type OutboundProvisioningConfiguration struct {
	Blocking  *bool   `json:"blocking,omitempty"`
	Connector *string `json:"connector,omitempty"`
	Idp       *string `json:"idp,omitempty"`
	Jit       *bool   `json:"jit,omitempty"`
	Rules     *bool   `json:"rules,omitempty"`
}

// PassiveStsConfiguration defines model for PassiveStsConfiguration.
type PassiveStsConfiguration struct {
	Realm         string  `json:"realm"`
	ReplyTo       string  `json:"replyTo"`
	ReplyToLogout *string `json:"replyToLogout,omitempty"`
}

// PropertyModel defines model for PropertyModel.
type PropertyModel struct {
	FriendlyName *string `json:"friendlyName,omitempty"`
	Key          *string `json:"key,omitempty"`
	Value        *string `json:"value,omitempty"`
}

// ProvisioningConfiguration defines model for ProvisioningConfiguration.
type ProvisioningConfiguration struct {
	InboundProvisioning      *InboundSCIMProvisioningConfiguration `json:"inboundProvisioning,omitempty"`
	OutboundProvisioningIdps *[]OutboundProvisioningConfiguration  `json:"outboundProvisioningIdps,omitempty"`
}

// PushAuthorizationRequestConfiguration defines model for PushAuthorizationRequestConfiguration.
type PushAuthorizationRequestConfiguration struct {
	RequirePushAuthorizationRequest *bool `json:"requirePushAuthorizationRequest,omitempty"`
}

// RefreshTokenConfiguration defines model for RefreshTokenConfiguration.
type RefreshTokenConfiguration struct {
	ExpiryInSeconds *int64 `json:"expiryInSeconds,omitempty"`

	// RenewRefreshToken Decides whether the refresh token needs to be renewed during refresh grant flow.
	RenewRefreshToken *bool `json:"renewRefreshToken,omitempty"`
}

// RequestObjectConfiguration defines model for RequestObjectConfiguration.
type RequestObjectConfiguration struct {
	Encryption              *RequestObjectEncryptionConfiguration `json:"encryption,omitempty"`
	RequestObjectSigningAlg *string                               `json:"requestObjectSigningAlg,omitempty"`
}

// RequestObjectEncryptionConfiguration defines model for RequestObjectEncryptionConfiguration.
type RequestObjectEncryptionConfiguration struct {
	Algorithm *string `json:"algorithm,omitempty"`
	Method    *string `json:"method,omitempty"`
}

// RequestedClaimConfiguration User claims that need to be sent back to the application. If the claim mappings are local, use local claim URIs. If the custom claim mappings are configured, use the mapped application claim URI
type RequestedClaimConfiguration struct {
	Claim     Claim `json:"claim"`
	Mandatory *bool `json:"mandatory,omitempty"`
}

// ResidentApplication defines model for ResidentApplication.
type ResidentApplication struct {
	ProvisioningConfigurations *ProvisioningConfiguration `json:"provisioningConfigurations,omitempty"`
}

// Role defines model for Role.
type Role struct {
	Id   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// RoleConfig defines model for RoleConfig.
type RoleConfig struct {
	Claim             *Claim         `json:"claim,omitempty"`
	IncludeUserDomain *bool          `json:"includeUserDomain,omitempty"`
	Mappings          *[]RoleMapping `json:"mappings,omitempty"`
}

// RoleMapping defines model for RoleMapping.
type RoleMapping struct {
	ApplicationRole string `json:"applicationRole"`
	LocalRole       string `json:"localRole"`
}

// SAML2Configuration defines model for SAML2Configuration.
type SAML2Configuration struct {
	ManualConfiguration *SAML2ServiceProvider `json:"manualConfiguration,omitempty"`
	MetadataFile        *string               `json:"metadataFile,omitempty"`
	MetadataURL         *string               `json:"metadataURL,omitempty"`
}

// SAML2ServiceProvider defines model for SAML2ServiceProvider.
type SAML2ServiceProvider struct {
	AssertionConsumerUrls []string              `json:"assertionConsumerUrls"`
	AttributeProfile      *SAMLAttributeProfile `json:"attributeProfile,omitempty"`

	// DefaultAssertionConsumerUrl If not provided, the first assertion consumer URL on the assertionConsumerUrls will be picked as the default assertion consumer URL.
	DefaultAssertionConsumerUrl *string `json:"defaultAssertionConsumerUrl,omitempty"`
	EnableAssertionQueryProfile *bool   `json:"enableAssertionQueryProfile,omitempty"`

	// IdpEntityIdAlias Default value is the IdP Entity ID value specified in Resident IdP.
	IdpEntityIdAlias         *string                `json:"idpEntityIdAlias,omitempty"`
	Issuer                   string                 `json:"issuer"`
	RequestValidation        *SAMLRequestValidation `json:"requestValidation,omitempty"`
	ResponseSigning          *SAMLResponseSigning   `json:"responseSigning,omitempty"`
	ServiceProviderQualifier *string                `json:"serviceProviderQualifier,omitempty"`
	SingleLogoutProfile      *SingleLogoutProfile   `json:"singleLogoutProfile,omitempty"`
	SingleSignOnProfile      *SingleSignOnProfile   `json:"singleSignOnProfile,omitempty"`
}

// SAMLAssertionConfiguration defines model for SAMLAssertionConfiguration.
type SAMLAssertionConfiguration struct {
	// Audiences Additional audience values to be added to the SAML Assertions
	Audiences       *[]string                         `json:"audiences,omitempty"`
	DigestAlgorithm *string                           `json:"digestAlgorithm,omitempty"`
	Encryption      *AssertionEncryptionConfiguration `json:"encryption,omitempty"`
	NameIdFormat    *string                           `json:"nameIdFormat,omitempty"`

	// Recipients Additional recipient values to be added to the SAML Assertions
	Recipients *[]string `json:"recipients,omitempty"`
}

// SAMLAttributeProfile defines model for SAMLAttributeProfile.
type SAMLAttributeProfile struct {
	AlwaysIncludeAttributesInResponse *bool `json:"alwaysIncludeAttributesInResponse,omitempty"`
	Enabled                           *bool `json:"enabled,omitempty"`

	// NameFormat The name format of attributes in the SAML assertion attribute statement.
	NameFormat *string `json:"nameFormat,omitempty"`
}

// SAMLMetaData defines model for SAMLMetaData.
type SAMLMetaData struct {
	AssertionEncryptionAlgorithm *MetadataProperty `json:"assertionEncryptionAlgorithm,omitempty"`
	CertificateAlias             *MetadataProperty `json:"certificateAlias,omitempty"`
	DefaultNameIdFormat          *string           `json:"defaultNameIdFormat,omitempty"`
	KeyEncryptionAlgorithm       *MetadataProperty `json:"keyEncryptionAlgorithm,omitempty"`
	ResponseDigestAlgorithm      *MetadataProperty `json:"responseDigestAlgorithm,omitempty"`
	ResponseSigningAlgorithm     *MetadataProperty `json:"responseSigningAlgorithm,omitempty"`
}

// SAMLRequestValidation defines model for SAMLRequestValidation.
type SAMLRequestValidation struct {
	EnableSignatureValidation    *bool   `json:"enableSignatureValidation,omitempty"`
	SignatureValidationCertAlias *string `json:"signatureValidationCertAlias,omitempty"`
}

// SAMLResponseSigning defines model for SAMLResponseSigning.
type SAMLResponseSigning struct {
	Enabled          *bool   `json:"enabled,omitempty"`
	SigningAlgorithm *string `json:"signingAlgorithm,omitempty"`
}

// SharedApplicationResponse defines model for SharedApplicationResponse.
type SharedApplicationResponse struct {
	// ApplicationId Shared application's id.
	ApplicationId *string `json:"applicationId,omitempty"`

	// OrganizationId Shared application residing organization id.
	OrganizationId *string `json:"organizationId,omitempty"`
}

// SharedApplicationsResponse defines model for SharedApplicationsResponse.
type SharedApplicationsResponse struct {
	SharedApplications *[]SharedApplicationResponse `json:"sharedApplications,omitempty"`
}

// SharedOrganizationsResponse defines model for SharedOrganizationsResponse.
type SharedOrganizationsResponse struct {
	Organizations *[]BasicOrganizationResponse `json:"organizations,omitempty"`
}

// SingleLogoutProfile defines model for SingleLogoutProfile.
type SingleLogoutProfile struct {
	Enabled                  *bool                            `json:"enabled,omitempty"`
	IdpInitiatedSingleLogout *IdpInitiatedSingleLogout        `json:"idpInitiatedSingleLogout,omitempty"`
	LogoutMethod             *SingleLogoutProfileLogoutMethod `json:"logoutMethod,omitempty"`

	// LogoutRequestUrl Single logout request accepting endpoint
	LogoutRequestUrl *string `json:"logoutRequestUrl,omitempty"`

	// LogoutResponseUrl Single logout response accepting endpoint
	LogoutResponseUrl *string `json:"logoutResponseUrl,omitempty"`
}

// SingleLogoutProfileLogoutMethod defines model for SingleLogoutProfile.LogoutMethod.
type SingleLogoutProfileLogoutMethod string

// SingleSignOnProfile defines model for SingleSignOnProfile.
type SingleSignOnProfile struct {
	Assertion                      *SAMLAssertionConfiguration    `json:"assertion,omitempty"`
	AttributeConsumingServiceIndex *string                        `json:"attributeConsumingServiceIndex,omitempty"`
	Bindings                       *[]SingleSignOnProfileBindings `json:"bindings,omitempty"`
	EnableIdpInitiatedSingleSignOn *bool                          `json:"enableIdpInitiatedSingleSignOn,omitempty"`

	// EnableSignatureValidationForArtifactBinding Enables Signature validation for SAML Artifact Binding. Applicable only if SAML Artifact binding is enabled through the bindings option.
	EnableSignatureValidationForArtifactBinding *bool `json:"enableSignatureValidationForArtifactBinding,omitempty"`
}

// SingleSignOnProfileBindings defines model for SingleSignOnProfile.Bindings.
type SingleSignOnProfileBindings string

// StatusEnum defines model for StatusEnum.
type StatusEnum string

// SubjectConfig defines model for SubjectConfig.
type SubjectConfig struct {
	Claim                       *Claim `json:"claim,omitempty"`
	IncludeTenantDomain         *bool  `json:"includeTenantDomain,omitempty"`
	IncludeUserDomain           *bool  `json:"includeUserDomain,omitempty"`
	MappedLocalSubjectMandatory *bool  `json:"mappedLocalSubjectMandatory,omitempty"`
	UseMappedLocalSubject       *bool  `json:"useMappedLocalSubject,omitempty"`
}

// SubjectConfiguration defines model for SubjectConfiguration.
type SubjectConfiguration struct {
	SectorIdentifierUri *string `json:"sectorIdentifierUri,omitempty"`
	SubjectType         *string `json:"subjectType,omitempty"`
}

// SubjectTokenConfiguration defines model for SubjectTokenConfiguration.
type SubjectTokenConfiguration struct {
	ApplicationSubjectTokenExpiryInSeconds *int `json:"applicationSubjectTokenExpiryInSeconds,omitempty"`

	// Enable If enabled, subject token can be issued for token exchange grant type.
	Enable *bool `json:"enable,omitempty"`
}

// TrustedAppConfiguration Decides the trusted app configurations for the application.
type TrustedAppConfiguration struct {
	// AndroidPackageName Decides the android package name for the application.
	AndroidPackageName *string `json:"androidPackageName,omitempty"`

	// AndroidThumbprints Decides the android thumbprints for the application.
	AndroidThumbprints *[]string `json:"androidThumbprints,omitempty"`

	// AppleAppId Decides the apple app id for the application.
	AppleAppId *string `json:"appleAppId,omitempty"`

	// IsConsentGranted Decides whether consent is granted for the trusted app.
	IsConsentGranted *bool `json:"isConsentGranted,omitempty"`

	// IsFIDOTrustedApp Decides whether the application is a FIDO trusted app.
	IsFIDOTrustedApp *bool `json:"isFIDOTrustedApp,omitempty"`
}

// WSTrustConfiguration defines model for WSTrustConfiguration.
type WSTrustConfiguration struct {
	// Audience Audience value of the trusted service
	Audience         string `json:"audience"`
	CertificateAlias string `json:"certificateAlias"`
}

// WSTrustMetaData defines model for WSTrustMetaData.
type WSTrustMetaData struct {
	CertificateAlias *MetadataProperty `json:"certificateAlias,omitempty"`
}

// AttributesQueryParam defines model for attributesQueryParam.
type AttributesQueryParam = string

// DomainQueryParam defines model for domainQueryParam.
type DomainQueryParam = string

// ExcludeSystemPortalsQueryParam defines model for excludeSystemPortalsQueryParam.
type ExcludeSystemPortalsQueryParam = bool

// ExportSecretsQueryParam defines model for exportSecretsQueryParam.
type ExportSecretsQueryParam = bool

// FileTypeHeaderParam defines model for fileTypeHeaderParam.
type FileTypeHeaderParam string

// FilterQueryParam defines model for filterQueryParam.
type FilterQueryParam = string

// InboundProtocolsCustomOnly defines model for inboundProtocolsCustomOnly.
type InboundProtocolsCustomOnly = bool

// LimitQueryParam defines model for limitQueryParam.
type LimitQueryParam = int

// LimitWithoutDefaultQueryParam defines model for limitWithoutDefaultQueryParam.
type LimitWithoutDefaultQueryParam = int

// OffsetQueryParam defines model for offsetQueryParam.
type OffsetQueryParam = int

// OffsetWithoutDefaultQueryParam defines model for offsetWithoutDefaultQueryParam.
type OffsetWithoutDefaultQueryParam = int

// SortByQueryParam defines model for sortByQueryParam.
type SortByQueryParam = string

// SortOrderQueryParam defines model for sortOrderQueryParam.
type SortOrderQueryParam string

// TemplateIdPathParam defines model for templateIdPathParam.
type TemplateIdPathParam = string

// GetAllApplicationsParams defines parameters for GetAllApplications.
type GetAllApplicationsParams struct {
	// Limit Maximum number of records to return.
	Limit *LimitQueryParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of records to skip for pagination.
	Offset *OffsetQueryParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Filter Condition to filter the retrieval of records.
	// Supports 'sw', 'co', 'ew', and 'eq' operations with 'and', 'or' logical operators.
	// Note that 'and' and 'or' operators in filters follow the general precedence of logical operators.
	// For example, A and B or C and D = (A and B) or (C and D)).
	// Currently supports only filtering based on the 'name', the 'clientId', and the 'issuer' attributes.
	//
	// /applications?filter=name+eq+user_portal
	// <br>
	// /applications?filter=name+co+prod+or+clientId+co+123
	Filter *FilterQueryParam `form:"filter,omitempty" json:"filter,omitempty"`

	// SortOrder Define the order in which the retrieved records should be sorted.
	// _This parameter is not supported yet._
	SortOrder *GetAllApplicationsParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortBy Attribute by which the retrieved records should be sorted.
	// _This parameter is not supported yet._
	SortBy *SortByQueryParam `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Attributes Specifies the required parameters in the response.
	// Only 'advancedConfigurations', 'templateId', 'templateVersion', 'clientId', 'issuer',
	// and 'associatedRoles.allowedAudience' attributes are currently supported.
	//
	// /applications?attributes=advancedConfigurations,templateId,templateVersion,clientId,issuer,
	// associatedRoles.allowedAudience
	Attributes *AttributesQueryParam `form:"attributes,omitempty" json:"attributes,omitempty"`

	// ExcludeSystemPortals Specifies whether to include or exclude system portals in the response.
	// Default will be treated as false if parameter is not preset in the request.
	//
	// /applications?excludeSystemPortals=true
	ExcludeSystemPortals *ExcludeSystemPortalsQueryParam `form:"excludeSystemPortals,omitempty" json:"excludeSystemPortals,omitempty"`
}

// GetAllApplicationsParamsSortOrder defines parameters for GetAllApplications.
type GetAllApplicationsParamsSortOrder string

// CreateApplicationParams defines parameters for CreateApplication.
type CreateApplicationParams struct {
	// Template Pre-defined template to use when creating the application.
	Template *string `form:"template,omitempty" json:"template,omitempty"`
}

// GetGroupsParams defines parameters for GetGroups.
type GetGroupsParams struct {
	// Domain The domain name of the user store used to filter the groups.
	//
	// /applications/meta/groups?domain=PRIMARY
	Domain *DomainQueryParam `form:"domain,omitempty" json:"domain,omitempty"`

	// Filter Condition to filter the retrieval of records.
	// Supports 'sw', 'co', 'ew', and 'eq' operations with 'and', 'or' logical operators.
	// Note that 'and' and 'or' operators in filters follow the general precedence of logical operators.
	// For example, A and B or C and D = (A and B) or (C and D)).
	// Currently supports only filtering based on the 'name', the 'clientId', and the 'issuer' attributes.
	//
	// /applications?filter=name+eq+user_portal
	// <br>
	// /applications?filter=name+co+prod+or+clientId+co+123
	Filter *FilterQueryParam `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetInboundProtocolsParams defines parameters for GetInboundProtocols.
type GetInboundProtocolsParams struct {
	// CustomOnly Send only the custom inbound protocols.
	CustomOnly *InboundProtocolsCustomOnly `form:"customOnly,omitempty" json:"customOnly,omitempty"`
}

// GetAllApplicationTemplatesParams defines parameters for GetAllApplicationTemplates.
type GetAllApplicationTemplatesParams struct {
	// Limit Maximum number of records to return.
	Limit *LimitWithoutDefaultQueryParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of records to skip for pagination.
	Offset *OffsetWithoutDefaultQueryParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Filter Condition to filter the retrieval of records.
	// Supports 'sw', 'co', 'ew', and 'eq' operations with 'and', 'or' logical operators.
	// Note that 'and' and 'or' operators in filters follow the general precedence of logical operators.
	// For example, A and B or C and D = (A and B) or (C and D)).
	// Currently supports only filtering based on the 'name', the 'clientId', and the 'issuer' attributes.
	//
	// /applications?filter=name+eq+user_portal
	// <br>
	// /applications?filter=name+co+prod+or+clientId+co+123
	Filter *FilterQueryParam `form:"filter,omitempty" json:"filter,omitempty"`
}

// ExportApplicationParams defines parameters for ExportApplication.
type ExportApplicationParams struct {
	// ExportSecrets Specifies whether to export secrets when exporting an application.
	ExportSecrets *ExportSecretsQueryParam `form:"exportSecrets,omitempty" json:"exportSecrets,omitempty"`
}

// ExportApplicationAsFileParams defines parameters for ExportApplicationAsFile.
type ExportApplicationAsFileParams struct {
	// ExportSecrets Specifies whether to export secrets when exporting an application.
	ExportSecrets *ExportSecretsQueryParam `form:"exportSecrets,omitempty" json:"exportSecrets,omitempty"`

	// Accept Content type of the file.
	Accept *ExportApplicationAsFileParamsAccept `json:"Accept,omitempty"`
}

// ExportApplicationAsFileParamsAccept defines parameters for ExportApplicationAsFile.
type ExportApplicationAsFileParamsAccept string

// CreateApplicationJSONRequestBody defines body for CreateApplication for application/json ContentType.
type CreateApplicationJSONRequestBody = ApplicationModel

// ImportApplicationMultipartRequestBody defines body for ImportApplication for multipart/form-data ContentType.
type ImportApplicationMultipartRequestBody = FileUpload

// ImportApplicationForUpdateMultipartRequestBody defines body for ImportApplicationForUpdate for multipart/form-data ContentType.
type ImportApplicationForUpdateMultipartRequestBody = FileUpload

// GenerateLoginFlowJSONRequestBody defines body for GenerateLoginFlow for application/json ContentType.
type GenerateLoginFlowJSONRequestBody = LoginFlowGenerateRequest

// UpdateResidentApplicationJSONRequestBody defines body for UpdateResidentApplication for application/json ContentType.
type UpdateResidentApplicationJSONRequestBody = ProvisioningConfiguration

// CreateApplicationTemplateJSONRequestBody defines body for CreateApplicationTemplate for application/json ContentType.
type CreateApplicationTemplateJSONRequestBody = ApplicationTemplateModel

// UpdateApplicationTemplateJSONRequestBody defines body for UpdateApplicationTemplate for application/json ContentType.
type UpdateApplicationTemplateJSONRequestBody = ApplicationTemplateModel

// PatchApplicationJSONRequestBody defines body for PatchApplication for application/json ContentType.
type PatchApplicationJSONRequestBody = ApplicationPatchModel

// AddAuthorizedAPIJSONRequestBody defines body for AddAuthorizedAPI for application/json ContentType.
type AddAuthorizedAPIJSONRequestBody = AuthorizedAPICreationModel

// PatchAuthorizedAPIJSONRequestBody defines body for PatchAuthorizedAPI for application/json ContentType.
type PatchAuthorizedAPIJSONRequestBody = AuthorizedAPIPatchModel

// UpdateInboundOAuthConfigurationJSONRequestBody defines body for UpdateInboundOAuthConfiguration for application/json ContentType.
type UpdateInboundOAuthConfigurationJSONRequestBody = OpenIDConnectConfiguration

// UpdatePassiveStsConfigurationJSONRequestBody defines body for UpdatePassiveStsConfiguration for application/json ContentType.
type UpdatePassiveStsConfigurationJSONRequestBody = PassiveStsConfiguration

// UpdateInboundSAMLConfigurationJSONRequestBody defines body for UpdateInboundSAMLConfiguration for application/json ContentType.
type UpdateInboundSAMLConfigurationJSONRequestBody = SAML2Configuration

// UpdateWSTrustConfigurationJSONRequestBody defines body for UpdateWSTrustConfiguration for application/json ContentType.
type UpdateWSTrustConfigurationJSONRequestBody = WSTrustConfiguration

// UpdateCustomInboundConfigurationJSONRequestBody defines body for UpdateCustomInboundConfiguration for application/json ContentType.
type UpdateCustomInboundConfigurationJSONRequestBody = CustomInboundProtocolConfiguration

// ChangeApplicationOwnerJSONRequestBody defines body for ChangeApplicationOwner for application/json ContentType.
type ChangeApplicationOwnerJSONRequestBody = ApplicationOwner

// ShareOrgApplicationJSONRequestBody defines body for ShareOrgApplication for application/json ContentType.
type ShareOrgApplicationJSONRequestBody = ApplicationSharePOSTRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllApplications request
	GetAllApplications(ctx context.Context, params *GetAllApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApplicationWithBody request with any body
	CreateApplicationWithBody(ctx context.Context, params *CreateApplicationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApplication(ctx context.Context, params *CreateApplicationParams, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportApplicationWithBody request with any body
	ImportApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportApplicationForUpdateWithBody request with any body
	ImportApplicationForUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateLoginFlowWithBody request with any body
	GenerateLoginFlowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateLoginFlow(ctx context.Context, body GenerateLoginFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLoginFlowGenerationResult request
	GetLoginFlowGenerationResult(ctx context.Context, operationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLoginFlowGenerationStatus request
	GetLoginFlowGenerationStatus(ctx context.Context, operationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdaptiveAuthTemplates request
	GetAdaptiveAuthTemplates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroups request
	GetGroups(ctx context.Context, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInboundProtocols request
	GetInboundProtocols(ctx context.Context, params *GetInboundProtocolsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOIDCMetadata request
	GetOIDCMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSAMLMetadata request
	GetSAMLMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWSTrustMetadata request
	GetWSTrustMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomProtocolMetadata request
	GetCustomProtocolMetadata(ctx context.Context, inboundProtocolId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResidentApplication request
	GetResidentApplication(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateResidentApplicationWithBody request with any body
	UpdateResidentApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateResidentApplication(ctx context.Context, body UpdateResidentApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllApplicationTemplates request
	GetAllApplicationTemplates(ctx context.Context, params *GetAllApplicationTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApplicationTemplateWithBody request with any body
	CreateApplicationTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApplicationTemplate(ctx context.Context, body CreateApplicationTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplicationTemplate request
	DeleteApplicationTemplate(ctx context.Context, templateId TemplateIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplicationTemplate request
	GetApplicationTemplate(ctx context.Context, templateId TemplateIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApplicationTemplateWithBody request with any body
	UpdateApplicationTemplateWithBody(ctx context.Context, templateId TemplateIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApplicationTemplate(ctx context.Context, templateId TemplateIdPathParam, body UpdateApplicationTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplication request
	DeleteApplication(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplication request
	GetApplication(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApplicationWithBody request with any body
	PatchApplicationWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApplication(ctx context.Context, applicationId string, body PatchApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfiguredAuthenticators request
	GetConfiguredAuthenticators(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthorizedAPIs request
	GetAuthorizedAPIs(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddAuthorizedAPIWithBody request with any body
	AddAuthorizedAPIWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddAuthorizedAPI(ctx context.Context, applicationId string, body AddAuthorizedAPIJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthorizedAPI request
	DeleteAuthorizedAPI(ctx context.Context, applicationId string, apiId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAuthorizedAPIWithBody request with any body
	PatchAuthorizedAPIWithBody(ctx context.Context, applicationId string, apiId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAuthorizedAPI(ctx context.Context, applicationId string, apiId string, body PatchAuthorizedAPIJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportApplication request
	ExportApplication(ctx context.Context, applicationId string, params *ExportApplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportApplicationAsFile request
	ExportApplicationAsFile(ctx context.Context, applicationId string, params *ExportApplicationAsFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInboundAuthenticationConfigurations request
	GetInboundAuthenticationConfigurations(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInboundOAuthConfiguration request
	DeleteInboundOAuthConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInboundOAuthConfiguration request
	GetInboundOAuthConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateInboundOAuthConfigurationWithBody request with any body
	UpdateInboundOAuthConfigurationWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateInboundOAuthConfiguration(ctx context.Context, applicationId string, body UpdateInboundOAuthConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegenerateOAuthClientSecret request
	RegenerateOAuthClientSecret(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevokeOAuthClient request
	RevokeOAuthClient(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePassiveStsConfiguration request
	DeletePassiveStsConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPassiveStsConfiguration request
	GetPassiveStsConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePassiveStsConfigurationWithBody request with any body
	UpdatePassiveStsConfigurationWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePassiveStsConfiguration(ctx context.Context, applicationId string, body UpdatePassiveStsConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInboundSAMLConfiguration request
	DeleteInboundSAMLConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInboundSAMLConfiguration request
	GetInboundSAMLConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateInboundSAMLConfigurationWithBody request with any body
	UpdateInboundSAMLConfigurationWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateInboundSAMLConfiguration(ctx context.Context, applicationId string, body UpdateInboundSAMLConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWSTrustConfiguration request
	DeleteWSTrustConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWSTrustConfiguration request
	GetWSTrustConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWSTrustConfigurationWithBody request with any body
	UpdateWSTrustConfigurationWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWSTrustConfiguration(ctx context.Context, applicationId string, body UpdateWSTrustConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomInboundConfiguration request
	DeleteCustomInboundConfiguration(ctx context.Context, applicationId string, inboundProtocolId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomInboundConfiguration request
	GetCustomInboundConfiguration(ctx context.Context, applicationId string, inboundProtocolId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomInboundConfigurationWithBody request with any body
	UpdateCustomInboundConfigurationWithBody(ctx context.Context, applicationId string, inboundProtocolId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCustomInboundConfiguration(ctx context.Context, applicationId string, inboundProtocolId string, body UpdateCustomInboundConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangeApplicationOwnerWithBody request with any body
	ChangeApplicationOwnerWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangeApplicationOwner(ctx context.Context, applicationId string, body ChangeApplicationOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShareOrgApplicationGet request
	ShareOrgApplicationGet(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShareOrgApplicationWithBody request with any body
	ShareOrgApplicationWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShareOrgApplication(ctx context.Context, applicationId string, body ShareOrgApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShareOrgApplicationDelete request
	ShareOrgApplicationDelete(ctx context.Context, applicationId string, sharedOrganizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedApplicationsAllDelete request
	SharedApplicationsAllDelete(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharedApplicationsGet request
	SharedApplicationsGet(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllApplications(ctx context.Context, params *GetAllApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllApplicationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationWithBody(ctx context.Context, params *CreateApplicationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplication(ctx context.Context, params *CreateApplicationParams, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportApplicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportApplicationForUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportApplicationForUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateLoginFlowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateLoginFlowRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateLoginFlow(ctx context.Context, body GenerateLoginFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateLoginFlowRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLoginFlowGenerationResult(ctx context.Context, operationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoginFlowGenerationResultRequest(c.Server, operationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLoginFlowGenerationStatus(ctx context.Context, operationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoginFlowGenerationStatusRequest(c.Server, operationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdaptiveAuthTemplates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdaptiveAuthTemplatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroups(ctx context.Context, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInboundProtocols(ctx context.Context, params *GetInboundProtocolsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInboundProtocolsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOIDCMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOIDCMetadataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSAMLMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSAMLMetadataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWSTrustMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWSTrustMetadataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomProtocolMetadata(ctx context.Context, inboundProtocolId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomProtocolMetadataRequest(c.Server, inboundProtocolId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResidentApplication(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResidentApplicationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResidentApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResidentApplicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResidentApplication(ctx context.Context, body UpdateResidentApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResidentApplicationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllApplicationTemplates(ctx context.Context, params *GetAllApplicationTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllApplicationTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationTemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationTemplate(ctx context.Context, body CreateApplicationTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationTemplateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplicationTemplate(ctx context.Context, templateId TemplateIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationTemplateRequest(c.Server, templateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicationTemplate(ctx context.Context, templateId TemplateIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationTemplateRequest(c.Server, templateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplicationTemplateWithBody(ctx context.Context, templateId TemplateIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationTemplateRequestWithBody(c.Server, templateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplicationTemplate(ctx context.Context, templateId TemplateIdPathParam, body UpdateApplicationTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationTemplateRequest(c.Server, templateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplication(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplication(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApplicationWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApplicationRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApplication(ctx context.Context, applicationId string, body PatchApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApplicationRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfiguredAuthenticators(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfiguredAuthenticatorsRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthorizedAPIs(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthorizedAPIsRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAuthorizedAPIWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAuthorizedAPIRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAuthorizedAPI(ctx context.Context, applicationId string, body AddAuthorizedAPIJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAuthorizedAPIRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthorizedAPI(ctx context.Context, applicationId string, apiId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthorizedAPIRequest(c.Server, applicationId, apiId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAuthorizedAPIWithBody(ctx context.Context, applicationId string, apiId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAuthorizedAPIRequestWithBody(c.Server, applicationId, apiId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAuthorizedAPI(ctx context.Context, applicationId string, apiId string, body PatchAuthorizedAPIJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAuthorizedAPIRequest(c.Server, applicationId, apiId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportApplication(ctx context.Context, applicationId string, params *ExportApplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportApplicationRequest(c.Server, applicationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportApplicationAsFile(ctx context.Context, applicationId string, params *ExportApplicationAsFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportApplicationAsFileRequest(c.Server, applicationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInboundAuthenticationConfigurations(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInboundAuthenticationConfigurationsRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInboundOAuthConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInboundOAuthConfigurationRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInboundOAuthConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInboundOAuthConfigurationRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInboundOAuthConfigurationWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInboundOAuthConfigurationRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInboundOAuthConfiguration(ctx context.Context, applicationId string, body UpdateInboundOAuthConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInboundOAuthConfigurationRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegenerateOAuthClientSecret(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegenerateOAuthClientSecretRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevokeOAuthClient(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevokeOAuthClientRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePassiveStsConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePassiveStsConfigurationRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPassiveStsConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPassiveStsConfigurationRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePassiveStsConfigurationWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePassiveStsConfigurationRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePassiveStsConfiguration(ctx context.Context, applicationId string, body UpdatePassiveStsConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePassiveStsConfigurationRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInboundSAMLConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInboundSAMLConfigurationRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInboundSAMLConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInboundSAMLConfigurationRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInboundSAMLConfigurationWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInboundSAMLConfigurationRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInboundSAMLConfiguration(ctx context.Context, applicationId string, body UpdateInboundSAMLConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInboundSAMLConfigurationRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWSTrustConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWSTrustConfigurationRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWSTrustConfiguration(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWSTrustConfigurationRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWSTrustConfigurationWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWSTrustConfigurationRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWSTrustConfiguration(ctx context.Context, applicationId string, body UpdateWSTrustConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWSTrustConfigurationRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomInboundConfiguration(ctx context.Context, applicationId string, inboundProtocolId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomInboundConfigurationRequest(c.Server, applicationId, inboundProtocolId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomInboundConfiguration(ctx context.Context, applicationId string, inboundProtocolId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomInboundConfigurationRequest(c.Server, applicationId, inboundProtocolId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomInboundConfigurationWithBody(ctx context.Context, applicationId string, inboundProtocolId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomInboundConfigurationRequestWithBody(c.Server, applicationId, inboundProtocolId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomInboundConfiguration(ctx context.Context, applicationId string, inboundProtocolId string, body UpdateCustomInboundConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomInboundConfigurationRequest(c.Server, applicationId, inboundProtocolId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeApplicationOwnerWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeApplicationOwnerRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeApplicationOwner(ctx context.Context, applicationId string, body ChangeApplicationOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeApplicationOwnerRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareOrgApplicationGet(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareOrgApplicationGetRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareOrgApplicationWithBody(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareOrgApplicationRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareOrgApplication(ctx context.Context, applicationId string, body ShareOrgApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareOrgApplicationRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareOrgApplicationDelete(ctx context.Context, applicationId string, sharedOrganizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareOrgApplicationDeleteRequest(c.Server, applicationId, sharedOrganizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedApplicationsAllDelete(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedApplicationsAllDeleteRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharedApplicationsGet(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharedApplicationsGetRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllApplicationsRequest generates requests for GetAllApplications
func NewGetAllApplicationsRequest(server string, params *GetAllApplicationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Attributes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attributes", runtime.ParamLocationQuery, *params.Attributes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeSystemPortals != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeSystemPortals", runtime.ParamLocationQuery, *params.ExcludeSystemPortals); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApplicationRequest calls the generic CreateApplication builder with application/json body
func NewCreateApplicationRequest(server string, params *CreateApplicationParams, body CreateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApplicationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateApplicationRequestWithBody generates requests for CreateApplication with any type of body
func NewCreateApplicationRequestWithBody(server string, params *CreateApplicationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Template != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template", runtime.ParamLocationQuery, *params.Template); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImportApplicationRequestWithBody generates requests for ImportApplication with any type of body
func NewImportApplicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImportApplicationForUpdateRequestWithBody generates requests for ImportApplicationForUpdate with any type of body
func NewImportApplicationForUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenerateLoginFlowRequest calls the generic GenerateLoginFlow builder with application/json body
func NewGenerateLoginFlowRequest(server string, body GenerateLoginFlowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateLoginFlowRequestWithBody(server, "application/json", bodyReader)
}

// NewGenerateLoginFlowRequestWithBody generates requests for GenerateLoginFlow with any type of body
func NewGenerateLoginFlowRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/loginflow/generate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLoginFlowGenerationResultRequest generates requests for GetLoginFlowGenerationResult
func NewGetLoginFlowGenerationResultRequest(server string, operationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "operation_id", runtime.ParamLocationPath, operationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/loginflow/result/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLoginFlowGenerationStatusRequest generates requests for GetLoginFlowGenerationStatus
func NewGetLoginFlowGenerationStatusRequest(server string, operationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "operation_id", runtime.ParamLocationPath, operationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/loginflow/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdaptiveAuthTemplatesRequest generates requests for GetAdaptiveAuthTemplates
func NewGetAdaptiveAuthTemplatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/meta/adaptive-auth-templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupsRequest generates requests for GetGroups
func NewGetGroupsRequest(server string, params *GetGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/meta/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Domain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain", runtime.ParamLocationQuery, *params.Domain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInboundProtocolsRequest generates requests for GetInboundProtocols
func NewGetInboundProtocolsRequest(server string, params *GetInboundProtocolsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/meta/inbound-protocols")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CustomOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customOnly", runtime.ParamLocationQuery, *params.CustomOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOIDCMetadataRequest generates requests for GetOIDCMetadata
func NewGetOIDCMetadataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/meta/inbound-protocols/oidc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSAMLMetadataRequest generates requests for GetSAMLMetadata
func NewGetSAMLMetadataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/meta/inbound-protocols/saml")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWSTrustMetadataRequest generates requests for GetWSTrustMetadata
func NewGetWSTrustMetadataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/meta/inbound-protocols/ws-trust")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomProtocolMetadataRequest generates requests for GetCustomProtocolMetadata
func NewGetCustomProtocolMetadataRequest(server string, inboundProtocolId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inboundProtocolId", runtime.ParamLocationPath, inboundProtocolId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/meta/inbound-protocols/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResidentApplicationRequest generates requests for GetResidentApplication
func NewGetResidentApplicationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/resident")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateResidentApplicationRequest calls the generic UpdateResidentApplication builder with application/json body
func NewUpdateResidentApplicationRequest(server string, body UpdateResidentApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateResidentApplicationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateResidentApplicationRequestWithBody generates requests for UpdateResidentApplication with any type of body
func NewUpdateResidentApplicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/resident")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllApplicationTemplatesRequest generates requests for GetAllApplicationTemplates
func NewGetAllApplicationTemplatesRequest(server string, params *GetAllApplicationTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApplicationTemplateRequest calls the generic CreateApplicationTemplate builder with application/json body
func NewCreateApplicationTemplateRequest(server string, body CreateApplicationTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApplicationTemplateRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateApplicationTemplateRequestWithBody generates requests for CreateApplicationTemplate with any type of body
func NewCreateApplicationTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApplicationTemplateRequest generates requests for DeleteApplicationTemplate
func NewDeleteApplicationTemplateRequest(server string, templateId TemplateIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "template-id", runtime.ParamLocationPath, templateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApplicationTemplateRequest generates requests for GetApplicationTemplate
func NewGetApplicationTemplateRequest(server string, templateId TemplateIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "template-id", runtime.ParamLocationPath, templateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApplicationTemplateRequest calls the generic UpdateApplicationTemplate builder with application/json body
func NewUpdateApplicationTemplateRequest(server string, templateId TemplateIdPathParam, body UpdateApplicationTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApplicationTemplateRequestWithBody(server, templateId, "application/json", bodyReader)
}

// NewUpdateApplicationTemplateRequestWithBody generates requests for UpdateApplicationTemplate with any type of body
func NewUpdateApplicationTemplateRequestWithBody(server string, templateId TemplateIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "template-id", runtime.ParamLocationPath, templateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApplicationRequest generates requests for DeleteApplication
func NewDeleteApplicationRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApplicationRequest generates requests for GetApplication
func NewGetApplicationRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApplicationRequest calls the generic PatchApplication builder with application/json body
func NewPatchApplicationRequest(server string, applicationId string, body PatchApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApplicationRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewPatchApplicationRequestWithBody generates requests for PatchApplication with any type of body
func NewPatchApplicationRequestWithBody(server string, applicationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConfiguredAuthenticatorsRequest generates requests for GetConfiguredAuthenticators
func NewGetConfiguredAuthenticatorsRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/authenticators", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthorizedAPIsRequest generates requests for GetAuthorizedAPIs
func NewGetAuthorizedAPIsRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/authorized-apis", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddAuthorizedAPIRequest calls the generic AddAuthorizedAPI builder with application/json body
func NewAddAuthorizedAPIRequest(server string, applicationId string, body AddAuthorizedAPIJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddAuthorizedAPIRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewAddAuthorizedAPIRequestWithBody generates requests for AddAuthorizedAPI with any type of body
func NewAddAuthorizedAPIRequestWithBody(server string, applicationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/authorized-apis", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAuthorizedAPIRequest generates requests for DeleteAuthorizedAPI
func NewDeleteAuthorizedAPIRequest(server string, applicationId string, apiId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "apiId", runtime.ParamLocationPath, apiId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/authorized-apis/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAuthorizedAPIRequest calls the generic PatchAuthorizedAPI builder with application/json body
func NewPatchAuthorizedAPIRequest(server string, applicationId string, apiId string, body PatchAuthorizedAPIJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAuthorizedAPIRequestWithBody(server, applicationId, apiId, "application/json", bodyReader)
}

// NewPatchAuthorizedAPIRequestWithBody generates requests for PatchAuthorizedAPI with any type of body
func NewPatchAuthorizedAPIRequestWithBody(server string, applicationId string, apiId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "apiId", runtime.ParamLocationPath, apiId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/authorized-apis/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExportApplicationRequest generates requests for ExportApplication
func NewExportApplicationRequest(server string, applicationId string, params *ExportApplicationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/export", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExportSecrets != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exportSecrets", runtime.ParamLocationQuery, *params.ExportSecrets); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportApplicationAsFileRequest generates requests for ExportApplicationAsFile
func NewExportApplicationAsFileRequest(server string, applicationId string, params *ExportApplicationAsFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/exportFile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExportSecrets != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exportSecrets", runtime.ParamLocationQuery, *params.ExportSecrets); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewGetInboundAuthenticationConfigurationsRequest generates requests for GetInboundAuthenticationConfigurations
func NewGetInboundAuthenticationConfigurationsRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteInboundOAuthConfigurationRequest generates requests for DeleteInboundOAuthConfiguration
func NewDeleteInboundOAuthConfigurationRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/oidc", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInboundOAuthConfigurationRequest generates requests for GetInboundOAuthConfiguration
func NewGetInboundOAuthConfigurationRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/oidc", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateInboundOAuthConfigurationRequest calls the generic UpdateInboundOAuthConfiguration builder with application/json body
func NewUpdateInboundOAuthConfigurationRequest(server string, applicationId string, body UpdateInboundOAuthConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInboundOAuthConfigurationRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewUpdateInboundOAuthConfigurationRequestWithBody generates requests for UpdateInboundOAuthConfiguration with any type of body
func NewUpdateInboundOAuthConfigurationRequestWithBody(server string, applicationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/oidc", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegenerateOAuthClientSecretRequest generates requests for RegenerateOAuthClientSecret
func NewRegenerateOAuthClientSecretRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/oidc/regenerate-secret", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevokeOAuthClientRequest generates requests for RevokeOAuthClient
func NewRevokeOAuthClientRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/oidc/revoke", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePassiveStsConfigurationRequest generates requests for DeletePassiveStsConfiguration
func NewDeletePassiveStsConfigurationRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/passive-sts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPassiveStsConfigurationRequest generates requests for GetPassiveStsConfiguration
func NewGetPassiveStsConfigurationRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/passive-sts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePassiveStsConfigurationRequest calls the generic UpdatePassiveStsConfiguration builder with application/json body
func NewUpdatePassiveStsConfigurationRequest(server string, applicationId string, body UpdatePassiveStsConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePassiveStsConfigurationRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewUpdatePassiveStsConfigurationRequestWithBody generates requests for UpdatePassiveStsConfiguration with any type of body
func NewUpdatePassiveStsConfigurationRequestWithBody(server string, applicationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/passive-sts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInboundSAMLConfigurationRequest generates requests for DeleteInboundSAMLConfiguration
func NewDeleteInboundSAMLConfigurationRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/saml", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInboundSAMLConfigurationRequest generates requests for GetInboundSAMLConfiguration
func NewGetInboundSAMLConfigurationRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/saml", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateInboundSAMLConfigurationRequest calls the generic UpdateInboundSAMLConfiguration builder with application/json body
func NewUpdateInboundSAMLConfigurationRequest(server string, applicationId string, body UpdateInboundSAMLConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInboundSAMLConfigurationRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewUpdateInboundSAMLConfigurationRequestWithBody generates requests for UpdateInboundSAMLConfiguration with any type of body
func NewUpdateInboundSAMLConfigurationRequestWithBody(server string, applicationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/saml", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWSTrustConfigurationRequest generates requests for DeleteWSTrustConfiguration
func NewDeleteWSTrustConfigurationRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/ws-trust", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWSTrustConfigurationRequest generates requests for GetWSTrustConfiguration
func NewGetWSTrustConfigurationRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/ws-trust", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWSTrustConfigurationRequest calls the generic UpdateWSTrustConfiguration builder with application/json body
func NewUpdateWSTrustConfigurationRequest(server string, applicationId string, body UpdateWSTrustConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWSTrustConfigurationRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewUpdateWSTrustConfigurationRequestWithBody generates requests for UpdateWSTrustConfiguration with any type of body
func NewUpdateWSTrustConfigurationRequestWithBody(server string, applicationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/ws-trust", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomInboundConfigurationRequest generates requests for DeleteCustomInboundConfiguration
func NewDeleteCustomInboundConfigurationRequest(server string, applicationId string, inboundProtocolId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "inboundProtocolId", runtime.ParamLocationPath, inboundProtocolId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomInboundConfigurationRequest generates requests for GetCustomInboundConfiguration
func NewGetCustomInboundConfigurationRequest(server string, applicationId string, inboundProtocolId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "inboundProtocolId", runtime.ParamLocationPath, inboundProtocolId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomInboundConfigurationRequest calls the generic UpdateCustomInboundConfiguration builder with application/json body
func NewUpdateCustomInboundConfigurationRequest(server string, applicationId string, inboundProtocolId string, body UpdateCustomInboundConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCustomInboundConfigurationRequestWithBody(server, applicationId, inboundProtocolId, "application/json", bodyReader)
}

// NewUpdateCustomInboundConfigurationRequestWithBody generates requests for UpdateCustomInboundConfiguration with any type of body
func NewUpdateCustomInboundConfigurationRequestWithBody(server string, applicationId string, inboundProtocolId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "inboundProtocolId", runtime.ParamLocationPath, inboundProtocolId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/inbound-protocols/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewChangeApplicationOwnerRequest calls the generic ChangeApplicationOwner builder with application/json body
func NewChangeApplicationOwnerRequest(server string, applicationId string, body ChangeApplicationOwnerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangeApplicationOwnerRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewChangeApplicationOwnerRequestWithBody generates requests for ChangeApplicationOwner with any type of body
func NewChangeApplicationOwnerRequestWithBody(server string, applicationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/owner", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShareOrgApplicationGetRequest generates requests for ShareOrgApplicationGet
func NewShareOrgApplicationGetRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/share", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShareOrgApplicationRequest calls the generic ShareOrgApplication builder with application/json body
func NewShareOrgApplicationRequest(server string, applicationId string, body ShareOrgApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewShareOrgApplicationRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewShareOrgApplicationRequestWithBody generates requests for ShareOrgApplication with any type of body
func NewShareOrgApplicationRequestWithBody(server string, applicationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/share", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShareOrgApplicationDeleteRequest generates requests for ShareOrgApplicationDelete
func NewShareOrgApplicationDeleteRequest(server string, applicationId string, sharedOrganizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "shared-organization-id", runtime.ParamLocationPath, sharedOrganizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/share/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSharedApplicationsAllDeleteRequest generates requests for SharedApplicationsAllDelete
func NewSharedApplicationsAllDeleteRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/shared-apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSharedApplicationsGetRequest generates requests for SharedApplicationsGet
func NewSharedApplicationsGetRequest(server string, applicationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applicationId", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/shared-apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllApplicationsWithResponse request
	GetAllApplicationsWithResponse(ctx context.Context, params *GetAllApplicationsParams, reqEditors ...RequestEditorFn) (*GetAllApplicationsResponse, error)

	// CreateApplicationWithBodyWithResponse request with any body
	CreateApplicationWithBodyWithResponse(ctx context.Context, params *CreateApplicationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error)

	CreateApplicationWithResponse(ctx context.Context, params *CreateApplicationParams, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error)

	// ImportApplicationWithBodyWithResponse request with any body
	ImportApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportApplicationResponse, error)

	// ImportApplicationForUpdateWithBodyWithResponse request with any body
	ImportApplicationForUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportApplicationForUpdateResponse, error)

	// GenerateLoginFlowWithBodyWithResponse request with any body
	GenerateLoginFlowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateLoginFlowResponse, error)

	GenerateLoginFlowWithResponse(ctx context.Context, body GenerateLoginFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateLoginFlowResponse, error)

	// GetLoginFlowGenerationResultWithResponse request
	GetLoginFlowGenerationResultWithResponse(ctx context.Context, operationId string, reqEditors ...RequestEditorFn) (*GetLoginFlowGenerationResultResponse, error)

	// GetLoginFlowGenerationStatusWithResponse request
	GetLoginFlowGenerationStatusWithResponse(ctx context.Context, operationId string, reqEditors ...RequestEditorFn) (*GetLoginFlowGenerationStatusResponse, error)

	// GetAdaptiveAuthTemplatesWithResponse request
	GetAdaptiveAuthTemplatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdaptiveAuthTemplatesResponse, error)

	// GetGroupsWithResponse request
	GetGroupsWithResponse(ctx context.Context, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*GetGroupsResponse, error)

	// GetInboundProtocolsWithResponse request
	GetInboundProtocolsWithResponse(ctx context.Context, params *GetInboundProtocolsParams, reqEditors ...RequestEditorFn) (*GetInboundProtocolsResponse, error)

	// GetOIDCMetadataWithResponse request
	GetOIDCMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOIDCMetadataResponse, error)

	// GetSAMLMetadataWithResponse request
	GetSAMLMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSAMLMetadataResponse, error)

	// GetWSTrustMetadataWithResponse request
	GetWSTrustMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWSTrustMetadataResponse, error)

	// GetCustomProtocolMetadataWithResponse request
	GetCustomProtocolMetadataWithResponse(ctx context.Context, inboundProtocolId string, reqEditors ...RequestEditorFn) (*GetCustomProtocolMetadataResponse, error)

	// GetResidentApplicationWithResponse request
	GetResidentApplicationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResidentApplicationResponse, error)

	// UpdateResidentApplicationWithBodyWithResponse request with any body
	UpdateResidentApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResidentApplicationResponse, error)

	UpdateResidentApplicationWithResponse(ctx context.Context, body UpdateResidentApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResidentApplicationResponse, error)

	// GetAllApplicationTemplatesWithResponse request
	GetAllApplicationTemplatesWithResponse(ctx context.Context, params *GetAllApplicationTemplatesParams, reqEditors ...RequestEditorFn) (*GetAllApplicationTemplatesResponse, error)

	// CreateApplicationTemplateWithBodyWithResponse request with any body
	CreateApplicationTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationTemplateResponse, error)

	CreateApplicationTemplateWithResponse(ctx context.Context, body CreateApplicationTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationTemplateResponse, error)

	// DeleteApplicationTemplateWithResponse request
	DeleteApplicationTemplateWithResponse(ctx context.Context, templateId TemplateIdPathParam, reqEditors ...RequestEditorFn) (*DeleteApplicationTemplateResponse, error)

	// GetApplicationTemplateWithResponse request
	GetApplicationTemplateWithResponse(ctx context.Context, templateId TemplateIdPathParam, reqEditors ...RequestEditorFn) (*GetApplicationTemplateResponse, error)

	// UpdateApplicationTemplateWithBodyWithResponse request with any body
	UpdateApplicationTemplateWithBodyWithResponse(ctx context.Context, templateId TemplateIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationTemplateResponse, error)

	UpdateApplicationTemplateWithResponse(ctx context.Context, templateId TemplateIdPathParam, body UpdateApplicationTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApplicationTemplateResponse, error)

	// DeleteApplicationWithResponse request
	DeleteApplicationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*DeleteApplicationResponse, error)

	// GetApplicationWithResponse request
	GetApplicationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetApplicationResponse, error)

	// PatchApplicationWithBodyWithResponse request with any body
	PatchApplicationWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApplicationResponse, error)

	PatchApplicationWithResponse(ctx context.Context, applicationId string, body PatchApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApplicationResponse, error)

	// GetConfiguredAuthenticatorsWithResponse request
	GetConfiguredAuthenticatorsWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetConfiguredAuthenticatorsResponse, error)

	// GetAuthorizedAPIsWithResponse request
	GetAuthorizedAPIsWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetAuthorizedAPIsResponse, error)

	// AddAuthorizedAPIWithBodyWithResponse request with any body
	AddAuthorizedAPIWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAuthorizedAPIResponse, error)

	AddAuthorizedAPIWithResponse(ctx context.Context, applicationId string, body AddAuthorizedAPIJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAuthorizedAPIResponse, error)

	// DeleteAuthorizedAPIWithResponse request
	DeleteAuthorizedAPIWithResponse(ctx context.Context, applicationId string, apiId string, reqEditors ...RequestEditorFn) (*DeleteAuthorizedAPIResponse, error)

	// PatchAuthorizedAPIWithBodyWithResponse request with any body
	PatchAuthorizedAPIWithBodyWithResponse(ctx context.Context, applicationId string, apiId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAuthorizedAPIResponse, error)

	PatchAuthorizedAPIWithResponse(ctx context.Context, applicationId string, apiId string, body PatchAuthorizedAPIJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAuthorizedAPIResponse, error)

	// ExportApplicationWithResponse request
	ExportApplicationWithResponse(ctx context.Context, applicationId string, params *ExportApplicationParams, reqEditors ...RequestEditorFn) (*ExportApplicationResponse, error)

	// ExportApplicationAsFileWithResponse request
	ExportApplicationAsFileWithResponse(ctx context.Context, applicationId string, params *ExportApplicationAsFileParams, reqEditors ...RequestEditorFn) (*ExportApplicationAsFileResponse, error)

	// GetInboundAuthenticationConfigurationsWithResponse request
	GetInboundAuthenticationConfigurationsWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetInboundAuthenticationConfigurationsResponse, error)

	// DeleteInboundOAuthConfigurationWithResponse request
	DeleteInboundOAuthConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*DeleteInboundOAuthConfigurationResponse, error)

	// GetInboundOAuthConfigurationWithResponse request
	GetInboundOAuthConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetInboundOAuthConfigurationResponse, error)

	// UpdateInboundOAuthConfigurationWithBodyWithResponse request with any body
	UpdateInboundOAuthConfigurationWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInboundOAuthConfigurationResponse, error)

	UpdateInboundOAuthConfigurationWithResponse(ctx context.Context, applicationId string, body UpdateInboundOAuthConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInboundOAuthConfigurationResponse, error)

	// RegenerateOAuthClientSecretWithResponse request
	RegenerateOAuthClientSecretWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*RegenerateOAuthClientSecretResponse, error)

	// RevokeOAuthClientWithResponse request
	RevokeOAuthClientWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*RevokeOAuthClientResponse, error)

	// DeletePassiveStsConfigurationWithResponse request
	DeletePassiveStsConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*DeletePassiveStsConfigurationResponse, error)

	// GetPassiveStsConfigurationWithResponse request
	GetPassiveStsConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetPassiveStsConfigurationResponse, error)

	// UpdatePassiveStsConfigurationWithBodyWithResponse request with any body
	UpdatePassiveStsConfigurationWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePassiveStsConfigurationResponse, error)

	UpdatePassiveStsConfigurationWithResponse(ctx context.Context, applicationId string, body UpdatePassiveStsConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePassiveStsConfigurationResponse, error)

	// DeleteInboundSAMLConfigurationWithResponse request
	DeleteInboundSAMLConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*DeleteInboundSAMLConfigurationResponse, error)

	// GetInboundSAMLConfigurationWithResponse request
	GetInboundSAMLConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetInboundSAMLConfigurationResponse, error)

	// UpdateInboundSAMLConfigurationWithBodyWithResponse request with any body
	UpdateInboundSAMLConfigurationWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInboundSAMLConfigurationResponse, error)

	UpdateInboundSAMLConfigurationWithResponse(ctx context.Context, applicationId string, body UpdateInboundSAMLConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInboundSAMLConfigurationResponse, error)

	// DeleteWSTrustConfigurationWithResponse request
	DeleteWSTrustConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*DeleteWSTrustConfigurationResponse, error)

	// GetWSTrustConfigurationWithResponse request
	GetWSTrustConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetWSTrustConfigurationResponse, error)

	// UpdateWSTrustConfigurationWithBodyWithResponse request with any body
	UpdateWSTrustConfigurationWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWSTrustConfigurationResponse, error)

	UpdateWSTrustConfigurationWithResponse(ctx context.Context, applicationId string, body UpdateWSTrustConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWSTrustConfigurationResponse, error)

	// DeleteCustomInboundConfigurationWithResponse request
	DeleteCustomInboundConfigurationWithResponse(ctx context.Context, applicationId string, inboundProtocolId string, reqEditors ...RequestEditorFn) (*DeleteCustomInboundConfigurationResponse, error)

	// GetCustomInboundConfigurationWithResponse request
	GetCustomInboundConfigurationWithResponse(ctx context.Context, applicationId string, inboundProtocolId string, reqEditors ...RequestEditorFn) (*GetCustomInboundConfigurationResponse, error)

	// UpdateCustomInboundConfigurationWithBodyWithResponse request with any body
	UpdateCustomInboundConfigurationWithBodyWithResponse(ctx context.Context, applicationId string, inboundProtocolId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomInboundConfigurationResponse, error)

	UpdateCustomInboundConfigurationWithResponse(ctx context.Context, applicationId string, inboundProtocolId string, body UpdateCustomInboundConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomInboundConfigurationResponse, error)

	// ChangeApplicationOwnerWithBodyWithResponse request with any body
	ChangeApplicationOwnerWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeApplicationOwnerResponse, error)

	ChangeApplicationOwnerWithResponse(ctx context.Context, applicationId string, body ChangeApplicationOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeApplicationOwnerResponse, error)

	// ShareOrgApplicationGetWithResponse request
	ShareOrgApplicationGetWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*ShareOrgApplicationGetResponse, error)

	// ShareOrgApplicationWithBodyWithResponse request with any body
	ShareOrgApplicationWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShareOrgApplicationResponse, error)

	ShareOrgApplicationWithResponse(ctx context.Context, applicationId string, body ShareOrgApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*ShareOrgApplicationResponse, error)

	// ShareOrgApplicationDeleteWithResponse request
	ShareOrgApplicationDeleteWithResponse(ctx context.Context, applicationId string, sharedOrganizationId string, reqEditors ...RequestEditorFn) (*ShareOrgApplicationDeleteResponse, error)

	// SharedApplicationsAllDeleteWithResponse request
	SharedApplicationsAllDeleteWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*SharedApplicationsAllDeleteResponse, error)

	// SharedApplicationsGetWithResponse request
	SharedApplicationsGetWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*SharedApplicationsGetResponse, error)
}

type GetAllApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationListResponse
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r GetAllApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON409      *Error
	JSON500      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r CreateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ImportApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportApplicationForUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ImportApplicationForUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportApplicationForUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateLoginFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginFlowGenerateResponse
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GenerateLoginFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateLoginFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoginFlowGenerationResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginFlowResultResponse
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetLoginFlowGenerationResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoginFlowGenerationResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoginFlowGenerationStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginFlowStatusResponse
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetLoginFlowGenerationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoginFlowGenerationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdaptiveAuthTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdaptiveAuthTemplates
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAdaptiveAuthTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdaptiveAuthTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GroupBasicInfo
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInboundProtocolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuthProtocolMetadata
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetInboundProtocolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInboundProtocolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOIDCMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OIDCMetaData
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetOIDCMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOIDCMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSAMLMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SAMLMetaData
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetSAMLMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSAMLMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWSTrustMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WSTrustMetaData
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetWSTrustMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWSTrustMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomProtocolMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomInboundProtocolMetaData
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetCustomProtocolMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomProtocolMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResidentApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResidentApplication
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetResidentApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResidentApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResidentApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateResidentApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResidentApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllApplicationTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationTemplatesList
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r GetAllApplicationTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllApplicationTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApplicationTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON409      *Error
	JSON500      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r CreateApplicationTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApplicationTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	XML404       *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationTemplateModel
	JSON400      *Error
	XML400       *Error
	JSON404      *Error
	XML404       *Error
	JSON500      *Error
	XML500       *Error
}

// Status returns HTTPResponse.Status
func (r GetApplicationTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApplicationTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateApplicationTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApplicationTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResponseModel
	JSON400      *Error
	XML400       *Error
	JSON404      *Error
	XML404       *Error
	JSON500      *Error
	XML500       *Error
}

// Status returns HTTPResponse.Status
func (r GetApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PatchApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfiguredAuthenticatorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ConfiguredAuthenticatorsModal
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetConfiguredAuthenticatorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfiguredAuthenticatorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthorizedAPIsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuthorizedAPIResponse
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetAuthorizedAPIsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthorizedAPIsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddAuthorizedAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AddAuthorizedAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddAuthorizedAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthorizedAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteAuthorizedAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthorizedAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAuthorizedAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PatchAuthorizedAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAuthorizedAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ExportApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportApplicationAsFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	YAML200      *string
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ExportApplicationAsFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportApplicationAsFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInboundAuthenticationConfigurationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InboundProtocolsListResponse
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetInboundAuthenticationConfigurationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInboundAuthenticationConfigurationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInboundOAuthConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteInboundOAuthConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInboundOAuthConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInboundOAuthConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OpenIDConnectConfiguration
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetInboundOAuthConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInboundOAuthConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInboundOAuthConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateInboundOAuthConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInboundOAuthConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegenerateOAuthClientSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OpenIDConnectConfiguration
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r RegenerateOAuthClientSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegenerateOAuthClientSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevokeOAuthClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r RevokeOAuthClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevokeOAuthClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePassiveStsConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePassiveStsConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePassiveStsConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPassiveStsConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PassiveStsConfiguration
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetPassiveStsConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPassiveStsConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePassiveStsConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePassiveStsConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePassiveStsConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInboundSAMLConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteInboundSAMLConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInboundSAMLConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInboundSAMLConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SAML2ServiceProvider
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetInboundSAMLConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInboundSAMLConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInboundSAMLConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateInboundSAMLConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInboundSAMLConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWSTrustConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteWSTrustConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWSTrustConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWSTrustConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WSTrustConfiguration
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetWSTrustConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWSTrustConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWSTrustConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateWSTrustConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWSTrustConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomInboundConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteCustomInboundConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomInboundConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomInboundConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomInboundProtocolConfiguration
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetCustomInboundConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomInboundConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomInboundConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateCustomInboundConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomInboundConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeApplicationOwnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ChangeApplicationOwnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeApplicationOwnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShareOrgApplicationGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SharedOrganizationsResponse
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ShareOrgApplicationGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShareOrgApplicationGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShareOrgApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ShareOrgApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShareOrgApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShareOrgApplicationDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ShareOrgApplicationDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShareOrgApplicationDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedApplicationsAllDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r SharedApplicationsAllDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedApplicationsAllDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharedApplicationsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SharedApplicationsResponse
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r SharedApplicationsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharedApplicationsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllApplicationsWithResponse request returning *GetAllApplicationsResponse
func (c *ClientWithResponses) GetAllApplicationsWithResponse(ctx context.Context, params *GetAllApplicationsParams, reqEditors ...RequestEditorFn) (*GetAllApplicationsResponse, error) {
	rsp, err := c.GetAllApplications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllApplicationsResponse(rsp)
}

// CreateApplicationWithBodyWithResponse request with arbitrary body returning *CreateApplicationResponse
func (c *ClientWithResponses) CreateApplicationWithBodyWithResponse(ctx context.Context, params *CreateApplicationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error) {
	rsp, err := c.CreateApplicationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationResponse(rsp)
}

func (c *ClientWithResponses) CreateApplicationWithResponse(ctx context.Context, params *CreateApplicationParams, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error) {
	rsp, err := c.CreateApplication(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationResponse(rsp)
}

// ImportApplicationWithBodyWithResponse request with arbitrary body returning *ImportApplicationResponse
func (c *ClientWithResponses) ImportApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportApplicationResponse, error) {
	rsp, err := c.ImportApplicationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportApplicationResponse(rsp)
}

// ImportApplicationForUpdateWithBodyWithResponse request with arbitrary body returning *ImportApplicationForUpdateResponse
func (c *ClientWithResponses) ImportApplicationForUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportApplicationForUpdateResponse, error) {
	rsp, err := c.ImportApplicationForUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportApplicationForUpdateResponse(rsp)
}

// GenerateLoginFlowWithBodyWithResponse request with arbitrary body returning *GenerateLoginFlowResponse
func (c *ClientWithResponses) GenerateLoginFlowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateLoginFlowResponse, error) {
	rsp, err := c.GenerateLoginFlowWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateLoginFlowResponse(rsp)
}

func (c *ClientWithResponses) GenerateLoginFlowWithResponse(ctx context.Context, body GenerateLoginFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateLoginFlowResponse, error) {
	rsp, err := c.GenerateLoginFlow(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateLoginFlowResponse(rsp)
}

// GetLoginFlowGenerationResultWithResponse request returning *GetLoginFlowGenerationResultResponse
func (c *ClientWithResponses) GetLoginFlowGenerationResultWithResponse(ctx context.Context, operationId string, reqEditors ...RequestEditorFn) (*GetLoginFlowGenerationResultResponse, error) {
	rsp, err := c.GetLoginFlowGenerationResult(ctx, operationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoginFlowGenerationResultResponse(rsp)
}

// GetLoginFlowGenerationStatusWithResponse request returning *GetLoginFlowGenerationStatusResponse
func (c *ClientWithResponses) GetLoginFlowGenerationStatusWithResponse(ctx context.Context, operationId string, reqEditors ...RequestEditorFn) (*GetLoginFlowGenerationStatusResponse, error) {
	rsp, err := c.GetLoginFlowGenerationStatus(ctx, operationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoginFlowGenerationStatusResponse(rsp)
}

// GetAdaptiveAuthTemplatesWithResponse request returning *GetAdaptiveAuthTemplatesResponse
func (c *ClientWithResponses) GetAdaptiveAuthTemplatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdaptiveAuthTemplatesResponse, error) {
	rsp, err := c.GetAdaptiveAuthTemplates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdaptiveAuthTemplatesResponse(rsp)
}

// GetGroupsWithResponse request returning *GetGroupsResponse
func (c *ClientWithResponses) GetGroupsWithResponse(ctx context.Context, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*GetGroupsResponse, error) {
	rsp, err := c.GetGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupsResponse(rsp)
}

// GetInboundProtocolsWithResponse request returning *GetInboundProtocolsResponse
func (c *ClientWithResponses) GetInboundProtocolsWithResponse(ctx context.Context, params *GetInboundProtocolsParams, reqEditors ...RequestEditorFn) (*GetInboundProtocolsResponse, error) {
	rsp, err := c.GetInboundProtocols(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInboundProtocolsResponse(rsp)
}

// GetOIDCMetadataWithResponse request returning *GetOIDCMetadataResponse
func (c *ClientWithResponses) GetOIDCMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOIDCMetadataResponse, error) {
	rsp, err := c.GetOIDCMetadata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOIDCMetadataResponse(rsp)
}

// GetSAMLMetadataWithResponse request returning *GetSAMLMetadataResponse
func (c *ClientWithResponses) GetSAMLMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSAMLMetadataResponse, error) {
	rsp, err := c.GetSAMLMetadata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSAMLMetadataResponse(rsp)
}

// GetWSTrustMetadataWithResponse request returning *GetWSTrustMetadataResponse
func (c *ClientWithResponses) GetWSTrustMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWSTrustMetadataResponse, error) {
	rsp, err := c.GetWSTrustMetadata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWSTrustMetadataResponse(rsp)
}

// GetCustomProtocolMetadataWithResponse request returning *GetCustomProtocolMetadataResponse
func (c *ClientWithResponses) GetCustomProtocolMetadataWithResponse(ctx context.Context, inboundProtocolId string, reqEditors ...RequestEditorFn) (*GetCustomProtocolMetadataResponse, error) {
	rsp, err := c.GetCustomProtocolMetadata(ctx, inboundProtocolId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomProtocolMetadataResponse(rsp)
}

// GetResidentApplicationWithResponse request returning *GetResidentApplicationResponse
func (c *ClientWithResponses) GetResidentApplicationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResidentApplicationResponse, error) {
	rsp, err := c.GetResidentApplication(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResidentApplicationResponse(rsp)
}

// UpdateResidentApplicationWithBodyWithResponse request with arbitrary body returning *UpdateResidentApplicationResponse
func (c *ClientWithResponses) UpdateResidentApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResidentApplicationResponse, error) {
	rsp, err := c.UpdateResidentApplicationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResidentApplicationResponse(rsp)
}

func (c *ClientWithResponses) UpdateResidentApplicationWithResponse(ctx context.Context, body UpdateResidentApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResidentApplicationResponse, error) {
	rsp, err := c.UpdateResidentApplication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResidentApplicationResponse(rsp)
}

// GetAllApplicationTemplatesWithResponse request returning *GetAllApplicationTemplatesResponse
func (c *ClientWithResponses) GetAllApplicationTemplatesWithResponse(ctx context.Context, params *GetAllApplicationTemplatesParams, reqEditors ...RequestEditorFn) (*GetAllApplicationTemplatesResponse, error) {
	rsp, err := c.GetAllApplicationTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllApplicationTemplatesResponse(rsp)
}

// CreateApplicationTemplateWithBodyWithResponse request with arbitrary body returning *CreateApplicationTemplateResponse
func (c *ClientWithResponses) CreateApplicationTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationTemplateResponse, error) {
	rsp, err := c.CreateApplicationTemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationTemplateResponse(rsp)
}

func (c *ClientWithResponses) CreateApplicationTemplateWithResponse(ctx context.Context, body CreateApplicationTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationTemplateResponse, error) {
	rsp, err := c.CreateApplicationTemplate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationTemplateResponse(rsp)
}

// DeleteApplicationTemplateWithResponse request returning *DeleteApplicationTemplateResponse
func (c *ClientWithResponses) DeleteApplicationTemplateWithResponse(ctx context.Context, templateId TemplateIdPathParam, reqEditors ...RequestEditorFn) (*DeleteApplicationTemplateResponse, error) {
	rsp, err := c.DeleteApplicationTemplate(ctx, templateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationTemplateResponse(rsp)
}

// GetApplicationTemplateWithResponse request returning *GetApplicationTemplateResponse
func (c *ClientWithResponses) GetApplicationTemplateWithResponse(ctx context.Context, templateId TemplateIdPathParam, reqEditors ...RequestEditorFn) (*GetApplicationTemplateResponse, error) {
	rsp, err := c.GetApplicationTemplate(ctx, templateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationTemplateResponse(rsp)
}

// UpdateApplicationTemplateWithBodyWithResponse request with arbitrary body returning *UpdateApplicationTemplateResponse
func (c *ClientWithResponses) UpdateApplicationTemplateWithBodyWithResponse(ctx context.Context, templateId TemplateIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationTemplateResponse, error) {
	rsp, err := c.UpdateApplicationTemplateWithBody(ctx, templateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationTemplateResponse(rsp)
}

func (c *ClientWithResponses) UpdateApplicationTemplateWithResponse(ctx context.Context, templateId TemplateIdPathParam, body UpdateApplicationTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApplicationTemplateResponse, error) {
	rsp, err := c.UpdateApplicationTemplate(ctx, templateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationTemplateResponse(rsp)
}

// DeleteApplicationWithResponse request returning *DeleteApplicationResponse
func (c *ClientWithResponses) DeleteApplicationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*DeleteApplicationResponse, error) {
	rsp, err := c.DeleteApplication(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationResponse(rsp)
}

// GetApplicationWithResponse request returning *GetApplicationResponse
func (c *ClientWithResponses) GetApplicationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetApplicationResponse, error) {
	rsp, err := c.GetApplication(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationResponse(rsp)
}

// PatchApplicationWithBodyWithResponse request with arbitrary body returning *PatchApplicationResponse
func (c *ClientWithResponses) PatchApplicationWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApplicationResponse, error) {
	rsp, err := c.PatchApplicationWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApplicationResponse(rsp)
}

func (c *ClientWithResponses) PatchApplicationWithResponse(ctx context.Context, applicationId string, body PatchApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApplicationResponse, error) {
	rsp, err := c.PatchApplication(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApplicationResponse(rsp)
}

// GetConfiguredAuthenticatorsWithResponse request returning *GetConfiguredAuthenticatorsResponse
func (c *ClientWithResponses) GetConfiguredAuthenticatorsWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetConfiguredAuthenticatorsResponse, error) {
	rsp, err := c.GetConfiguredAuthenticators(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfiguredAuthenticatorsResponse(rsp)
}

// GetAuthorizedAPIsWithResponse request returning *GetAuthorizedAPIsResponse
func (c *ClientWithResponses) GetAuthorizedAPIsWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetAuthorizedAPIsResponse, error) {
	rsp, err := c.GetAuthorizedAPIs(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthorizedAPIsResponse(rsp)
}

// AddAuthorizedAPIWithBodyWithResponse request with arbitrary body returning *AddAuthorizedAPIResponse
func (c *ClientWithResponses) AddAuthorizedAPIWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAuthorizedAPIResponse, error) {
	rsp, err := c.AddAuthorizedAPIWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAuthorizedAPIResponse(rsp)
}

func (c *ClientWithResponses) AddAuthorizedAPIWithResponse(ctx context.Context, applicationId string, body AddAuthorizedAPIJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAuthorizedAPIResponse, error) {
	rsp, err := c.AddAuthorizedAPI(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAuthorizedAPIResponse(rsp)
}

// DeleteAuthorizedAPIWithResponse request returning *DeleteAuthorizedAPIResponse
func (c *ClientWithResponses) DeleteAuthorizedAPIWithResponse(ctx context.Context, applicationId string, apiId string, reqEditors ...RequestEditorFn) (*DeleteAuthorizedAPIResponse, error) {
	rsp, err := c.DeleteAuthorizedAPI(ctx, applicationId, apiId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthorizedAPIResponse(rsp)
}

// PatchAuthorizedAPIWithBodyWithResponse request with arbitrary body returning *PatchAuthorizedAPIResponse
func (c *ClientWithResponses) PatchAuthorizedAPIWithBodyWithResponse(ctx context.Context, applicationId string, apiId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAuthorizedAPIResponse, error) {
	rsp, err := c.PatchAuthorizedAPIWithBody(ctx, applicationId, apiId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAuthorizedAPIResponse(rsp)
}

func (c *ClientWithResponses) PatchAuthorizedAPIWithResponse(ctx context.Context, applicationId string, apiId string, body PatchAuthorizedAPIJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAuthorizedAPIResponse, error) {
	rsp, err := c.PatchAuthorizedAPI(ctx, applicationId, apiId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAuthorizedAPIResponse(rsp)
}

// ExportApplicationWithResponse request returning *ExportApplicationResponse
func (c *ClientWithResponses) ExportApplicationWithResponse(ctx context.Context, applicationId string, params *ExportApplicationParams, reqEditors ...RequestEditorFn) (*ExportApplicationResponse, error) {
	rsp, err := c.ExportApplication(ctx, applicationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportApplicationResponse(rsp)
}

// ExportApplicationAsFileWithResponse request returning *ExportApplicationAsFileResponse
func (c *ClientWithResponses) ExportApplicationAsFileWithResponse(ctx context.Context, applicationId string, params *ExportApplicationAsFileParams, reqEditors ...RequestEditorFn) (*ExportApplicationAsFileResponse, error) {
	rsp, err := c.ExportApplicationAsFile(ctx, applicationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportApplicationAsFileResponse(rsp)
}

// GetInboundAuthenticationConfigurationsWithResponse request returning *GetInboundAuthenticationConfigurationsResponse
func (c *ClientWithResponses) GetInboundAuthenticationConfigurationsWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetInboundAuthenticationConfigurationsResponse, error) {
	rsp, err := c.GetInboundAuthenticationConfigurations(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInboundAuthenticationConfigurationsResponse(rsp)
}

// DeleteInboundOAuthConfigurationWithResponse request returning *DeleteInboundOAuthConfigurationResponse
func (c *ClientWithResponses) DeleteInboundOAuthConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*DeleteInboundOAuthConfigurationResponse, error) {
	rsp, err := c.DeleteInboundOAuthConfiguration(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInboundOAuthConfigurationResponse(rsp)
}

// GetInboundOAuthConfigurationWithResponse request returning *GetInboundOAuthConfigurationResponse
func (c *ClientWithResponses) GetInboundOAuthConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetInboundOAuthConfigurationResponse, error) {
	rsp, err := c.GetInboundOAuthConfiguration(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInboundOAuthConfigurationResponse(rsp)
}

// UpdateInboundOAuthConfigurationWithBodyWithResponse request with arbitrary body returning *UpdateInboundOAuthConfigurationResponse
func (c *ClientWithResponses) UpdateInboundOAuthConfigurationWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInboundOAuthConfigurationResponse, error) {
	rsp, err := c.UpdateInboundOAuthConfigurationWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInboundOAuthConfigurationResponse(rsp)
}

func (c *ClientWithResponses) UpdateInboundOAuthConfigurationWithResponse(ctx context.Context, applicationId string, body UpdateInboundOAuthConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInboundOAuthConfigurationResponse, error) {
	rsp, err := c.UpdateInboundOAuthConfiguration(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInboundOAuthConfigurationResponse(rsp)
}

// RegenerateOAuthClientSecretWithResponse request returning *RegenerateOAuthClientSecretResponse
func (c *ClientWithResponses) RegenerateOAuthClientSecretWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*RegenerateOAuthClientSecretResponse, error) {
	rsp, err := c.RegenerateOAuthClientSecret(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegenerateOAuthClientSecretResponse(rsp)
}

// RevokeOAuthClientWithResponse request returning *RevokeOAuthClientResponse
func (c *ClientWithResponses) RevokeOAuthClientWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*RevokeOAuthClientResponse, error) {
	rsp, err := c.RevokeOAuthClient(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevokeOAuthClientResponse(rsp)
}

// DeletePassiveStsConfigurationWithResponse request returning *DeletePassiveStsConfigurationResponse
func (c *ClientWithResponses) DeletePassiveStsConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*DeletePassiveStsConfigurationResponse, error) {
	rsp, err := c.DeletePassiveStsConfiguration(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePassiveStsConfigurationResponse(rsp)
}

// GetPassiveStsConfigurationWithResponse request returning *GetPassiveStsConfigurationResponse
func (c *ClientWithResponses) GetPassiveStsConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetPassiveStsConfigurationResponse, error) {
	rsp, err := c.GetPassiveStsConfiguration(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPassiveStsConfigurationResponse(rsp)
}

// UpdatePassiveStsConfigurationWithBodyWithResponse request with arbitrary body returning *UpdatePassiveStsConfigurationResponse
func (c *ClientWithResponses) UpdatePassiveStsConfigurationWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePassiveStsConfigurationResponse, error) {
	rsp, err := c.UpdatePassiveStsConfigurationWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePassiveStsConfigurationResponse(rsp)
}

func (c *ClientWithResponses) UpdatePassiveStsConfigurationWithResponse(ctx context.Context, applicationId string, body UpdatePassiveStsConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePassiveStsConfigurationResponse, error) {
	rsp, err := c.UpdatePassiveStsConfiguration(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePassiveStsConfigurationResponse(rsp)
}

// DeleteInboundSAMLConfigurationWithResponse request returning *DeleteInboundSAMLConfigurationResponse
func (c *ClientWithResponses) DeleteInboundSAMLConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*DeleteInboundSAMLConfigurationResponse, error) {
	rsp, err := c.DeleteInboundSAMLConfiguration(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInboundSAMLConfigurationResponse(rsp)
}

// GetInboundSAMLConfigurationWithResponse request returning *GetInboundSAMLConfigurationResponse
func (c *ClientWithResponses) GetInboundSAMLConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetInboundSAMLConfigurationResponse, error) {
	rsp, err := c.GetInboundSAMLConfiguration(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInboundSAMLConfigurationResponse(rsp)
}

// UpdateInboundSAMLConfigurationWithBodyWithResponse request with arbitrary body returning *UpdateInboundSAMLConfigurationResponse
func (c *ClientWithResponses) UpdateInboundSAMLConfigurationWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInboundSAMLConfigurationResponse, error) {
	rsp, err := c.UpdateInboundSAMLConfigurationWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInboundSAMLConfigurationResponse(rsp)
}

func (c *ClientWithResponses) UpdateInboundSAMLConfigurationWithResponse(ctx context.Context, applicationId string, body UpdateInboundSAMLConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInboundSAMLConfigurationResponse, error) {
	rsp, err := c.UpdateInboundSAMLConfiguration(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInboundSAMLConfigurationResponse(rsp)
}

// DeleteWSTrustConfigurationWithResponse request returning *DeleteWSTrustConfigurationResponse
func (c *ClientWithResponses) DeleteWSTrustConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*DeleteWSTrustConfigurationResponse, error) {
	rsp, err := c.DeleteWSTrustConfiguration(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWSTrustConfigurationResponse(rsp)
}

// GetWSTrustConfigurationWithResponse request returning *GetWSTrustConfigurationResponse
func (c *ClientWithResponses) GetWSTrustConfigurationWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*GetWSTrustConfigurationResponse, error) {
	rsp, err := c.GetWSTrustConfiguration(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWSTrustConfigurationResponse(rsp)
}

// UpdateWSTrustConfigurationWithBodyWithResponse request with arbitrary body returning *UpdateWSTrustConfigurationResponse
func (c *ClientWithResponses) UpdateWSTrustConfigurationWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWSTrustConfigurationResponse, error) {
	rsp, err := c.UpdateWSTrustConfigurationWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWSTrustConfigurationResponse(rsp)
}

func (c *ClientWithResponses) UpdateWSTrustConfigurationWithResponse(ctx context.Context, applicationId string, body UpdateWSTrustConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWSTrustConfigurationResponse, error) {
	rsp, err := c.UpdateWSTrustConfiguration(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWSTrustConfigurationResponse(rsp)
}

// DeleteCustomInboundConfigurationWithResponse request returning *DeleteCustomInboundConfigurationResponse
func (c *ClientWithResponses) DeleteCustomInboundConfigurationWithResponse(ctx context.Context, applicationId string, inboundProtocolId string, reqEditors ...RequestEditorFn) (*DeleteCustomInboundConfigurationResponse, error) {
	rsp, err := c.DeleteCustomInboundConfiguration(ctx, applicationId, inboundProtocolId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomInboundConfigurationResponse(rsp)
}

// GetCustomInboundConfigurationWithResponse request returning *GetCustomInboundConfigurationResponse
func (c *ClientWithResponses) GetCustomInboundConfigurationWithResponse(ctx context.Context, applicationId string, inboundProtocolId string, reqEditors ...RequestEditorFn) (*GetCustomInboundConfigurationResponse, error) {
	rsp, err := c.GetCustomInboundConfiguration(ctx, applicationId, inboundProtocolId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomInboundConfigurationResponse(rsp)
}

// UpdateCustomInboundConfigurationWithBodyWithResponse request with arbitrary body returning *UpdateCustomInboundConfigurationResponse
func (c *ClientWithResponses) UpdateCustomInboundConfigurationWithBodyWithResponse(ctx context.Context, applicationId string, inboundProtocolId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomInboundConfigurationResponse, error) {
	rsp, err := c.UpdateCustomInboundConfigurationWithBody(ctx, applicationId, inboundProtocolId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomInboundConfigurationResponse(rsp)
}

func (c *ClientWithResponses) UpdateCustomInboundConfigurationWithResponse(ctx context.Context, applicationId string, inboundProtocolId string, body UpdateCustomInboundConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomInboundConfigurationResponse, error) {
	rsp, err := c.UpdateCustomInboundConfiguration(ctx, applicationId, inboundProtocolId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomInboundConfigurationResponse(rsp)
}

// ChangeApplicationOwnerWithBodyWithResponse request with arbitrary body returning *ChangeApplicationOwnerResponse
func (c *ClientWithResponses) ChangeApplicationOwnerWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeApplicationOwnerResponse, error) {
	rsp, err := c.ChangeApplicationOwnerWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeApplicationOwnerResponse(rsp)
}

func (c *ClientWithResponses) ChangeApplicationOwnerWithResponse(ctx context.Context, applicationId string, body ChangeApplicationOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeApplicationOwnerResponse, error) {
	rsp, err := c.ChangeApplicationOwner(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeApplicationOwnerResponse(rsp)
}

// ShareOrgApplicationGetWithResponse request returning *ShareOrgApplicationGetResponse
func (c *ClientWithResponses) ShareOrgApplicationGetWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*ShareOrgApplicationGetResponse, error) {
	rsp, err := c.ShareOrgApplicationGet(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareOrgApplicationGetResponse(rsp)
}

// ShareOrgApplicationWithBodyWithResponse request with arbitrary body returning *ShareOrgApplicationResponse
func (c *ClientWithResponses) ShareOrgApplicationWithBodyWithResponse(ctx context.Context, applicationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShareOrgApplicationResponse, error) {
	rsp, err := c.ShareOrgApplicationWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareOrgApplicationResponse(rsp)
}

func (c *ClientWithResponses) ShareOrgApplicationWithResponse(ctx context.Context, applicationId string, body ShareOrgApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*ShareOrgApplicationResponse, error) {
	rsp, err := c.ShareOrgApplication(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareOrgApplicationResponse(rsp)
}

// ShareOrgApplicationDeleteWithResponse request returning *ShareOrgApplicationDeleteResponse
func (c *ClientWithResponses) ShareOrgApplicationDeleteWithResponse(ctx context.Context, applicationId string, sharedOrganizationId string, reqEditors ...RequestEditorFn) (*ShareOrgApplicationDeleteResponse, error) {
	rsp, err := c.ShareOrgApplicationDelete(ctx, applicationId, sharedOrganizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareOrgApplicationDeleteResponse(rsp)
}

// SharedApplicationsAllDeleteWithResponse request returning *SharedApplicationsAllDeleteResponse
func (c *ClientWithResponses) SharedApplicationsAllDeleteWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*SharedApplicationsAllDeleteResponse, error) {
	rsp, err := c.SharedApplicationsAllDelete(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedApplicationsAllDeleteResponse(rsp)
}

// SharedApplicationsGetWithResponse request returning *SharedApplicationsGetResponse
func (c *ClientWithResponses) SharedApplicationsGetWithResponse(ctx context.Context, applicationId string, reqEditors ...RequestEditorFn) (*SharedApplicationsGetResponse, error) {
	rsp, err := c.SharedApplicationsGet(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharedApplicationsGetResponse(rsp)
}

// ParseGetAllApplicationsResponse parses an HTTP response from a GetAllApplicationsWithResponse call
func ParseGetAllApplicationsResponse(rsp *http.Response) (*GetAllApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseCreateApplicationResponse parses an HTTP response from a CreateApplicationWithResponse call
func ParseCreateApplicationResponse(rsp *http.Response) (*CreateApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseImportApplicationResponse parses an HTTP response from a ImportApplicationWithResponse call
func ParseImportApplicationResponse(rsp *http.Response) (*ImportApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseImportApplicationForUpdateResponse parses an HTTP response from a ImportApplicationForUpdateWithResponse call
func ParseImportApplicationForUpdateResponse(rsp *http.Response) (*ImportApplicationForUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportApplicationForUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGenerateLoginFlowResponse parses an HTTP response from a GenerateLoginFlowWithResponse call
func ParseGenerateLoginFlowResponse(rsp *http.Response) (*GenerateLoginFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateLoginFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginFlowGenerateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetLoginFlowGenerationResultResponse parses an HTTP response from a GetLoginFlowGenerationResultWithResponse call
func ParseGetLoginFlowGenerationResultResponse(rsp *http.Response) (*GetLoginFlowGenerationResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLoginFlowGenerationResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginFlowResultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetLoginFlowGenerationStatusResponse parses an HTTP response from a GetLoginFlowGenerationStatusWithResponse call
func ParseGetLoginFlowGenerationStatusResponse(rsp *http.Response) (*GetLoginFlowGenerationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLoginFlowGenerationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginFlowStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetAdaptiveAuthTemplatesResponse parses an HTTP response from a GetAdaptiveAuthTemplatesWithResponse call
func ParseGetAdaptiveAuthTemplatesResponse(rsp *http.Response) (*GetAdaptiveAuthTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdaptiveAuthTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdaptiveAuthTemplates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGroupsResponse parses an HTTP response from a GetGroupsWithResponse call
func ParseGetGroupsResponse(rsp *http.Response) (*GetGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GroupBasicInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetInboundProtocolsResponse parses an HTTP response from a GetInboundProtocolsWithResponse call
func ParseGetInboundProtocolsResponse(rsp *http.Response) (*GetInboundProtocolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInboundProtocolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuthProtocolMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOIDCMetadataResponse parses an HTTP response from a GetOIDCMetadataWithResponse call
func ParseGetOIDCMetadataResponse(rsp *http.Response) (*GetOIDCMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOIDCMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OIDCMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSAMLMetadataResponse parses an HTTP response from a GetSAMLMetadataWithResponse call
func ParseGetSAMLMetadataResponse(rsp *http.Response) (*GetSAMLMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSAMLMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SAMLMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWSTrustMetadataResponse parses an HTTP response from a GetWSTrustMetadataWithResponse call
func ParseGetWSTrustMetadataResponse(rsp *http.Response) (*GetWSTrustMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWSTrustMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WSTrustMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomProtocolMetadataResponse parses an HTTP response from a GetCustomProtocolMetadataWithResponse call
func ParseGetCustomProtocolMetadataResponse(rsp *http.Response) (*GetCustomProtocolMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomProtocolMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomInboundProtocolMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetResidentApplicationResponse parses an HTTP response from a GetResidentApplicationWithResponse call
func ParseGetResidentApplicationResponse(rsp *http.Response) (*GetResidentApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResidentApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResidentApplication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateResidentApplicationResponse parses an HTTP response from a UpdateResidentApplicationWithResponse call
func ParseUpdateResidentApplicationResponse(rsp *http.Response) (*UpdateResidentApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResidentApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllApplicationTemplatesResponse parses an HTTP response from a GetAllApplicationTemplatesWithResponse call
func ParseGetAllApplicationTemplatesResponse(rsp *http.Response) (*GetAllApplicationTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllApplicationTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationTemplatesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseCreateApplicationTemplateResponse parses an HTTP response from a CreateApplicationTemplateWithResponse call
func ParseCreateApplicationTemplateResponse(rsp *http.Response) (*CreateApplicationTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApplicationTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseDeleteApplicationTemplateResponse parses an HTTP response from a DeleteApplicationTemplateWithResponse call
func ParseDeleteApplicationTemplateResponse(rsp *http.Response) (*DeleteApplicationTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	}

	return response, nil
}

// ParseGetApplicationTemplateResponse parses an HTTP response from a GetApplicationTemplateWithResponse call
func ParseGetApplicationTemplateResponse(rsp *http.Response) (*GetApplicationTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationTemplateModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateApplicationTemplateResponse parses an HTTP response from a UpdateApplicationTemplateWithResponse call
func ParseUpdateApplicationTemplateResponse(rsp *http.Response) (*UpdateApplicationTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApplicationTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApplicationResponse parses an HTTP response from a DeleteApplicationWithResponse call
func ParseDeleteApplicationResponse(rsp *http.Response) (*DeleteApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApplicationResponse parses an HTTP response from a GetApplicationWithResponse call
func ParseGetApplicationResponse(rsp *http.Response) (*GetApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 404:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePatchApplicationResponse parses an HTTP response from a PatchApplicationWithResponse call
func ParsePatchApplicationResponse(rsp *http.Response) (*PatchApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetConfiguredAuthenticatorsResponse parses an HTTP response from a GetConfiguredAuthenticatorsWithResponse call
func ParseGetConfiguredAuthenticatorsResponse(rsp *http.Response) (*GetConfiguredAuthenticatorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfiguredAuthenticatorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ConfiguredAuthenticatorsModal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAuthorizedAPIsResponse parses an HTTP response from a GetAuthorizedAPIsWithResponse call
func ParseGetAuthorizedAPIsResponse(rsp *http.Response) (*GetAuthorizedAPIsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthorizedAPIsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuthorizedAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddAuthorizedAPIResponse parses an HTTP response from a AddAuthorizedAPIWithResponse call
func ParseAddAuthorizedAPIResponse(rsp *http.Response) (*AddAuthorizedAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddAuthorizedAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAuthorizedAPIResponse parses an HTTP response from a DeleteAuthorizedAPIWithResponse call
func ParseDeleteAuthorizedAPIResponse(rsp *http.Response) (*DeleteAuthorizedAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthorizedAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchAuthorizedAPIResponse parses an HTTP response from a PatchAuthorizedAPIWithResponse call
func ParsePatchAuthorizedAPIResponse(rsp *http.Response) (*PatchAuthorizedAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAuthorizedAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseExportApplicationResponse parses an HTTP response from a ExportApplicationWithResponse call
func ParseExportApplicationResponse(rsp *http.Response) (*ExportApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseExportApplicationAsFileResponse parses an HTTP response from a ExportApplicationAsFileWithResponse call
func ParseExportApplicationAsFileResponse(rsp *http.Response) (*ExportApplicationAsFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportApplicationAsFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest string
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/octet-stream) unsupported

	}

	return response, nil
}

// ParseGetInboundAuthenticationConfigurationsResponse parses an HTTP response from a GetInboundAuthenticationConfigurationsWithResponse call
func ParseGetInboundAuthenticationConfigurationsResponse(rsp *http.Response) (*GetInboundAuthenticationConfigurationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInboundAuthenticationConfigurationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InboundProtocolsListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteInboundOAuthConfigurationResponse parses an HTTP response from a DeleteInboundOAuthConfigurationWithResponse call
func ParseDeleteInboundOAuthConfigurationResponse(rsp *http.Response) (*DeleteInboundOAuthConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInboundOAuthConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetInboundOAuthConfigurationResponse parses an HTTP response from a GetInboundOAuthConfigurationWithResponse call
func ParseGetInboundOAuthConfigurationResponse(rsp *http.Response) (*GetInboundOAuthConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInboundOAuthConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OpenIDConnectConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateInboundOAuthConfigurationResponse parses an HTTP response from a UpdateInboundOAuthConfigurationWithResponse call
func ParseUpdateInboundOAuthConfigurationResponse(rsp *http.Response) (*UpdateInboundOAuthConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateInboundOAuthConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRegenerateOAuthClientSecretResponse parses an HTTP response from a RegenerateOAuthClientSecretWithResponse call
func ParseRegenerateOAuthClientSecretResponse(rsp *http.Response) (*RegenerateOAuthClientSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegenerateOAuthClientSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OpenIDConnectConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRevokeOAuthClientResponse parses an HTTP response from a RevokeOAuthClientWithResponse call
func ParseRevokeOAuthClientResponse(rsp *http.Response) (*RevokeOAuthClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevokeOAuthClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePassiveStsConfigurationResponse parses an HTTP response from a DeletePassiveStsConfigurationWithResponse call
func ParseDeletePassiveStsConfigurationResponse(rsp *http.Response) (*DeletePassiveStsConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePassiveStsConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPassiveStsConfigurationResponse parses an HTTP response from a GetPassiveStsConfigurationWithResponse call
func ParseGetPassiveStsConfigurationResponse(rsp *http.Response) (*GetPassiveStsConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPassiveStsConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PassiveStsConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePassiveStsConfigurationResponse parses an HTTP response from a UpdatePassiveStsConfigurationWithResponse call
func ParseUpdatePassiveStsConfigurationResponse(rsp *http.Response) (*UpdatePassiveStsConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePassiveStsConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteInboundSAMLConfigurationResponse parses an HTTP response from a DeleteInboundSAMLConfigurationWithResponse call
func ParseDeleteInboundSAMLConfigurationResponse(rsp *http.Response) (*DeleteInboundSAMLConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInboundSAMLConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetInboundSAMLConfigurationResponse parses an HTTP response from a GetInboundSAMLConfigurationWithResponse call
func ParseGetInboundSAMLConfigurationResponse(rsp *http.Response) (*GetInboundSAMLConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInboundSAMLConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SAML2ServiceProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateInboundSAMLConfigurationResponse parses an HTTP response from a UpdateInboundSAMLConfigurationWithResponse call
func ParseUpdateInboundSAMLConfigurationResponse(rsp *http.Response) (*UpdateInboundSAMLConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateInboundSAMLConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteWSTrustConfigurationResponse parses an HTTP response from a DeleteWSTrustConfigurationWithResponse call
func ParseDeleteWSTrustConfigurationResponse(rsp *http.Response) (*DeleteWSTrustConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWSTrustConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWSTrustConfigurationResponse parses an HTTP response from a GetWSTrustConfigurationWithResponse call
func ParseGetWSTrustConfigurationResponse(rsp *http.Response) (*GetWSTrustConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWSTrustConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WSTrustConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateWSTrustConfigurationResponse parses an HTTP response from a UpdateWSTrustConfigurationWithResponse call
func ParseUpdateWSTrustConfigurationResponse(rsp *http.Response) (*UpdateWSTrustConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWSTrustConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCustomInboundConfigurationResponse parses an HTTP response from a DeleteCustomInboundConfigurationWithResponse call
func ParseDeleteCustomInboundConfigurationResponse(rsp *http.Response) (*DeleteCustomInboundConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomInboundConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomInboundConfigurationResponse parses an HTTP response from a GetCustomInboundConfigurationWithResponse call
func ParseGetCustomInboundConfigurationResponse(rsp *http.Response) (*GetCustomInboundConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomInboundConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomInboundProtocolConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateCustomInboundConfigurationResponse parses an HTTP response from a UpdateCustomInboundConfigurationWithResponse call
func ParseUpdateCustomInboundConfigurationResponse(rsp *http.Response) (*UpdateCustomInboundConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomInboundConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseChangeApplicationOwnerResponse parses an HTTP response from a ChangeApplicationOwnerWithResponse call
func ParseChangeApplicationOwnerResponse(rsp *http.Response) (*ChangeApplicationOwnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangeApplicationOwnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseShareOrgApplicationGetResponse parses an HTTP response from a ShareOrgApplicationGetWithResponse call
func ParseShareOrgApplicationGetResponse(rsp *http.Response) (*ShareOrgApplicationGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShareOrgApplicationGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SharedOrganizationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseShareOrgApplicationResponse parses an HTTP response from a ShareOrgApplicationWithResponse call
func ParseShareOrgApplicationResponse(rsp *http.Response) (*ShareOrgApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShareOrgApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseShareOrgApplicationDeleteResponse parses an HTTP response from a ShareOrgApplicationDeleteWithResponse call
func ParseShareOrgApplicationDeleteResponse(rsp *http.Response) (*ShareOrgApplicationDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShareOrgApplicationDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSharedApplicationsAllDeleteResponse parses an HTTP response from a SharedApplicationsAllDeleteWithResponse call
func ParseSharedApplicationsAllDeleteResponse(rsp *http.Response) (*SharedApplicationsAllDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedApplicationsAllDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSharedApplicationsGetResponse parses an HTTP response from a SharedApplicationsGetWithResponse call
func ParseSharedApplicationsGetResponse(rsp *http.Response) (*SharedApplicationsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharedApplicationsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SharedApplicationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
