// Package authenticator provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package authenticator

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
	OAuth2Scopes    = "OAuth2.Scopes"
)

// Defines values for AuthenticationTypeType.
const (
	APIKEY AuthenticationTypeType = "API_KEY"
	BASIC  AuthenticationTypeType = "BASIC"
	BEARER AuthenticationTypeType = "BEARER"
	NONE   AuthenticationTypeType = "NONE"
)

// Defines values for AuthenticatorDefinedBy.
const (
	SYSTEM AuthenticatorDefinedBy = "SYSTEM"
	USER   AuthenticatorDefinedBy = "USER"
)

// Defines values for AuthenticatorType.
const (
	FEDERATED AuthenticatorType = "FEDERATED"
	LOCAL     AuthenticatorType = "LOCAL"
)

// Defines values for UserDefinedLocalAuthenticatorCreationAuthenticationType.
const (
	IDENTIFICATION UserDefinedLocalAuthenticatorCreationAuthenticationType = "IDENTIFICATION"
	VERIFICATION   UserDefinedLocalAuthenticatorCreationAuthenticationType = "VERIFICATION"
)

// AuthenticationType defines model for AuthenticationType.
type AuthenticationType struct {
	Properties map[string]interface{} `json:"properties"`
	Type       AuthenticationTypeType `json:"type"`
}

// AuthenticationTypeType defines model for AuthenticationType.Type.
type AuthenticationTypeType string

// Authenticator defines model for Authenticator.
type Authenticator struct {
	DefinedBy   *AuthenticatorDefinedBy `json:"definedBy,omitempty"`
	Description *string                 `json:"description,omitempty"`
	DisplayName *string                 `json:"displayName,omitempty"`
	Id          *string                 `json:"id,omitempty"`
	Image       *string                 `json:"image,omitempty"`
	IsEnabled   *bool                   `json:"isEnabled,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Self        *string                 `json:"self,omitempty"`
	Tags        *[]string               `json:"tags,omitempty"`
	Type        *AuthenticatorType      `json:"type,omitempty"`
}

// AuthenticatorDefinedBy defines model for Authenticator.DefinedBy.
type AuthenticatorDefinedBy string

// AuthenticatorType defines model for Authenticator.Type.
type AuthenticatorType string

// Authenticators defines model for Authenticators.
type Authenticators = []Authenticator

// ConnectedApp defines model for ConnectedApp.
type ConnectedApp struct {
	AppId *string `json:"appId,omitempty"`
	Self  *string `json:"self,omitempty"`
}

// ConnectedApps defines model for ConnectedApps.
type ConnectedApps struct {
	ConnectedApps *[]ConnectedApp `json:"connectedApps,omitempty"`
	Count         *int            `json:"count,omitempty"`
	Links         *[]Link         `json:"links,omitempty"`
	StartIndex    *int            `json:"startIndex,omitempty"`
	TotalResults  *int            `json:"totalResults,omitempty"`
}

// Endpoint defines model for Endpoint.
type Endpoint struct {
	Authentication *AuthenticationType `json:"authentication,omitempty"`
	Uri            *string             `json:"uri,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Code An error code.
	Code string `json:"code"`

	// Description An error description.
	Description *string `json:"description,omitempty"`

	// Message An error message.
	Message string `json:"message"`

	// TraceId An error trace identifier.
	TraceId *string `json:"traceId,omitempty"`
}

// Link defines model for Link.
type Link struct {
	// Href Path to the target resource.
	Href *string `json:"href,omitempty"`

	// Rel Describes how the current context is related to the target resource.
	Rel *string `json:"rel,omitempty"`
}

// Tags The list of tags available for authenticators.
type Tags = []string

// UserDefinedLocalAuthenticatorCreation This represents the configuration for creating the user defined local authenticator.
type UserDefinedLocalAuthenticatorCreation struct {
	AuthenticationType *UserDefinedLocalAuthenticatorCreationAuthenticationType `json:"authenticationType,omitempty"`
	Description        *string                                                  `json:"description,omitempty"`
	DisplayName        string                                                   `json:"displayName"`
	Endpoint           Endpoint                                                 `json:"endpoint"`
	Id                 *string                                                  `json:"id,omitempty"`
	Image              *string                                                  `json:"image,omitempty"`
	IsEnabled          bool                                                     `json:"isEnabled"`
	Name               string                                                   `json:"name"`
}

// UserDefinedLocalAuthenticatorCreationAuthenticationType defines model for UserDefinedLocalAuthenticatorCreation.AuthenticationType.
type UserDefinedLocalAuthenticatorCreationAuthenticationType string

// UserDefinedLocalAuthenticatorUpdate TThis represents the configuration for updating user defined local authenticator.
type UserDefinedLocalAuthenticatorUpdate struct {
	Description *string  `json:"description,omitempty"`
	DisplayName string   `json:"displayName"`
	Endpoint    Endpoint `json:"endpoint"`
	Image       *string  `json:"image,omitempty"`
	IsEnabled   bool     `json:"isEnabled"`
}

// FilterQueryParam defines model for filterQueryParam.
type FilterQueryParam = string

// LimitQueryParam defines model for limitQueryParam.
type LimitQueryParam = int32

// OffsetQueryParam defines model for offsetQueryParam.
type OffsetQueryParam = int32

// BadRequest defines model for BadRequest.
type BadRequest = Error

// NotFound defines model for NotFound.
type NotFound = Error

// NotImplemented defines model for NotImplemented.
type NotImplemented = Error

// ServerError defines model for ServerError.
type ServerError = Error

// GetAuthenticatorsParams defines parameters for GetAuthenticators.
type GetAuthenticatorsParams struct {
	// Filter Condition to filter the retrieval of records. Only supports filtering based on the 'tag' and 'name' attribute. For local authenticators and request path authenticators, the 'displayName' is considered as the 'name' attribute during filtering. The 'name' attribute only supports 'eq' and 'sw operations. Filtering with multiple 'name' attributes is not supported. The 'tag' attribute only supports 'eq' operation. Filtering with multiple 'tag' attributes is supported with only 'or' as the complex query operation. E.g. /configs/authenticators?filter=name+sw+fi+and+(tag+eq+2FA+or+tag+eq+MFA)
	Filter *FilterQueryParam `form:"filter,omitempty" json:"filter,omitempty"`

	// Limit Maximum number of records to return. _<b>This option is not yet supported.<b>_
	Limit *LimitQueryParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of records to skip for pagination. _<b>This option is not yet supported.<b>_
	Offset *OffsetQueryParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetConnectedAppsOfLocalAuthenticatorParams defines parameters for GetConnectedAppsOfLocalAuthenticator.
type GetConnectedAppsOfLocalAuthenticatorParams struct {
	// Limit Maximum number of records to return. _<b>This option is not yet supported.<b>_
	Limit *LimitQueryParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of records to skip for pagination. _<b>This option is not yet supported.<b>_
	Offset *OffsetQueryParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// AddUserDefinedLocalAuthenticatorJSONRequestBody defines body for AddUserDefinedLocalAuthenticator for application/json ContentType.
type AddUserDefinedLocalAuthenticatorJSONRequestBody = UserDefinedLocalAuthenticatorCreation

// UpdateUserDefinedLocalAuthenticatorJSONRequestBody defines body for UpdateUserDefinedLocalAuthenticator for application/json ContentType.
type UpdateUserDefinedLocalAuthenticatorJSONRequestBody = UserDefinedLocalAuthenticatorUpdate

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAuthenticators request
	GetAuthenticators(ctx context.Context, params *GetAuthenticatorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUserDefinedLocalAuthenticatorWithBody request with any body
	AddUserDefinedLocalAuthenticatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddUserDefinedLocalAuthenticator(ctx context.Context, body AddUserDefinedLocalAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserDefinedLocalAuthenticator request
	DeleteUserDefinedLocalAuthenticator(ctx context.Context, authenticatorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserDefinedLocalAuthenticatorWithBody request with any body
	UpdateUserDefinedLocalAuthenticatorWithBody(ctx context.Context, authenticatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserDefinedLocalAuthenticator(ctx context.Context, authenticatorId string, body UpdateUserDefinedLocalAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthenticatorsMetaTags request
	GetAuthenticatorsMetaTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectedAppsOfLocalAuthenticator request
	GetConnectedAppsOfLocalAuthenticator(ctx context.Context, authenticatorId string, params *GetConnectedAppsOfLocalAuthenticatorParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAuthenticators(ctx context.Context, params *GetAuthenticatorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthenticatorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserDefinedLocalAuthenticatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserDefinedLocalAuthenticatorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserDefinedLocalAuthenticator(ctx context.Context, body AddUserDefinedLocalAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserDefinedLocalAuthenticatorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserDefinedLocalAuthenticator(ctx context.Context, authenticatorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserDefinedLocalAuthenticatorRequest(c.Server, authenticatorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserDefinedLocalAuthenticatorWithBody(ctx context.Context, authenticatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserDefinedLocalAuthenticatorRequestWithBody(c.Server, authenticatorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserDefinedLocalAuthenticator(ctx context.Context, authenticatorId string, body UpdateUserDefinedLocalAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserDefinedLocalAuthenticatorRequest(c.Server, authenticatorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthenticatorsMetaTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthenticatorsMetaTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectedAppsOfLocalAuthenticator(ctx context.Context, authenticatorId string, params *GetConnectedAppsOfLocalAuthenticatorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectedAppsOfLocalAuthenticatorRequest(c.Server, authenticatorId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAuthenticatorsRequest generates requests for GetAuthenticators
func NewGetAuthenticatorsRequest(server string, params *GetAuthenticatorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authenticators")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddUserDefinedLocalAuthenticatorRequest calls the generic AddUserDefinedLocalAuthenticator builder with application/json body
func NewAddUserDefinedLocalAuthenticatorRequest(server string, body AddUserDefinedLocalAuthenticatorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddUserDefinedLocalAuthenticatorRequestWithBody(server, "application/json", bodyReader)
}

// NewAddUserDefinedLocalAuthenticatorRequestWithBody generates requests for AddUserDefinedLocalAuthenticator with any type of body
func NewAddUserDefinedLocalAuthenticatorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authenticators/custom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserDefinedLocalAuthenticatorRequest generates requests for DeleteUserDefinedLocalAuthenticator
func NewDeleteUserDefinedLocalAuthenticatorRequest(server string, authenticatorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authenticator-id", runtime.ParamLocationPath, authenticatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authenticators/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserDefinedLocalAuthenticatorRequest calls the generic UpdateUserDefinedLocalAuthenticator builder with application/json body
func NewUpdateUserDefinedLocalAuthenticatorRequest(server string, authenticatorId string, body UpdateUserDefinedLocalAuthenticatorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserDefinedLocalAuthenticatorRequestWithBody(server, authenticatorId, "application/json", bodyReader)
}

// NewUpdateUserDefinedLocalAuthenticatorRequestWithBody generates requests for UpdateUserDefinedLocalAuthenticator with any type of body
func NewUpdateUserDefinedLocalAuthenticatorRequestWithBody(server string, authenticatorId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authenticator-id", runtime.ParamLocationPath, authenticatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authenticators/custom/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthenticatorsMetaTagsRequest generates requests for GetAuthenticatorsMetaTags
func NewGetAuthenticatorsMetaTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authenticators/meta/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectedAppsOfLocalAuthenticatorRequest generates requests for GetConnectedAppsOfLocalAuthenticator
func NewGetConnectedAppsOfLocalAuthenticatorRequest(server string, authenticatorId string, params *GetConnectedAppsOfLocalAuthenticatorParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authenticator-id", runtime.ParamLocationPath, authenticatorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authenticators/%s/connected-apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAuthenticatorsWithResponse request
	GetAuthenticatorsWithResponse(ctx context.Context, params *GetAuthenticatorsParams, reqEditors ...RequestEditorFn) (*GetAuthenticatorsResponse, error)

	// AddUserDefinedLocalAuthenticatorWithBodyWithResponse request with any body
	AddUserDefinedLocalAuthenticatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserDefinedLocalAuthenticatorResponse, error)

	AddUserDefinedLocalAuthenticatorWithResponse(ctx context.Context, body AddUserDefinedLocalAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserDefinedLocalAuthenticatorResponse, error)

	// DeleteUserDefinedLocalAuthenticatorWithResponse request
	DeleteUserDefinedLocalAuthenticatorWithResponse(ctx context.Context, authenticatorId string, reqEditors ...RequestEditorFn) (*DeleteUserDefinedLocalAuthenticatorResponse, error)

	// UpdateUserDefinedLocalAuthenticatorWithBodyWithResponse request with any body
	UpdateUserDefinedLocalAuthenticatorWithBodyWithResponse(ctx context.Context, authenticatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserDefinedLocalAuthenticatorResponse, error)

	UpdateUserDefinedLocalAuthenticatorWithResponse(ctx context.Context, authenticatorId string, body UpdateUserDefinedLocalAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserDefinedLocalAuthenticatorResponse, error)

	// GetAuthenticatorsMetaTagsWithResponse request
	GetAuthenticatorsMetaTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthenticatorsMetaTagsResponse, error)

	// GetConnectedAppsOfLocalAuthenticatorWithResponse request
	GetConnectedAppsOfLocalAuthenticatorWithResponse(ctx context.Context, authenticatorId string, params *GetConnectedAppsOfLocalAuthenticatorParams, reqEditors ...RequestEditorFn) (*GetConnectedAppsOfLocalAuthenticatorResponse, error)
}

type GetAuthenticatorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Authenticators
	JSON400      *BadRequest
	JSON404      *NotFound
	JSON500      *ServerError
	JSON501      *NotImplemented
}

// Status returns HTTPResponse.Status
func (r GetAuthenticatorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthenticatorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserDefinedLocalAuthenticatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Authenticator
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AddUserDefinedLocalAuthenticatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserDefinedLocalAuthenticatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserDefinedLocalAuthenticatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteUserDefinedLocalAuthenticatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserDefinedLocalAuthenticatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserDefinedLocalAuthenticatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Authenticator
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateUserDefinedLocalAuthenticatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserDefinedLocalAuthenticatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthenticatorsMetaTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tags
	JSON400      *BadRequest
	JSON404      *NotFound
	JSON500      *ServerError
}

// Status returns HTTPResponse.Status
func (r GetAuthenticatorsMetaTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthenticatorsMetaTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectedAppsOfLocalAuthenticatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectedApps
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetConnectedAppsOfLocalAuthenticatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectedAppsOfLocalAuthenticatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAuthenticatorsWithResponse request returning *GetAuthenticatorsResponse
func (c *ClientWithResponses) GetAuthenticatorsWithResponse(ctx context.Context, params *GetAuthenticatorsParams, reqEditors ...RequestEditorFn) (*GetAuthenticatorsResponse, error) {
	rsp, err := c.GetAuthenticators(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthenticatorsResponse(rsp)
}

// AddUserDefinedLocalAuthenticatorWithBodyWithResponse request with arbitrary body returning *AddUserDefinedLocalAuthenticatorResponse
func (c *ClientWithResponses) AddUserDefinedLocalAuthenticatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUserDefinedLocalAuthenticatorResponse, error) {
	rsp, err := c.AddUserDefinedLocalAuthenticatorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserDefinedLocalAuthenticatorResponse(rsp)
}

func (c *ClientWithResponses) AddUserDefinedLocalAuthenticatorWithResponse(ctx context.Context, body AddUserDefinedLocalAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUserDefinedLocalAuthenticatorResponse, error) {
	rsp, err := c.AddUserDefinedLocalAuthenticator(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserDefinedLocalAuthenticatorResponse(rsp)
}

// DeleteUserDefinedLocalAuthenticatorWithResponse request returning *DeleteUserDefinedLocalAuthenticatorResponse
func (c *ClientWithResponses) DeleteUserDefinedLocalAuthenticatorWithResponse(ctx context.Context, authenticatorId string, reqEditors ...RequestEditorFn) (*DeleteUserDefinedLocalAuthenticatorResponse, error) {
	rsp, err := c.DeleteUserDefinedLocalAuthenticator(ctx, authenticatorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserDefinedLocalAuthenticatorResponse(rsp)
}

// UpdateUserDefinedLocalAuthenticatorWithBodyWithResponse request with arbitrary body returning *UpdateUserDefinedLocalAuthenticatorResponse
func (c *ClientWithResponses) UpdateUserDefinedLocalAuthenticatorWithBodyWithResponse(ctx context.Context, authenticatorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserDefinedLocalAuthenticatorResponse, error) {
	rsp, err := c.UpdateUserDefinedLocalAuthenticatorWithBody(ctx, authenticatorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserDefinedLocalAuthenticatorResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserDefinedLocalAuthenticatorWithResponse(ctx context.Context, authenticatorId string, body UpdateUserDefinedLocalAuthenticatorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserDefinedLocalAuthenticatorResponse, error) {
	rsp, err := c.UpdateUserDefinedLocalAuthenticator(ctx, authenticatorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserDefinedLocalAuthenticatorResponse(rsp)
}

// GetAuthenticatorsMetaTagsWithResponse request returning *GetAuthenticatorsMetaTagsResponse
func (c *ClientWithResponses) GetAuthenticatorsMetaTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthenticatorsMetaTagsResponse, error) {
	rsp, err := c.GetAuthenticatorsMetaTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthenticatorsMetaTagsResponse(rsp)
}

// GetConnectedAppsOfLocalAuthenticatorWithResponse request returning *GetConnectedAppsOfLocalAuthenticatorResponse
func (c *ClientWithResponses) GetConnectedAppsOfLocalAuthenticatorWithResponse(ctx context.Context, authenticatorId string, params *GetConnectedAppsOfLocalAuthenticatorParams, reqEditors ...RequestEditorFn) (*GetConnectedAppsOfLocalAuthenticatorResponse, error) {
	rsp, err := c.GetConnectedAppsOfLocalAuthenticator(ctx, authenticatorId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectedAppsOfLocalAuthenticatorResponse(rsp)
}

// ParseGetAuthenticatorsResponse parses an HTTP response from a GetAuthenticatorsWithResponse call
func ParseGetAuthenticatorsResponse(rsp *http.Response) (*GetAuthenticatorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthenticatorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Authenticators
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseAddUserDefinedLocalAuthenticatorResponse parses an HTTP response from a AddUserDefinedLocalAuthenticatorWithResponse call
func ParseAddUserDefinedLocalAuthenticatorResponse(rsp *http.Response) (*AddUserDefinedLocalAuthenticatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddUserDefinedLocalAuthenticatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Authenticator
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserDefinedLocalAuthenticatorResponse parses an HTTP response from a DeleteUserDefinedLocalAuthenticatorWithResponse call
func ParseDeleteUserDefinedLocalAuthenticatorResponse(rsp *http.Response) (*DeleteUserDefinedLocalAuthenticatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserDefinedLocalAuthenticatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateUserDefinedLocalAuthenticatorResponse parses an HTTP response from a UpdateUserDefinedLocalAuthenticatorWithResponse call
func ParseUpdateUserDefinedLocalAuthenticatorResponse(rsp *http.Response) (*UpdateUserDefinedLocalAuthenticatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserDefinedLocalAuthenticatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Authenticator
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAuthenticatorsMetaTagsResponse parses an HTTP response from a GetAuthenticatorsMetaTagsWithResponse call
func ParseGetAuthenticatorsMetaTagsResponse(rsp *http.Response) (*GetAuthenticatorsMetaTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthenticatorsMetaTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetConnectedAppsOfLocalAuthenticatorResponse parses an HTTP response from a GetConnectedAppsOfLocalAuthenticatorWithResponse call
func ParseGetConnectedAppsOfLocalAuthenticatorResponse(rsp *http.Response) (*GetConnectedAppsOfLocalAuthenticatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectedAppsOfLocalAuthenticatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectedApps
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
